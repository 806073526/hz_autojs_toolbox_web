import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as i,d as n,e as s,b as t,w as u,f as a}from"./app-ff93bfbc.js";const r={},k=n("p",null,"$crypto模块提供了对称加密(例如AES)、非对称加密(例如RSA)、消息摘要(例如MD5, SHA)等支持。",-1),d=n("h2",{id:"crypto-digest-message-algorithm-options",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#crypto-digest-message-algorithm-options","aria-hidden":"true"},"#"),s(" $crypto.digest(message, algorithm[, options])")],-1),y=n("li",null,[n("p",null,[n("code",null,"data"),s(" {any} 需要进行消息摘要的消息")])],-1),v=n("li",null,[n("p",null,[n("code",null,"key"),s(" {"),n("a",{href:"#key"},"Key"),s("} 解密密钥")])],-1),m=n("p",null,[n("code",null,"algorithm"),s(" {string} 消息摘要算法，包括：")],-1),g=n("li",null,[n("code",null,"MD5")],-1),b=n("li",null,[n("code",null,"SHA-1")],-1),h=n("li",null,[n("code",null,"SHA-224")],-1),E=n("li",null,[n("code",null,"SHA-256")],-1),q=n("li",null,[n("code",null,"SHA-384")],-1),f=n("code",null,"SHA-512",-1),B={href:"https://developer.android.com/reference/java/security/MessageDigest",target:"_blank",rel:"noopener noreferrer"},A=n("li",null,[n("p",null,[n("code",null,"options"),s(" {Object} 可选项，用于指定"),n("a",{href:"#%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA%E7%9A%84%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%A0%BC%E5%BC%8F"},"输入与输出的类型与格式")])],-1),S=n("li",null,[n("p",null,[s("返回 {any} 根据"),n("code",null,"options"),s("指定的输出类型返回不同数据")])],-1),_=a(`<p>对数据<code>data</code>用算法<code>algorithm</code>计算消息摘要，数据<code>data</code>可以是文件、二进制、base64、hex、字符串等数据，解密后数据可以返回二进制、base64、hex、字符串或者直接写入到文件中，具体参见<a href="#%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA%E7%9A%84%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%A0%BC%E5%BC%8F">输入与输出的类型与格式</a>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 计算字符串abc的md5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$crypto<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;MD5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 计算字符串abc的sha-256</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$crypto<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SHA-256&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$crypto<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">&quot;Auto.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SHA-256&quot;</span><span class="token punctuation">,</span> \\<span class="token punctuation">{</span> <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;hex&quot;</span> \\<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 计算文件/sdcard/1.txt的md5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$crypto<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;MD5&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;file&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="crypto-encrypt-data-key-algorithm-options" tabindex="-1"><a class="header-anchor" href="#crypto-encrypt-data-key-algorithm-options" aria-hidden="true">#</a> $crypto.encrypt(data, key, algorithm[, options])</h2>`,3),K=n("li",null,[n("p",null,[n("code",null,"data"),s(" {any} 明文消息，根据"),n("code",null,"options"),s("指定的输入类型为不同格式的参数")])],-1),P=n("li",null,[n("p",null,[n("code",null,"key"),s(" {"),n("a",{href:"#key"},"Key"),s("} 加密密钥。对称加密算法使用单个密钥，非对称加密则需要生成密钥对，参见"),n("a",{href:"#key"},"Key")])],-1),x=n("p",null,[n("code",null,"algorithm"),s(" {string} 加密算法，包括：")],-1),C=a("<li>AES</li><li>AES/ECB/NoPadding</li><li>AES/ECB/PKCS5Padding</li><li>AES/CBC/NoPadding</li><li>AES/CBC/PKCS5Padding</li><li>AES/CFB/NoPadding</li><li>AES/CFB/PKCS5Padding</li><li>AES/CTR/NoPadding</li><li>AES/CTR/PKCS5Padding</li><li>AES/OFB/PKCS5Padding</li><li>AES/OFB/PKCS5Padding</li><li>RSA/ECB/PKCS1Padding</li><li>RSA/ECB/NoPadding</li>",13),w={href:"https://developer.android.com/reference/javax/crypto/Cipher",target:"_blank",rel:"noopener noreferrer"},j=n("li",null,[n("p",null,[n("code",null,"options"),s(" {Object} 可选项，用于指定"),n("a",{href:"#%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA%E7%9A%84%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%A0%BC%E5%BC%8F"},"输入与输出的类型与格式")])],-1),$=n("li",null,[n("p",null,[s("返回 {any} 根据"),n("code",null,"options"),s("指定的输出类型返回不同数据")])],-1),R=a(`<p>使用密钥<code>key</code>对数据<code>data</code>用加密算法算法<code>algorithm</code>进行加密，数据<code>data</code>可以是文件、二进制、base64、hex、字符串等数据，加密后数据可以返回二进制、base64、hex、字符串或者直接写入到文件中，具体参见<a href="#%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA%E7%9A%84%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%A0%BC%E5%BC%8F">输入与输出的类型与格式</a>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&quot;Hello Autojs&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 密钥，由于AES等算法要求是128/192/256 bits，我们这里长度为16, 即128bits</span>
<span class="token keyword">let</span> str16 <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token keyword">new</span> $crypto<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span>str16<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// AES</span>
<span class="token function">toastLog</span><span class="token punctuation">(</span>$crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [-18, 27, -69, 81, 2, -87, -116, 23, -114, -86, -111, 40, 58, -127, -29, -59]</span>
<span class="token comment">// AES输出结果用base64展示</span>
<span class="token function">toastLog</span><span class="token punctuation">(</span>
  $crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;base64&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7hu7UQKpjBeOqpEoOoHjxQ==</span>
<span class="token comment">// AES默认明文填充模式PKCS5Padding, 结果同上</span>
<span class="token function">toastLog</span><span class="token punctuation">(</span>
  $crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;AES/ECB/PKCS5Padding&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;base64&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7hu7UQKpjBeOqpEoOoHjxQ==</span>

<span class="token comment">// AES加密</span>
<span class="token keyword">let</span> cipherText <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">toastLog</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [-18, 27, -69, 81, 2, -87, -116, 23, -114, -86, -111, 40, 58, -127, -29, -59]</span>

<span class="token comment">// RSA256KeyPair</span>
<span class="token keyword">let</span> algorithm <span class="token operator">=</span> <span class="token string">&quot;RSA&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> length <span class="token operator">=</span> <span class="token string">&quot;2048&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 生成RSA密钥对</span>
key <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&quot;Hello Autojs&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// RSA加密</span>
cipherText <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> key<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span> <span class="token string">&quot;RSA/ECB/PKCS1Padding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">toastLog</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [114, 99, -93, 6, -88, 8, -12, -53, -68, -15, ...]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="crypto-decrypt-data-key-algorithm-options" tabindex="-1"><a class="header-anchor" href="#crypto-decrypt-data-key-algorithm-options" aria-hidden="true">#</a> $crypto.decrypt(data, key, algorithm[, options])</h2>`,3),T=n("li",null,[n("p",null,[n("code",null,"data"),s(" {any} 密文消息"),n("code",null,"options"),s("指定的输入类型为不同格式的参数")])],-1),H=n("li",null,[n("p",null,[n("code",null,"key"),s(" {"),n("a",{href:"#key"},"Key"),s("} 解密密钥。对称加密算法使用单个密钥，非对称加密则需要生成密钥对，参见"),n("a",{href:"#key"},"Key")])],-1),F=n("p",null,[n("code",null,"algorithm"),s(" {string} 加密算法，包括：")],-1),N=a("<li>AES</li><li>AES/ECB/NoPadding</li><li>AES/ECB/PKCS5Padding</li><li>AES/CBC/NoPadding</li><li>AES/CBC/PKCS5Padding</li><li>AES/CFB/NoPadding</li><li>AES/CFB/PKCS5Padding</li><li>AES/CTR/NoPadding</li><li>AES/CTR/PKCS5Padding</li><li>AES/OFB/PKCS5Padding</li><li>AES/OFB/PKCS5Padding</li><li>RSA/ECB/PKCS1Padding</li><li>RSA/ECB/NoPadding</li>",13),O={href:"https://developer.android.com/reference/javax/crypto/Cipher",target:"_blank",rel:"noopener noreferrer"},D=n("li",null,[n("p",null,[n("code",null,"options"),s(" {Object} 可选项，用于指定"),n("a",{href:"#%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA%E7%9A%84%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%A0%BC%E5%BC%8F"},"输入与输出的类型与格式")])],-1),L=n("li",null,[n("p",null,[s("返回 {any} 根据"),n("code",null,"options"),s("指定的输出类型返回不同数据")])],-1),M=a(`<p>使用密钥<code>key</code>对数据<code>data</code>用解密算法算法<code>algorithm</code>进行解密，数据<code>data</code>可以是文件、二进制、base64、hex、字符串等数据，解密后数据可以返回二进制、base64、hex、字符串或者直接写入到文件中，具体参见<a href="#%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA%E7%9A%84%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%A0%BC%E5%BC%8F">输入与输出的类型与格式</a>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// AES加密，加密为base64数据</span>
<span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token keyword">new</span> $crypto<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">&quot;1234567890123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> cipherText <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, Auto.js Pro!&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;output&quot;</span><span class="token operator">:</span> <span class="token string">&quot;base64&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// AES解密，将base64数据解密为字符串</span>
<span class="token keyword">let</span> plaintext <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;input&quot;</span><span class="token operator">:</span> <span class="token string">&quot;base64&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;output&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">toastLog</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="crypto-generatekeypair-algorithm-length" tabindex="-1"><a class="header-anchor" href="#crypto-generatekeypair-algorithm-length" aria-hidden="true">#</a> $crypto.generateKeyPair(algorithm[, length])</h2><ul><li><p><code>algorithm</code> {string} 加密算法，包括</p><ul><li><code>DH</code></li><li><code>DSA</code></li><li><code>EC</code></li><li><code>RSA</code></li></ul></li><li><p><code>length</code> {number} 密钥长度。和算法相关，例如以位数指定的模数长度。默认为256。</p></li><li><p>返回 {<a href="#keypair">KeyPair</a>}</p></li></ul><p>生成一对密钥，包括公钥和私钥。例如在RSA加密算法中，我们可以用私钥加密，公钥解密做签名；或者公钥加密，私钥解密做数据加密。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> keyPair <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token string">&quot;RSA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;公钥为&quot;</span><span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;私钥为&quot;</span><span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 公钥加密、私钥解密</span>
<span class="token keyword">let</span> plainText <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> bytes <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>plainText<span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span> <span class="token string">&quot;RSA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> decryptedText <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span>privateKey<span class="token punctuation">,</span> <span class="token string">&quot;RSA&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>decryptedText<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 公钥解密、私钥加密</span>
<span class="token keyword">let</span> base64 <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>plainText<span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span>privateKey<span class="token punctuation">,</span> <span class="token string">&quot;RSA&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;base64&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
decryptedText <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>base64<span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span> <span class="token string">&quot;RSA&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;base64&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>decryptedText<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="key" tabindex="-1"><a class="header-anchor" href="#key" aria-hidden="true">#</a> Key</h1><p>密钥对象。可以直接通过构造函数构造。比如<code>new Key(&#39;12345678&#39;)</code>。</p><h2 id="new-key-data-options" tabindex="-1"><a class="header-anchor" href="#new-key-data-options" aria-hidden="true">#</a> new Key(data[, options])</h2><ul><li><code>data</code> {any} 密钥的内容，根据<code>options</code>选项的输入格式而定，默认为字符串格式</li><li><code>options</code> {Object} 可选参数，参见<a href="#%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA%E7%9A%84%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%A0%BC%E5%BC%8F">输入与输出的类型与格式</a></li></ul><p>构造函数，构造一个Key对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token keyword">new</span> $crypto<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token string">&#39;1234567890123456&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取Key的二进制数据</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> key<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
<span class="token comment">// 转换为base64</span>
<span class="token keyword">let</span> base64 <span class="token operator">=</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">.</span><span class="token constant">NO_WRAP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 从base64重新构造一个Key</span>
<span class="token keyword">let</span> copiedKey <span class="token operator">=</span> <span class="token keyword">new</span> $crypto<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span>base64<span class="token punctuation">,</span> \\<span class="token punctuation">{</span><span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;base64&quot;</span>\\<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copiedKey<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="key-data" tabindex="-1"><a class="header-anchor" href="#key-data" aria-hidden="true">#</a> Key.data</h2><ul><li>{byte[]}</li></ul><p>Key的二进制数据。</p><h1 id="keypair" tabindex="-1"><a class="header-anchor" href="#keypair" aria-hidden="true">#</a> KeyPair</h1><p>密钥对对象。可以通过<code>$crypto.generateKeyPair()</code>函数生成，也可以通过构造函数构造。</p><h2 id="new-keypair-publickey-privatekey-options" tabindex="-1"><a class="header-anchor" href="#new-keypair-publickey-privatekey-options" aria-hidden="true">#</a> new KeyPair(publicKey, privateKey[, options])</h2><p><strong>[Pro 8.7.2新增]</strong></p><ul><li><code>publicKey</code> {any} 公钥的数据，根据<code>options</code>选项的输入格式而定，默认为字符串格式</li><li><code>privateKey</code> {any} 私钥的数据，根据<code>options</code>选项的输入格式而定，默认为字符串格式</li><li><code>options</code> {Object} 可选参数，参见<a href="#%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA%E7%9A%84%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%A0%BC%E5%BC%8F">输入与输出的类型与格式</a></li></ul><p>构造函数，构造一个KeyPair对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> keyPair <span class="token operator">=</span> $crypto<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token string">&quot;RSA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取公钥私钥的二进制数据，并转为base64</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">publicKey</span><span class="token operator">:</span> <span class="token function">base64Bytes</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">.</span>publicKey<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">privateKey</span><span class="token operator">:</span> <span class="token function">base64Bytes</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">.</span>privateKey<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 从base64重新构造一个Key</span>
<span class="token keyword">let</span> copiedKeyPair <span class="token operator">=</span> <span class="token keyword">new</span> $crypto<span class="token punctuation">.</span><span class="token function">KeyPair</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span> data<span class="token punctuation">.</span>privateKey<span class="token punctuation">,</span> \\<span class="token punctuation">{</span><span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;base64&quot;</span>\\<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copiedKeyPair<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">base64Bytes</span><span class="token punctuation">(</span><span class="token parameter">bytes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">.</span><span class="token constant">NO_WRAP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="keypair-privatekey" tabindex="-1"><a class="header-anchor" href="#keypair-privatekey" aria-hidden="true">#</a> KeyPair.privateKey</h2><ul><li>{<a href="#key">Key</a>}</li></ul><p>私钥。</p><h2 id="keypair-publickey" tabindex="-1"><a class="header-anchor" href="#keypair-publickey" aria-hidden="true">#</a> KeyPair.publicKey</h2><ul><li>{<a href="#key">Key</a>}</li></ul><p>公钥。</p><h1 id="输入与输出的类型与格式" tabindex="-1"><a class="header-anchor" href="#输入与输出的类型与格式" aria-hidden="true">#</a> 输入与输出的类型与格式</h1><p><code>options</code> {object} 用于指定加解密、消息摘要时输入和输出的类型与格式。</p><ul><li><code>input</code> {string} 输入类型，用于指定加密、解密、摘要的源数据的类型。如果输入为字符串，则默认为<code>string</code>；否则默认为<code>bytes</code>。可选的值包括： <ul><li><code>string</code> 字符串格式的数据</li><li><code>base64</code> base64格式的数据</li><li><code>hex</code> base16格式的数据</li><li><code>bytes</code> Java二进制字节数组</li><li><code>file</code> 文件类型，将从文件读取数据进行加解密</li></ul></li><li><code>output</code> {string} 输出类型，用于指定加密、解密、摘要后的数据的类型。对于加解密，默认为<code>bytes</code>；对于消息摘要，默认为<code>hex</code>。可选的值包括： <ul><li><code>string</code> 字符串格式的数据</li><li><code>base64</code> base64格式的数据</li><li><code>hex</code> base16格式的数据</li><li><code>bytes</code> Java二进制字节数组</li><li><code>file</code> 文件类型，将处理后的数据写入到文件中，必须同时制定<code>dest</code>参数</li></ul></li><li><code>dest</code> {string} 输出文件路径，<code>output</code>类型为<code>file</code>时，用于指定加密、解密、摘要后输出文件的路径</li><li><code>encoding</code> {string} 编码格式，<code>input</code>类型为<code>string</code>时，用于指定输入字符串转为二进制数据所使用的字符编码；<code>output</code>类型为<code>string</code>时，用于指定输出数据转为字符串数据所使用的字符编码。默认为<code>utf-8</code></li><li><code>iv</code> {string} | {bytes} 指定AES等加密的初始化向量参数，可选。Pro 9.2.12版本新增。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> filepath <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;./test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&quot;Hello Autojs&quot;</span><span class="token punctuation">;</span>
$files<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> str16 <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token keyword">new</span> $crypto<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span>str16<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建加密前的base64内容</span>
<span class="token keyword">let</span> base64Content <span class="token operator">=</span> $base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 加密前的hex内容</span>
<span class="token keyword">let</span> hexContent <span class="token operator">=</span> <span class="token string">&quot;48656c6c6f204175746f6a73&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 加密文件，输出格式为二进制</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">,</span> \\<span class="token punctuation">{</span> <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;base64&quot;</span> \\<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 加密文件，输出到另一个文件</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">,</span> \\<span class="token punctuation">{</span> <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">dest</span><span class="token operator">:</span> <span class="token string">&quot;./output.txt&quot;</span> \\<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 加密base64内容，输出格式为base64</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string">&quot;SGVsbG8gQXV0b2pz&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">,</span> \\<span class="token punctuation">{</span> <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;base64&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;base64&quot;</span> \\<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 加密hex内容，输出格式为hex</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string">&quot;48656c6c6f204175746f6a73&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">,</span> \\<span class="token punctuation">{</span> <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;hex&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;hex&quot;</span> \\<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$crypto<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Autojs&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [-18, 27, -69, 81, 2, -87, -116, 23, -114, -86, -111, 40, 58, -127, -29, -59]</span>

<span class="token comment">// 计算文件MD5，输出为hex</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$crypto<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> <span class="token string">&quot;MD5&quot;</span><span class="token punctuation">,</span> \\<span class="token punctuation">{</span> <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&quot;hex&quot;</span> \\<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32);function V(Q,W){const e=o("RouterLink"),p=o("ExternalLinkIcon");return l(),i("div",null,[n("p",null,[n("strong",null,[s("["),t(e,{to:"/pro.autojs.html"},{default:u(()=>[s("Pro 8.0.0新增")]),_:1}),s("]")])]),k,d,n("ul",null,[y,v,n("li",null,[m,n("ul",null,[g,b,h,E,q,n("li",null,[f,s(" 具体可参阅 "),n("a",B,[s("MessageDigest"),t(p)])])])]),A,S]),_,n("ul",null,[K,P,n("li",null,[x,n("ul",null,[C,n("li",null,[s("... 具体可参阅 "),n("a",w,[s("javax.crypto.Cipher"),t(p)])])])]),j,$]),R,n("ul",null,[T,H,n("li",null,[F,n("ul",null,[N,n("li",null,[s("... 具体可参阅 "),n("a",O,[s("javax.crypto.Cipher"),t(p)])])])]),D,L]),M])}const J=c(r,[["render",V],["__file","crypto.html.vue"]]);export{J as default};
