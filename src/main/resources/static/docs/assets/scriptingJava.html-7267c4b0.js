import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,f as t}from"./app-ff93bfbc.js";const e={},p=t(`<p>Rhino提供了非常方便地和Java交互的能力。</p><h2 id="liveconnect-与javascript的java通信" tabindex="-1"><a class="header-anchor" href="#liveconnect-与javascript的java通信" aria-hidden="true">#</a> liveConnect：与JavaScript的Java通信</h2><p>Rhino允许您从JavaScript中创建Java类并调用Java方法。例如:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="访问javabean属性" tabindex="-1"><a class="header-anchor" href="#访问javabean属性" aria-hidden="true">#</a> 访问JavaBean属性</h2><p>Java类可以使用getter和Setter方法定义JavaBean属性。例如，以下类定义了两个属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Me</span> <span class="token punctuation">{</span>  
 <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \\<span class="token punctuation">{</span> <span class="token keyword">return</span> mAge<span class="token punctuation">;</span> \\<span class="token punctuation">}</span>  
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> anAge<span class="token punctuation">)</span> \\<span class="token punctuation">{</span> mAge <span class="token operator">=</span> anAge<span class="token punctuation">;</span> \\<span class="token punctuation">}</span>  
 <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \\<span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;male&quot;</span><span class="token punctuation">;</span> \\<span class="token punctuation">}</span>  
 <span class="token keyword">private</span> <span class="token keyword">int</span> mAge<span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义的两个属性是 <em>age_和_sex</em>。 _sex_属性是只读的：它没有Setter。</p><p>使用Rhino我们可以访问Bean属性，就像它们一样的JavaScript属性。我们也可以继续调用定义属性的方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> me <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>me<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
me<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>me<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>me<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于_sex_属性是只读的，因此我们不允许写入它。</p><h2 id="导入java类和包" tabindex="-1"><a class="header-anchor" href="#导入java类和包" aria-hidden="true">#</a> 导入Java类和包</h2><p>上面我们看到了importPackage函数的使用来从特定的Java包导入所有类。还有importClass，它导入单个类。</p><p>你可以直接使用<code>android.view.View</code>来表示Android中的View类，默认支持的顶级包名前缀为<code>com</code>, <code>android</code>, <code>java</code>, <code>org</code>，对于其他包名，需要使用<code>Packages</code>对象，比如<code>Packages.javax.xml.xpath.XPath</code>或<code>Packages[&quot;javax.xml.xpath.XPath&quot;]</code>。</p><p>也可以使用<code>importClass</code>或<code>importPackage</code>函数来导入Java/Android中的包名或类，比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">importClass</span><span class="token punctuation">(</span><span class="token string">&quot;android.view.KeyEvent&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 或者</span>
<span class="token keyword">let</span> KeyEvent <span class="token operator">=</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>KeyEvent<span class="token punctuation">;</span>
<span class="token comment">// 或者</span>
<span class="token function">importPackage</span><span class="token punctuation">(</span><span class="token string">&quot;android.view&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="扩展java类并使用javascript实现java接口" tabindex="-1"><a class="header-anchor" href="#扩展java类并使用javascript实现java接口" aria-hidden="true">#</a> 扩展Java类并使用JavaScript实现Java接口</h2><p>例如为某个UI中的控件设置点击监听OnClickListener:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>
$ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>frame<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">&quot;btn&quot;</span> text<span class="token operator">=</span><span class="token string">&quot;BUTTON&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>frame<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">view</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;clicked&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$ui<span class="token punctuation">.</span>btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们键入<code>new android.view.View.OnClickListener</code>时，rhino实际上创建了一个新的Java类，它实现了OnClickListener并将从该类转发给JavaScript对象的调用。</p><p>Rhino也允许将JavaScript函数直接传递给Java方法，如果相应的参数是Java接口，它具有单个方法或其所有方法具有相同数量的参数，相应的参数具有相同类型的参数。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$ui<span class="token punctuation">.</span>btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">view</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;clicked&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若Java接口有多个方法，则可以传入一个JavaScript对象来实现他，比如对于Java接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* Interface definition for a callback to be invoked when this view is attached
* or detached from its window.
*/</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnAttachStateChangeListener</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
        * Called when the view is attached to a window.
        * <span class="token keyword">@param</span> <span class="token parameter">v</span> The view that was attached
        */</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onViewAttachedToWindow</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
        * Called when the view is detached from a window.
        * <span class="token keyword">@param</span> <span class="token parameter">v</span> The view that was detached
        */</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onViewDetachedFromWindow</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在JavaScript中这样实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">.</span>OnAttachStateChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">onViewAttachedToWindow</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">view</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;attached&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onViewDetachedFromWindow</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">view</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;detached&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$ui<span class="token punctuation">.</span>btn<span class="token punctuation">.</span><span class="token function">addOnAttachStateChangeListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="javaadapter构造函数" tabindex="-1"><a class="header-anchor" href="#javaadapter构造函数" aria-hidden="true">#</a> JavaAdapter构造函数</h2><p>使用JavaAdapter也可以用于实现接口，同时可以用于继承普通类或抽象类。他的原理是动态生成一个类。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaAdapter</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">.</span>OnAttachStateChangeListener<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">onViewAttachedToWindow</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">view</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;attached&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onViewDetachedFromWindow</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">view</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;detached&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们想实现多个接口，则：</p><div class="language-JS line-numbers-mode" data-ext="JS"><pre class="language-JS"><code>let listener = new JavaAdapter(android.view.View.OnAttachStateChangeListener, java.lang.Runnable, {
  onViewAttachedToWindow: function(view) {
    console.log(&#39;attached&#39;);
  },
  onViewDetachedFromWindow: function(view) {
    console.log(&#39;detached&#39;);
  },
  run: function() {
    console.log(&#39;run&#39;);
  }
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般来说，语法是:</p><div class="language-JS line-numbers-mode" data-ext="JS"><pre class="language-JS"><code>new JavaAdapter(java-class, [java-class，...]，javascript-object, [args...])
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最多一个java-class是java类，剩下的java-class参数是接口。结果将是继承指定的Java类并实现所有的Java接口，并将任何调用转发给javascript-object的方法。args参数用于指定构造Java类的构造函数。</p><p>比如继承View，重写onDraw函数:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;ui&quot;</span><span class="token punctuation">;</span>

$ui<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>vertical<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>frame id<span class="token operator">=</span><span class="token string">&quot;container&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>vertical<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaAdapter</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">onDraw</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">canvas</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 调用父类View的onDraw</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">super$onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>      
    canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// activity为android.view.View的构造函数参数</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> activity<span class="token punctuation">)</span><span class="token punctuation">;</span>

$ui<span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36),c=[p];function o(i,l){return a(),s("div",null,c)}const r=n(e,[["render",o],["__file","scriptingJava.html.vue"]]);export{r as default};
