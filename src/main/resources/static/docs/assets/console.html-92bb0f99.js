import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as p,d as n,e as a,b as o,f as s}from"./app-ff93bfbc.js";const i={},r=s('<blockquote><p>Stability: 2 - Stable</p></blockquote><p>控制台模块提供了一个和Web浏览器中相似的用于调试的控制台。用于输出一些调试信息、中间结果等。 console模块中的一些函数也可以直接作为全局函数使用，例如log, print等。</p><h2 id="console-show" tabindex="-1"><a class="header-anchor" href="#console-show" aria-hidden="true">#</a> console.show()</h2><p>显示控制台。这会显示一个控制台的悬浮窗(需要悬浮窗权限)。</p><h2 id="console-hide" tabindex="-1"><a class="header-anchor" href="#console-hide" aria-hidden="true">#</a> console.hide()</h2><p>隐藏控制台悬浮窗。</p><h2 id="console-clear" tabindex="-1"><a class="header-anchor" href="#console-clear" aria-hidden="true">#</a> console.clear()</h2><p>清空控制台。</p><h2 id="console-log-data-args" tabindex="-1"><a class="header-anchor" href="#console-log-data-args" aria-hidden="true">#</a> console.log([data][, ...args])#</h2><ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul>',10),d={href:"http://man7.org/linux/man-pages/man3/printf.3.html",target:"_blank",rel:"noopener noreferrer"},u=s(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;count: %d&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印: count: 5 到 stdout</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;count:&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印: count: 5 到 stdout</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>详见 util.format()。</p><p>该函数也可以作为全局函数使用。</p><h2 id="console-verbose-data-args" tabindex="-1"><a class="header-anchor" href="#console-verbose-data-args" aria-hidden="true">#</a> console.verbose([data][, ...args])</h2><ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul><p>与console.log类似，但输出结果以灰色字体显示。输出优先级低于log，用于输出观察性质的信息。</p><h2 id="console-info-data-args" tabindex="-1"><a class="header-anchor" href="#console-info-data-args" aria-hidden="true">#</a> console.info([data][, ...args])</h2><ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul><p>与console.log类似，但输出结果以绿色字体显示。输出优先级高于log, 用于输出重要信息。</p><h2 id="console-warn-data-args" tabindex="-1"><a class="header-anchor" href="#console-warn-data-args" aria-hidden="true">#</a> console.warn([data][, ...args])</h2><ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul><p>与console.log类似，但输出结果以蓝色字体显示。输出优先级高于info, 用于输出警告信息。</p><h2 id="console-error-data-args" tabindex="-1"><a class="header-anchor" href="#console-error-data-args" aria-hidden="true">#</a> console.error([data][, ...args])</h2><ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul><p>与console.log类似，但输出结果以红色字体显示。输出优先级高于warn, 用于输出错误信息。</p><h2 id="console-assert-value-message" tabindex="-1"><a class="header-anchor" href="#console-assert-value-message" aria-hidden="true">#</a> console.assert(value, message)</h2><ul><li><code>value</code> {any} 要断言的布尔值</li><li><code>message</code> {string} value为false时要输出的信息</li></ul><p>断言。如果value为false则输出错误信息message并停止脚本运行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;加法出错啦&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-time-label" tabindex="-1"><a class="header-anchor" href="#console-time-label" aria-hidden="true">#</a> console.time([label])</h2><p><strong>[v4.1.0新增]</strong></p><ul><li><code>label</code> {String} 计时器标签，可省略</li></ul><p>启动一个定时器，用以计算一个操作的持续时间。 定时器由一个唯一的 <code>label</code> 标识。 当调用 <code>console.timeEnd()</code> 时，可以使用相同的 <code>label</code> 来停止定时器，并以毫秒为单位将持续时间输出到控制台。 重复启动同一个标签的定时器会覆盖之前启动同一标签的定时器。</p><h2 id="console-timeend-label" tabindex="-1"><a class="header-anchor" href="#console-timeend-label" aria-hidden="true">#</a> console.timeEnd(label)</h2><p><strong>[v4.1.0新增]</strong></p><ul><li><code>label</code> {String} 计时器标签</li></ul><p>停止之前通过调用 <code>console.time()</code> 启动的定时器，并打印结果到控制台。 调用 <code>console.timeEnd()</code> 后定时器会被删除。如果不存在标签指定的定时器则会打印 <code>NaNms</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;求和&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;求和&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印 求和: xxx ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-trace-data-args" tabindex="-1"><a class="header-anchor" href="#console-trace-data-args" aria-hidden="true">#</a> console.trace([data][, ...args])</h2><p><strong>[v4.1.0新增]</strong></p><ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul><p>与console.log类似，同时会打印出调用这个函数所在的调用栈信息（即当前运行的文件、行数等信息）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&#39;Show me&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印: (堆栈跟踪会根据被调用的跟踪的位置而变化)</span>
<span class="token comment">// Show me</span>
<span class="token comment">//  at &lt;test&gt;:7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-input-data-args" tabindex="-1"><a class="header-anchor" href="#console-input-data-args" aria-hidden="true">#</a> console.input(data[, ...args])</h2><ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul><p>与console.log一样输出信息，并在控制台显示输入框等待输入。按控制台的确认按钮后会将输入的字符串用eval计算后返回。</p><p><strong>部分机型可能会有控制台不显示输入框的情况，属于bug。</strong></p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> n <span class="token operator">=</span> console<span class="token punctuation">.</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个数字:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">//输入123之后：</span>
<span class="token function">toast</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//显示124</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-rawinput-data-args" tabindex="-1"><a class="header-anchor" href="#console-rawinput-data-args" aria-hidden="true">#</a> console.rawInput(data[, ...args])</h2><ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul><p>与console.log一样输出信息，并在控制台显示输入框等待输入。按控制台的确认按钮后会将输入的字符串直接返回。</p><p>部分机型可能会有控制台不显示输入框的情况，属于bug。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> n <span class="token operator">=</span> console<span class="token punctuation">.</span><span class="token function">rawInput</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个数字:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">//输入123之后：</span>
<span class="token function">toast</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//显示1231</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-setsize-w-h" tabindex="-1"><a class="header-anchor" href="#console-setsize-w-h" aria-hidden="true">#</a> console.setSize(w, h)</h2><ul><li><code>w</code> {number} 宽度</li><li><code>h</code> {number} 高度</li></ul><p>设置控制台的大小，单位像素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设置控制台大小为屏幕的四分之一</span>
console<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>device<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> device<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-setposition-x-y" tabindex="-1"><a class="header-anchor" href="#console-setposition-x-y" aria-hidden="true">#</a> console.setPosition(x, y)</h2><ul><li><code>x</code> {number} 横坐标</li><li><code>y</code> {number} 纵坐标</li></ul><p>设置控制台的位置，单位像素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">setPosition</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-setgloballogconfig-config" tabindex="-1"><a class="header-anchor" href="#console-setgloballogconfig-config" aria-hidden="true">#</a> console.setGlobalLogConfig(config)</h2><p><strong>[v4.1.0新增]</strong></p>`,55),k=n("p",null,[n("code",null,"config"),a(" {Object} 日志配置，可选的项有：")],-1),h=n("li",null,[n("code",null,"file"),a(" {string} 日志文件路径，将会把日志写入该文件中")],-1),v=n("li",null,[n("code",null,"maxFileSize"),a(" {number} 最大文件大小，单位字节，默认为512 * 1024 (512KB)")],-1),g=n("li",null,[n("code",null,"rootLevel"),a(' {string} 写入的日志级别，默认为"ALL"（所有日志），可以为"OFF"(关闭), "DEBUG", "INFO", "WARN", "ERROR", "FATAL"等。')],-1),m=n("li",null,[n("code",null,"maxBackupSize"),a(" {number} 日志备份文件最大数量，默认为5")],-1),b=n("code",null,"filePattern",-1),f={href:"http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html",target:"_blank",rel:"noopener noreferrer"},x=s(`<p>设置日志保存的路径和配置。例如把日志保存到&quot;/sdcard/1.txt&quot;:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">setGlobalLogConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/sdcard/1.txt&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意该函数会影响所有脚本的日志记录。</p><h2 id="print-text" tabindex="-1"><a class="header-anchor" href="#print-text" aria-hidden="true">#</a> print(text)</h2><ul><li><code>text</code> {string} | {Object} 要打印到控制台的信息</li></ul><p>相当于<code>log(text)</code>。</p>`,6);function _(y,j){const e=c("ExternalLinkIcon");return l(),p("div",null,[r,n("p",null,[a("打印到控制台，并带上换行符。 可以传入多个参数，第一个参数作为主要信息，其他参数作为类似于 "),n("a",d,[a("printf(3)"),o(e)]),a(" 中的代替值（参数都会传给 util.format()）。")]),u,n("ul",null,[n("li",null,[k,n("ul",null,[h,v,g,m,n("li",null,[b,a(" {string} 日志写入格式，参见"),n("a",f,[a("PatternLayout"),o(e)])])])])]),x])}const S=t(i,[["render",_],["__file","console.html.vue"]]);export{S as default};
