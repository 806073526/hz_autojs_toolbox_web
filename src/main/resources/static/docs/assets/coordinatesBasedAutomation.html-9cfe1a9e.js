import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c,d as a,e as n,b as l,f as t}from"./app-ff93bfbc.js";const i={},d=t(`<blockquote><p>Stability: 2 - Stable</p></blockquote><p>本章节介绍了一些使用坐标进行点击、滑动的函数。这些函数有的需要安卓7.0以上，有的需要root权限。</p><p>要获取要点击的位置的坐标，可以在开发者选项中开启&quot;指针位置&quot;。</p><p>基于坐标的脚本通常会有分辨率的问题，这时可以通过<code>setScreenMetrics()</code>函数来进行自动坐标放缩。这个函数会影响本章节的所有点击、长按、滑动等函数。通过设定脚本设计时的分辨率，使得脚本在其他分辨率下自动放缩坐标。</p><p>控件和坐标也可以相互结合。一些控件是无法点击的(clickable为false), 无法通过<code>.click()</code>函数来点击，这时如果安卓版本在7.0以上或者有root权限，就可以通过以下方式来点击：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//获取这个控件</span>
<span class="token keyword">var</span> widget <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取其中心位置并点击</span>
<span class="token function">click</span><span class="token punctuation">(</span>widget<span class="token punctuation">.</span><span class="token function">bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">centerX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> widget<span class="token punctuation">.</span><span class="token function">bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">centerY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//如果用root权限则用Tap</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="setscreenmetrics-width-height" tabindex="-1"><a class="header-anchor" href="#setscreenmetrics-width-height" aria-hidden="true">#</a> setScreenMetrics(width, height)</h2><ul><li><code>width</code> {number} 屏幕宽度，单位像素</li><li><code>height</code> {number} 屏幕高度，单位像素</li></ul><p>设置脚本坐标点击所适合的屏幕宽高。如果脚本运行时，屏幕宽度不一致会自动放缩坐标。</p><p>例如在1920*1080的设备中，某个操作的代码为</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setScreenMetrics</span><span class="token punctuation">(</span><span class="token number">1080</span><span class="token punctuation">,</span> <span class="token number">1920</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">click</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">longClick</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么在其他设备上AutoJs会自动放缩坐标以便脚本仍然有效。例如在540 * 960的屏幕中<code>click(800, 200)</code>实际上会点击位置(400, 100)。</p><h2 id="安卓7-0以上的触摸和手势模拟" tabindex="-1"><a class="header-anchor" href="#安卓7-0以上的触摸和手势模拟" aria-hidden="true">#</a> 安卓7.0以上的触摸和手势模拟</h2><blockquote><p>Stability: 2 - Stable</p></blockquote><p><strong>注意以下命令只有Android7.0及以上才有效</strong></p><h3 id="click-x-y" tabindex="-1"><a class="header-anchor" href="#click-x-y" aria-hidden="true">#</a> click(x, y)</h3><ul><li><code>x</code> {number} 要点击的坐标的x值</li><li><code>y</code> {number} 要点击的坐标的y值</li></ul><p>模拟点击坐标(x, y)，并返回是否点击成功。只有在点击执行完成后脚本才继续执行。</p><p>一般而言，只有点击过程(大约150毫秒)中被其他事件中断(例如用户自行点击)才会点击失败。</p><p>使用该函数模拟连续点击时可能有点击速度过慢的问题，这时可以用<code>press()</code>函数代替。</p><h3 id="longclick-x-y" tabindex="-1"><a class="header-anchor" href="#longclick-x-y" aria-hidden="true">#</a> longClick(x, y)</h3><ul><li><code>x</code> {number} 要长按的坐标的x值</li><li><code>y</code> {number} 要长按的坐标的y值</li></ul><p>模拟长按坐标(x, y), 并返回是否成功。只有在长按执行完成（大约600毫秒）时脚本才会继续执行。</p><p>一般而言，只有长按过程中被其他事件中断(例如用户自行点击)才会长按失败。</p><h3 id="press-x-y-duration" tabindex="-1"><a class="header-anchor" href="#press-x-y-duration" aria-hidden="true">#</a> press(x, y, duration)</h3><ul><li><code>x</code> {number} 要按住的坐标的x值</li><li><code>y</code> {number} 要按住的坐标的y值</li><li><code>duration</code> {number} 按住时长，单位毫秒</li></ul><p>模拟按住坐标(x, y), 并返回是否成功。只有按住操作执行完成时脚本才会继续执行。</p><p>如果按住时间过短，那么会被系统认为是点击；如果时长超过500毫秒，则认为是长按。</p><p>一般而言，只有按住过程中被其他事件中断才会操作失败。</p><p>一个连点器的例子如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//循环100次</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//点击位置(500, 1000), 每次用时1毫秒</span>
  <span class="token function">press</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="swipe-x1-y1-x2-y2-duration" tabindex="-1"><a class="header-anchor" href="#swipe-x1-y1-x2-y2-duration" aria-hidden="true">#</a> swipe(x1, y1, x2, y2, duration)</h3><ul><li><code>x1</code> {number} 滑动的起始坐标的x值</li><li><code>y1</code> {number} 滑动的起始坐标的y值</li><li><code>x2</code> {number} 滑动的结束坐标的x值</li><li><code>y2</code> {number} 滑动的结束坐标的y值</li><li><code>duration</code> {number} 滑动时长，单位毫秒</li></ul><p>模拟从坐标(x1, y1)滑动到坐标(x2, y2)，并返回是否成功。只有滑动操作执行完成时脚本才会继续执行。</p><p>一般而言，只有滑动过程中被其他事件中断才会滑动失败。</p><h3 id="gesture-duration-x1-y1-x2-y2" tabindex="-1"><a class="header-anchor" href="#gesture-duration-x1-y1-x2-y2" aria-hidden="true">#</a> gesture(duration, [x1, y1], [x2, y2], ...)</h3><ul><li><code>duration</code> {number} 手势的时长</li><li><code>[x, y]</code> {...} 手势滑动路径的一系列坐标</li></ul><p>模拟手势操作。例如<code>gesture(1000, [0, 0], [500, 500], [500, 1000])</code>为模拟一个从(0, 0)到(500, 500)到(500, 100)的手势操作，时长为2秒。</p><h3 id="gestures-delay1-duration1-x1-y1-x2-y2-delay2-duration2-x3-y3-x4-y4" tabindex="-1"><a class="header-anchor" href="#gestures-delay1-duration1-x1-y1-x2-y2-delay2-duration2-x3-y3-x4-y4" aria-hidden="true">#</a> gestures([delay1, duration1, [x1, y1], [x2, y2], ...], [delay2, duration2, [x3, y3], [x4, y4], ...], ...)</h3><p>同时模拟多个手势。每个手势的参数为[delay, duration, 坐标], delay为延迟多久(毫秒)才执行该手势；duration为手势执行时长；坐标为手势经过的点的坐标。其中delay参数可以省略，默认为0。</p><p>例如手指捏合：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">gestures</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
         <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用root权限点击和滑动的简单命令" tabindex="-1"><a class="header-anchor" href="#使用root权限点击和滑动的简单命令" aria-hidden="true">#</a> 使用root权限点击和滑动的简单命令</h2><blockquote><p>Stability: 1 - Experimental</p></blockquote><p>注意：本章节的函数在后续版本很可能有改动！请勿过分依赖本章节函数的副作用。推荐使用<code>RootAutomator</code>代替本章节的触摸函数。</p><p>以下函数均需要root权限，可以实现任意位置的点击、滑动等。</p><ul><li>这些函数通常首字母大写以表示其特殊的权限。</li><li>这些函数均不返回任何值。</li><li>并且，这些函数的执行是异步的、非阻塞的，在不同机型上所用的时间不同。脚本不会等待动作执行完成才继续执行。因此最好在每个函数之后加上适当的sleep来达到期望的效果。</li></ul><p>例如:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Tap</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，动作的执行可能无法被停止，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">Tap</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码执行后可能会出现在任务管理中停止脚本后点击仍然继续的情况。 因此，强烈建议在每个动作后加上延时：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">Tap</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tap-x-y" tabindex="-1"><a class="header-anchor" href="#tap-x-y" aria-hidden="true">#</a> Tap(x, y)</h3><ul><li><code>x</code> {number} 要点击的x坐标</li><li><code>y</code> {number} 要点击的y坐标</li></ul><p>点击位置(x, y), 您可以通过&quot;开发者选项&quot;开启指针位置来确定点击坐标。</p><h3 id="swipe-x1-y1-x2-y2-duration-1" tabindex="-1"><a class="header-anchor" href="#swipe-x1-y1-x2-y2-duration-1" aria-hidden="true">#</a> Swipe(x1, y1, x2, y2, [duration])</h3><ul><li><code>x1</code> {number} 滑动起点的x坐标</li><li><code>y1</code> {number} 滑动起点的y坐标</li><li><code>x2</code> {number} 滑动终点的x坐标</li><li><code>y2</code> {number} 滑动终点的y坐标</li><li><code>duration</code> {number} 滑动动作所用的时间</li></ul><p>滑动。从(x1, y1)位置滑动到(x2, y2)位置。</p><h2 id="rootautomator" tabindex="-1"><a class="header-anchor" href="#rootautomator" aria-hidden="true">#</a> RootAutomator</h2><blockquote><p>Stability: 2 - Stable</p></blockquote><p>RootAutomator是一个使用root权限来模拟触摸的对象，用它可以完成触摸与多点触摸，并且这些动作的执行没有延迟。</p><p>一个脚本中最好只存在一个RootAutomator，并且保证脚本结束退出他。可以在exit事件中退出RootAutomator，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> ra <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootAutomator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;exit&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  ra<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//执行一些点击操作</span>
<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意</p><p>RootAutomator需要root权限或adb权限才能执行，要使用adb权限可以用<code>shell.setDefaultOptions(\\{adb: true\\})</code>默认使用adb权限，需要shizuku授权。</p><p>另外RootAutomoat兼容性不佳，从9.3版本开始，推荐使用<a href="#rootautomator2">RootAutomator2</a>代替。</p><h3 id="new-rootautomator-options" tabindex="-1"><a class="header-anchor" href="#new-rootautomator-options" aria-hidden="true">#</a> new RootAutomator([options])</h3><ul><li><code>options</code> {object} 可选参数，包括: <ul><li><code>adb</code> {boolean} 是否使用adb权限，默认为false。若为<code>true</code>时，需要用shizuku授权才能使用。</li><li><code>inputDevice</code> {string} 指定RootAutomator操作的设备，比如<code>/dev/input/event4</code>。不指定则自动检测。</li></ul></li></ul><p>构造一个RootAutomator。</p><h3 id="rootautomator-tap-x-y-id" tabindex="-1"><a class="header-anchor" href="#rootautomator-tap-x-y-id" aria-hidden="true">#</a> RootAutomator.tap(x, y[, id])</h3><ul><li><code>x</code> {number} 横坐标</li><li><code>y</code> {number} 纵坐标</li><li><code>id</code> {number} 多点触摸id，可选，默认为1，可以通过setDefaultId指定。</li></ul><p>点击位置(x, y)。其中id是一个整数值，用于区分多点触摸，不同的id表示不同的&quot;手指&quot;，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> ra <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootAutomator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//让&quot;手指1&quot;点击位置(100, 100)</span>
ra<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//让&quot;手指2&quot;点击位置(200, 200);</span>
ra<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ra<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不需要多点触摸，则不需要id这个参数。 多点触摸通常用于手势或游戏操作，例如模拟双指捏合、双指上滑等。</p><p>某些情况下可能存在tap点击无反应的情况，这时可以用<code>RootAutomator.press()</code>函数代替。</p><h3 id="rootautomator-swipe-x1-x2-y1-y2-duration-id" tabindex="-1"><a class="header-anchor" href="#rootautomator-swipe-x1-x2-y1-y2-duration-id" aria-hidden="true">#</a> RootAutomator.swipe(x1, x2, y1, y2[, duration, id])</h3><ul><li><code>x1</code> {number} 滑动起点横坐标</li><li><code>y1</code> {number} 滑动起点纵坐标</li><li><code>x2</code> {number} 滑动终点横坐标</li><li><code>y2</code> {number} 滑动终点纵坐标</li><li><code>duration</code> {number} 滑动时长，单位毫秒，默认值为300</li><li><code>id</code> {number} 多点触摸id，可选，默认为1</li></ul><p>模拟一次从(x1, y1)到(x2, y2)的时间为duration毫秒的滑动。</p><h3 id="rootautomator-press-x-y-duration-id" tabindex="-1"><a class="header-anchor" href="#rootautomator-press-x-y-duration-id" aria-hidden="true">#</a> RootAutomator.press(x, y, duration[, id])</h3><ul><li><code>x</code> {number} 横坐标</li><li><code>y</code> {number} 纵坐标</li><li><code>duration</code> {number} 按下时长</li><li><code>id</code> {number} 多点触摸id，可选，默认为1</li></ul><p>模拟按下位置(x, y)，时长为duration毫秒。</p><h3 id="rootautomator-longpress-x-y-id" tabindex="-1"><a class="header-anchor" href="#rootautomator-longpress-x-y-id" aria-hidden="true">#</a> RootAutomator.longPress(x, y[, id])</h3><ul><li><code>x</code> {number} 横坐标</li><li><code>y</code> {number} 纵坐标</li><li><code>duration</code> {number} 按下时长</li><li><code>id</code> {number} 多点触摸id，可选，默认为1</li></ul><p>模拟长按位置(x, y)。</p><p>以上为简单模拟触摸操作的函数。如果要模拟一些复杂的手势，需要更底层的函数。</p><h3 id="rootautomator-touchdown-x-y-id" tabindex="-1"><a class="header-anchor" href="#rootautomator-touchdown-x-y-id" aria-hidden="true">#</a> RootAutomator.touchDown(x, y[, id])</h3><ul><li><code>x</code> {number} 横坐标</li><li><code>y</code> {number} 纵坐标</li><li><code>id</code> {number} 多点触摸id，可选，默认为1</li></ul><p>模拟手指按下位置(x, y)。</p><h3 id="rootautomator-touchmove-x-y-id" tabindex="-1"><a class="header-anchor" href="#rootautomator-touchmove-x-y-id" aria-hidden="true">#</a> RootAutomator.touchMove(x, y[, id])</h3><ul><li><code>x</code> {number} 横坐标</li><li><code>y</code> {number} 纵坐标</li><li><code>id</code> {number} 多点触摸id，可选，默认为1</li></ul><p>模拟移动手指到位置(x, y)。</p><h3 id="rootautomator-touchup-id" tabindex="-1"><a class="header-anchor" href="#rootautomator-touchup-id" aria-hidden="true">#</a> RootAutomator.touchUp([id])</h3><ul><li><code>id</code> {number} 多点触摸id，可选，默认为1</li></ul><p>模拟手指弹起。</p><h2 id="rootautomator2" tabindex="-1"><a class="header-anchor" href="#rootautomator2" aria-hidden="true">#</a> RootAutomator2</h2><p>RootAutomator2用于基于root或者adb权限，模拟点击、手势、长按等操作。相比起基于无障碍的操作，RootAutomator支持多点触控和动态改变手势；相比RootAutomator，RootAutomator2的兼容性更佳。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> screenWidth <span class="token operator">=</span> $device<span class="token punctuation">.</span>width<span class="token punctuation">;</span>
<span class="token keyword">let</span> screenHeight <span class="token operator">=</span> $device<span class="token punctuation">.</span>height<span class="token punctuation">;</span>

<span class="token comment">// 使用root权限执行。也可以指定为\\{adb: true\\}使用adb权限，需要shizuku授权</span>
<span class="token keyword">const</span> ra <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootAutomator2</span><span class="token punctuation">(</span>\\<span class="token punctuation">{</span> <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span> \\<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 点击(200, 200)的位置</span>
ra<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 按住屏幕中点持续500毫秒</span>
ra<span class="token punctuation">.</span><span class="token function">press</span><span class="token punctuation">(</span>screenWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> screenHeight <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 从(500, 200)滑动到(500, 1000)，滑动时长300毫秒</span>
ra<span class="token punctuation">.</span><span class="token function">swipe</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// 双指捏合</span>
<span class="token comment">// 左上角位置</span>
<span class="token keyword">let</span> p0 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">x</span><span class="token operator">:</span> screenWidth <span class="token operator">/</span> <span class="token number">6</span><span class="token punctuation">,</span>
    <span class="token literal-property property">y</span><span class="token operator">:</span> screenHeight <span class="token operator">/</span> <span class="token number">6</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 右下角位置</span>
<span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">x</span><span class="token operator">:</span> screenWidth <span class="token operator">-</span> p0<span class="token punctuation">.</span>x<span class="token punctuation">,</span>
    <span class="token literal-property property">y</span><span class="token operator">:</span> screenHeight <span class="token operator">-</span> p0<span class="token punctuation">.</span>y<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// 同时按下左上角和右下角，手指id为0和1</span>
ra<span class="token punctuation">.</span><span class="token function">touchDown</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    \\<span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> p0<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> p0<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">0</span> \\<span class="token punctuation">}</span><span class="token punctuation">,</span>
    \\<span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> p1<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> p1<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span> \\<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 移动步数</span>
<span class="token keyword">const</span> steps <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token comment">// 计算每一步移动的偏移量</span>
<span class="token keyword">const</span> stepX <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x <span class="token operator">-</span> p0<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> steps<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> stepY <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>y <span class="token operator">-</span> p0<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">/</span> steps<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> steps<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 手指0向右下移动，手指1向左上移动</span>
    ra<span class="token punctuation">.</span><span class="token function">touchMove</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        \\<span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> p0<span class="token punctuation">.</span>x <span class="token operator">+</span> stepX <span class="token operator">*</span> i<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> p0<span class="token punctuation">.</span>y <span class="token operator">+</span> stepY <span class="token operator">*</span> i<span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">0</span> \\<span class="token punctuation">}</span><span class="token punctuation">,</span>
        \\<span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> p1<span class="token punctuation">.</span>x <span class="token operator">-</span> stepX <span class="token operator">*</span> i<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> p1<span class="token punctuation">.</span>y <span class="token operator">-</span> stepY <span class="token operator">*</span> i<span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span> \\<span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 弹起所有手指</span>
ra<span class="token punctuation">.</span><span class="token function">touchUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 等待前面的操作全部完成</span>
ra<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 退出RootAutomator，如果没有正确退出，可能导致&quot;手指&quot;残留在屏幕上</span>
ra<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="new-rootautomator2-options" tabindex="-1"><a class="header-anchor" href="#new-rootautomator2-options" aria-hidden="true">#</a> new RootAutomator2([<code>options</code>])</h3><ul><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>options
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建RootAutomator2的选项，可选。</p><ul><li><code>adb</code> {boolean} 是否使用adb权限，默认为\`false</li><li><code>root</code> {boolean} 是否使用root权限，当不指定adb权限时，默认为<code>true</code></li></ul></li></ul><p>根据选项创建一个新的RootAutomator2实例。RootAutomator2相比RootAutomator有更好的兼容性。</p><p>可以指定是否使用root权限、adb权限等，参见ShellOptions。如果不指定root或adb权限，则默认使用root权限。</p><h3 id="rootautomator2-tap-x-y" tabindex="-1"><a class="header-anchor" href="#rootautomator2-tap-x-y" aria-hidden="true">#</a> RootAutomator2.tap(<code>x</code>, <code>y</code>)</h3><p>点击位置(x, y)，时长为5毫秒。此函数会等待操作同步完成，可能函数执行时间大于实际操作时间，若对执行时间有要求，可以用<code>touchDown</code>, <code>touchUp</code>等异步方法代替。</p><h4 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>x</code></td><td style="text-align:left;"><code>number</code></td></tr><tr><td style="text-align:left;"><code>y</code></td><td style="text-align:left;"><code>number</code></td></tr></tbody></table><h3 id="rootautomator2-longpress-x-y" tabindex="-1"><a class="header-anchor" href="#rootautomator2-longpress-x-y" aria-hidden="true">#</a> RootAutomator2.longPress(<code>x</code>, <code>y</code>)</h3>`,107),r={href:"https://developer.android.google.cn/reference/android/view/ViewConfiguration.html#getLongPressTimeout()",target:"_blank",rel:"noopener noreferrer"},u=a("code",null,"touchDown",-1),k=a("code",null,"touchUp",-1),h=t('<h4 id="参数-1" tabindex="-1"><a class="header-anchor" href="#参数-1" aria-hidden="true">#</a> 参数</h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>x</code></td><td style="text-align:left;"><code>number</code></td></tr><tr><td style="text-align:left;"><code>y</code></td><td style="text-align:left;"><code>number</code></td></tr></tbody></table><h3 id="rootautomator2-press-x-y-duration" tabindex="-1"><a class="header-anchor" href="#rootautomator2-press-x-y-duration" aria-hidden="true">#</a> RootAutomator2.press(<code>x</code>, <code>y</code>, <code>duration</code>)</h3><p>按下(x, y)位置持续duration时长，然后抬起手指。此函数会等待操作同步完成，可能函数执行时间大于实际操作时间，若对执行时间有要求，可以用<code>touchDown</code>, <code>touchUp</code>等异步方法代替。</p><h4 id="参数-2" tabindex="-1"><a class="header-anchor" href="#参数-2" aria-hidden="true">#</a> 参数</h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>x</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;"><code>y</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;"><code>duration</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">按下时长，单位毫秒</td></tr></tbody></table><h3 id="rootautomator2-swipe-x1-y1-x2-y2-duration" tabindex="-1"><a class="header-anchor" href="#rootautomator2-swipe-x1-y1-x2-y2-duration" aria-hidden="true">#</a> RootAutomator2.swipe(<code>x1</code>, <code>y1</code>, <code>x2</code>, <code>y2</code>, <code>duration</code>)</h3><p>在给定的duration时长从(x1, y1)位置滑动到(x2, y2)位置。此函数会等待操作同步完成，可能函数执行时间大于实际操作时间，若对执行时间有要求，可以用<code>touchDown</code>, <code>touchUp</code>等异步方法代替。</p><h4 id="参数-3" tabindex="-1"><a class="header-anchor" href="#参数-3" aria-hidden="true">#</a> 参数</h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>x1</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;"><code>y1</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;"><code>x2</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;"><code>y2</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;"><code>duration</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">滑动时长，单位毫秒</td></tr></tbody></table><h3 id="rootautomator2-touchdown-x-y-id" tabindex="-1"><a class="header-anchor" href="#rootautomator2-touchdown-x-y-id" aria-hidden="true">#</a> RootAutomator2.touchDown(<code>x</code>, <code>y</code>, [<code>id</code>])</h3><p>按下(x, y)位置。若对应id的手指之前已经是按下状态，则会模拟手指移动(touchMove)事件。此操作是异步进行的，若要等待操作完成，可以使用<code>flush</code>方法。</p><h4 id="参数-4" tabindex="-1"><a class="header-anchor" href="#参数-4" aria-hidden="true">#</a> 参数</h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>x</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;"><code>y</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;"><code>id</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">手指ID，默认为0</td></tr></tbody></table><h3 id="rootautomator2-touchdown-pointers" tabindex="-1"><a class="header-anchor" href="#rootautomator2-touchdown-pointers" aria-hidden="true">#</a> RootAutomator2.touchDown(<code>pointers</code>)</h3><p>模拟一个手指按下事件，使用数组描述触摸的位置和相应的手指id。例如<code>ra.touchDown([\\{x: 100, y: 100, id: 0}, {x: 200, y: 200, id: 1\\}])</code>会使用手指0按下位置(100, 100)，使用手指1按下位置(200, 200)。此操作是异步进行的，若要等待操作完成，可以使用<code>flush</code>方法。</p><h4 id="参数-5" tabindex="-1"><a class="header-anchor" href="#参数-5" aria-hidden="true">#</a> 参数</h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>pointers</code></td><td style="text-align:left;"><code>Array</code></td><td style="text-align:left;">描述每个手指位置的数组，数组的每个元素带有<code>x</code>, <code>y</code>和<code>id</code>三个字段</td></tr></tbody></table><h3 id="rootautomator2-touchmove-x-y-id" tabindex="-1"><a class="header-anchor" href="#rootautomator2-touchmove-x-y-id" aria-hidden="true">#</a> RootAutomator2.touchMove(<code>x</code>, <code>y</code>, [<code>id</code>])</h3><p>将手指移动到(x, y)位置。若对应id的手指之前并非按下状态，则会模拟手指按下(touchDown)事件。此操作是异步进行的，若要等待操作完成，可以使用<code>flush</code>方法。</p><h4 id="参数-6" tabindex="-1"><a class="header-anchor" href="#参数-6" aria-hidden="true">#</a> 参数</h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>x</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;"><code>y</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;"><code>id</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">手指ID，默认为0</td></tr></tbody></table><h3 id="rootautomator2-touchmove-pointers" tabindex="-1"><a class="header-anchor" href="#rootautomator2-touchmove-pointers" aria-hidden="true">#</a> RootAutomator2.touchMove(<code>pointers</code>)</h3><p>模拟一个手指移动事件，使用数组描述触摸的位置和相应的手指id。例如<code>ra.touchMove([\\{x: 100, y: 100, id: 0}, {x: 200, y: 200, id: 1\\}])</code>会将手指0移动到位置(100, 100)，将手指1移动到位置(200, 200)。此操作是异步进行的，若要等待操作完成，可以使用<code>flush</code>方法。</p><h4 id="参数-7" tabindex="-1"><a class="header-anchor" href="#参数-7" aria-hidden="true">#</a> 参数</h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>pointers</code></td><td style="text-align:left;"><code>Array</code></td><td style="text-align:left;">描述每个手指位置的数组，数组的每个元素带有<code>x</code>, <code>y</code>和<code>id</code>三个字段</td></tr></tbody></table><h3 id="rootautomator2-touchup-id" tabindex="-1"><a class="header-anchor" href="#rootautomator2-touchup-id" aria-hidden="true">#</a> RootAutomator2.touchUp([<code>id</code>])</h3><p>抬起手指。</p><h4 id="参数-8" tabindex="-1"><a class="header-anchor" href="#参数-8" aria-hidden="true">#</a> 参数</h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>id</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">手指ID，若不指定则抬起所有手指</td></tr></tbody></table><h3 id="rootautomator2-touchup-pointers" tabindex="-1"><a class="header-anchor" href="#rootautomator2-touchup-pointers" aria-hidden="true">#</a> RootAutomator2.touchUp(<code>pointers</code>)</h3><p>模拟一个手指抬起事件，使用数组描述触摸的位置和相应的手指id。例如<code>ra.touchUp([\\{x: 100, y: 100, id: 0}, {x: 200, y: 200, id: 1\\}])</code>会使用手指0和手指1抬起，其中的坐标位置为手指抬起时的位置。此操作是异步进行的，若要等待操作完成，可以使用<code>flush</code>方法。</p><h4 id="参数-9" tabindex="-1"><a class="header-anchor" href="#参数-9" aria-hidden="true">#</a> 参数</h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>pointers</code></td><td style="text-align:left;"><code>Array</code></td><td style="text-align:left;">描述每个手指位置的数组，数组的每个元素带有<code>x</code>, <code>y</code>和<code>id</code>三个字段</td></tr></tbody></table><h3 id="rootautomator2-flush" tabindex="-1"><a class="header-anchor" href="#rootautomator2-flush" aria-hidden="true">#</a> RootAutomator2.flush()</h3><p>等待所有操作完成。例如我们使用<code>tocuhDown</code>, <code>touchMove</code>, <code>touchUp</code>完成了一系列手势，需要等待这些手势完成后继续下一步时，使用<code>ra.flush()</code>来等待这些操作完成。</p><h3 id="rootautomator2-exit-forced" tabindex="-1"><a class="header-anchor" href="#rootautomator2-exit-forced" aria-hidden="true">#</a> RootAutomator2.exit([<code>forced</code>])</h3><p>退出RootAutomator2。</p><h4 id="参数-10" tabindex="-1"><a class="header-anchor" href="#参数-10" aria-hidden="true">#</a> 参数</h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>forced</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">可选。如果为true，将不等待未完成的操作，而是尽可能快地退出；如果为false，在会所有未完成的操作结束后退出进程。</td></tr></tbody></table>',40);function m(b,y){const s=o("ExternalLinkIcon");return p(),c("div",null,[d,a("p",null,[n("长按(x, y)位置。长按的时长为"),a("a",r,[n("ViewConfiguration.getLongPressTimeout()"),l(s)]),n("+100毫秒。此函数会等待操作同步完成，可能函数执行时间大于实际操作时间，若对执行时间有要求，可以用"),u,n(", "),k,n("等异步方法代替。")]),h])}const f=e(i,[["render",m],["__file","coordinatesBasedAutomation.html.vue"]]);export{f as default};
