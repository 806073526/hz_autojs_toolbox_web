import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as c,c as d,d as a,b as e,w as s,e as n,f as p}from"./app-ff93bfbc.js";const i={},r=a("h2",{id:"目录",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),n(" 目录")],-1),u=a("h3",{id:"函数",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#函数","aria-hidden":"true"},"#"),n(" 函数")],-1),h=p(`<h2 id="函数-1" tabindex="-1"><a class="header-anchor" href="#函数-1" aria-hidden="true">#</a> 函数</h2><h3 id="load" tabindex="-1"><a class="header-anchor" href="#load" aria-hidden="true">#</a> load</h3><p>▸ <strong>load</strong>(<code>packageName</code>): <code>Promise</code>&lt;<code>any</code>&gt;</p><p>加载一个插件，并返回插件模块中module.exports导出的对象。</p><p>如果插件未安装或不存在，则抛出PluginLoadException异常。</p><p><strong><code>示例</code></strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> plugins <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;plugins&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> ffmpeg <span class="token operator">=</span> <span class="token keyword">await</span> plugins<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;org.autojs.plugin.ffmpeg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ffmpeg<span class="token punctuation">.</span>inProcess<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;-i /path/to/mp4.mp4 /path/to/mp3.mp3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>packageName</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">插件包名</td></tr></tbody></table><h4 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值" aria-hidden="true">#</a> 返回值</h4><p><code>Promise</code>&lt;<code>any</code>&gt;</p><p>插件导出对象</p><hr><h3 id="unload" tabindex="-1"><a class="header-anchor" href="#unload" aria-hidden="true">#</a> unload</h3><p>▸ <strong>unload</strong>(<code>packageName</code>): <code>Promise</code>&lt;<code>boolean</code>&gt;</p><p>卸载插件。卸载后继续使用之前的插件导出对象将导致未定义行为。</p><h4 id="参数-1" tabindex="-1"><a class="header-anchor" href="#参数-1" aria-hidden="true">#</a> 参数</h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>packageName</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">插件包名</td></tr></tbody></table><h4 id="返回值-1" tabindex="-1"><a class="header-anchor" href="#返回值-1" aria-hidden="true">#</a> 返回值</h4><p><code>Promise</code>&lt;<code>boolean</code>&gt;</p><p>是否成功卸载插件</p><hr><h3 id="unloadall" tabindex="-1"><a class="header-anchor" href="#unloadall" aria-hidden="true">#</a> unloadAll</h3><p>▸ <strong>unloadAll</strong>(): <code>Promise</code>&lt;<code>void</code>&gt;</p><p>卸载所有插件。卸载后继续使用之前的插件导出对象将导致未定义行为。</p><h4 id="返回值-2" tabindex="-1"><a class="header-anchor" href="#返回值-2" aria-hidden="true">#</a> 返回值</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p>`,27);function g(k,f){const t=l("RouterLink");return c(),d("div",null,[r,u,a("ul",null,[a("li",null,[e(t,{to:"/v9/generated/modules/plugins.html#load"},{default:s(()=>[n("load")]),_:1})]),a("li",null,[e(t,{to:"/v9/generated/modules/plugins.html#unload"},{default:s(()=>[n("unload")]),_:1})]),a("li",null,[e(t,{to:"/v9/generated/modules/plugins.html#unloadall"},{default:s(()=>[n("unloadAll")]),_:1})])]),h])}const b=o(i,[["render",g],["__file","plugins.html.vue"]]);export{b as default};
