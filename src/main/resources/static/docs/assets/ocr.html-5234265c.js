import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as u,d as s,e as n,b as a,w as e,f as o}from"./app-ff93bfbc.js";const r={},d=s("blockquote",null,[s("p",null,"Pro 9.2版本新增")],-1),k=s("p",null,"$ocr模块即光学文字识别，用于识别图片中的文字。该内置模块基于PaddleOCR实现，需要先在Auto.js Pro的插件商店中下载官方PaddleOCR插件才能使用。打包时插件可一并打包到apk中，无需单独安装插件。",-1),m=s("h1",{id:"插件下载",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#插件下载","aria-hidden":"true"},"#"),n(" 插件下载")],-1),v=s("br",null,null,-1),h={href:"https://wwwq.lanzouc.com/iFRks168m1aj",target:"_blank",rel:"noopener noreferrer"},b=s("p",null,"提示",-1),f=o(`<h2 id="ocr-create-options" tabindex="-1"><a class="header-anchor" href="#ocr-create-options" aria-hidden="true">#</a> $ocr.create([options])</h2><ul><li><p>options {object} 可选参数，选项option包括以下内容:</p><ul><li><p><code>models</code> {string} 模型，<code>slim</code>指定精度相对低但速度更快的模型，若不指定则为<code>default</code>模型，精度高一点但速度慢一点。也可直接指定自定义模型的绝对路径。</p></li><li><p><code>labelsFile</code> {string} 模型的标签文件，默认为<code>null</code>，需要配合<code>models</code>字段使用。</p></li><li><p><code>cpuPowerMode</code> {string} CPU模式，默认为</p><ul><li><p><code>LITE_POWER_HIGH</code>，可选值有：</p></li><li><p><code>LITE_POWER_HIGH</code> 绑定大核运行模式。如果 ARM CPU 支持 big.LITTLE，则优先使用并绑定 Big cluster，如果设置的线程数大于大核数量，则会将线程数自动缩放到大核数量。如果系统不存在大核或者在一些手机的低电量情况下会出现绑核失败，如果失败则进入不绑核模式。</p></li><li><p><code>LITE_POWER_LOW</code> 绑定小核运行模式。如果 ARM CPU 支持 big.LITTLE，则优先使用并绑定 Little cluster，如果设置的线程数大于小核数量，则会将线程数自动缩放到小核数量。如果找不到小核，则自动进入不绑核模式。</p></li><li><p><code>LITE_POWER_FULL</code> 大小核混用模式。线程数可以大于大核数量，当线程数大于核心数量时，则会自动将线程数缩放到核心数量。</p></li><li><p><code>LITE_POWER_NO_BIND</code> 不绑核运行模式（推荐）。系统根据负载自动调度任务到空闲的 CPU 核心上。</p></li><li><p><code>LITE_POWER_RAND_HIGH</code> 轮流绑定大核模式。如果 Big cluster 有多个核心，则每预测10次后切换绑定到下一个核心。</p></li><li><p><code>LITE_POWER_RAND_LOW</code> 轮流绑定小核模式。如果 Little cluster 有多个核心，则每预测10次后切换绑定到下一个核心。</p></li></ul></li><li><p><code>parallelThreads</code> {number} 并行线程数，默认为<code>4</code></p></li><li><p><code>useOpenCL</code> {boolean} 是否使用OpenCL，默认为<code>false</code></p></li></ul></li><li><p>返回 {<a href="#OCR">OCR</a>} 返回新的OCR对象</p></li></ul><p>根据给定选项，创建OCR对象，可用于文字识别。一般而已不必自定义参数，使用<code>$ocr.create()</code>即可创建有效的OCR对象。</p><p>一个简单的截图并识别文字例子如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建OCR对象，需要先在Auto.js Pro的插件商店中下载官方PaddleOCR插件。</span>
<span class="token keyword">let</span> ocr <span class="token operator">=</span> $ocr<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">models</span><span class="token operator">:</span> <span class="token string">&#39;slim&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 指定精度相对低但速度更快的模型，若不指定则为default模型，精度高一点但速度慢一点</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> capture <span class="token operator">=</span> <span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 检测截图文字并计算检测时间，首次检测的耗时比较长</span>
    <span class="token comment">// 检测时间取决于图片大小、内容、文字数量</span>
    <span class="token comment">// 可通过调整$ocr.create()的线程、CPU模式等参数调整检测效率</span>
    <span class="token keyword">let</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> ocr<span class="token punctuation">.</span><span class="token function">detect</span><span class="token punctuation">(</span>capture<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> end <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">toastLog</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">第$\\{i + 1}次检测: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>end <span class="token operator">-</span> start\\<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ocr<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),g={href:"https://paddle-lite.readthedocs.io/zh/latest/api_reference/java_api_doc.html",target:"_blank",rel:"noopener noreferrer"},R=o(`<h1 id="ocr" tabindex="-1"><a class="header-anchor" href="#ocr" aria-hidden="true">#</a> OCR</h1><p><code>$ocr.create()</code>返回的对象，用于具体的文字识别。该对象不再需要时，需要调用<code>release()</code>函数释放资源。</p><h2 id="ocr-detect-image-options" tabindex="-1"><a class="header-anchor" href="#ocr-detect-image-options" aria-hidden="true">#</a> OCR.detect(image[, options])</h2><ul><li><code>image</code> {Image} 图片，要识别文字的图片。</li><li>options {object} 可选参数，选项options包括以下内容： <ul><li><code>max</code> {number} 识别文本的数量上限，默认为<code>1000</code></li><li><code>detectRotation</code> {boolean} 是否检测文字旋转，默认为<code>false</code></li><li><code>region</code> {Array} OCR识别区域。是一个两个或四个元素的数组。(region[0], region[1])表示区域的左上角；region[2]*region[3]表示区域的宽高。如果只有region只有两个元素，则区域为(region[0], region[1])到图片右下角。如果不指定region选项，则识别区域为整张图片。<strong>此选项为9.3版本新增。</strong></li></ul></li><li>返回 {Array&lt;<a href="#OCRResult">OCRResult</a>&gt;} 文字识别结果的数组，包括可信度、文本内容、文本范围等</li></ul><p>对给定图片根据给定选项进行文字识别，将文字识别的结果作为数组返回。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> ocr <span class="token operator">=</span> $ocr<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> capture <span class="token operator">=</span> <span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> ocr<span class="token punctuation">.</span><span class="token function">detect</span><span class="token punctuation">(</span>capture<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 遍历结果，打印其文本</span>
result<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>text<span class="token punctuation">,</span> item<span class="token punctuation">.</span>confidence<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 过滤可信度0.9以上的文本</span>
<span class="token keyword">let</span> filtered <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>confidence <span class="token operator">&gt;</span> <span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 模糊搜索文字内容为&quot;Auto.js&quot;的文本结果</span>
<span class="token keyword">let</span> autojs <span class="token operator">=</span> filtered<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;编辑&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>autojs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 若搜索到则打印其可信度、范围和中点位置并点击</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>autojs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">confidence = $\\{autojs.confidence}, bounds = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>autojs<span class="token punctuation">.</span>bounds<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, center = (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>autojs<span class="token punctuation">.</span>bounds<span class="token punctuation">.</span><span class="token function">centerX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>autojs<span class="token punctuation">.</span>bounds<span class="token punctuation">.</span><span class="token function">centerY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\\<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    autojs<span class="token punctuation">.</span><span class="token function">clickCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ocr<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ocr-release" tabindex="-1"><a class="header-anchor" href="#ocr-release" aria-hidden="true">#</a> OCR.release()</h2><p>释放OCR资源，默认会在程序退出时自动释放，但请在不使用OCR及时释放以释放资源。</p><h1 id="ocrresult" tabindex="-1"><a class="header-anchor" href="#ocrresult" aria-hidden="true">#</a> OCRResult</h1><p><code>$ocr.detect()</code>返回的数组的元素对象，包含了文字识别的可信度、文本内容、文本范围、文本旋转度以及文本旋转度的可信度等。</p><h2 id="ocrresult-confidence" tabindex="-1"><a class="header-anchor" href="#ocrresult-confidence" aria-hidden="true">#</a> OCRResult.confidence</h2><ul><li>{number}</li></ul><p>OCR文字的可信度，范围为[0, 1]，越接近1表示结果越准确、可信。</p><h2 id="ocrresult-text" tabindex="-1"><a class="header-anchor" href="#ocrresult-text" aria-hidden="true">#</a> OCRResult.text</h2><ul><li>{string}</li></ul><p>OCR识别的文字内容。</p><h2 id="ocrresult-bounds" tabindex="-1"><a class="header-anchor" href="#ocrresult-bounds" aria-hidden="true">#</a> OCRResult.bounds</h2>`,17),_=o('<p>该识别文字在图片中的范围。</p><h2 id="ocrresult-rotation" tabindex="-1"><a class="header-anchor" href="#ocrresult-rotation" aria-hidden="true">#</a> OCRResult.rotation</h2><ul><li>{number}</li></ul><p>该识别文字在图片中的旋转角度，范围为[0, 360)，一般取值为0和180度。该字段仅在detect时指定<code>detectRotation</code>为<code>true</code>时有效。</p><h2 id="ocrresult-rotationconfidence" tabindex="-1"><a class="header-anchor" href="#ocrresult-rotationconfidence" aria-hidden="true">#</a> OCRResult.rotationConfidence</h2><ul><li>{number}</li></ul><p>该识别文字的旋转角度可信度，范围为[0, 1]。该字段仅在detect时指定<code>detectRotation</code>为<code>true</code>时有效。</p><h2 id="ocrresult-javaobject" tabindex="-1"><a class="header-anchor" href="#ocrresult-javaobject" aria-hidden="true">#</a> OCRResult.javaObject</h2><ul><li>{object}</li></ul><p>OCR识别结果的原始Java对象。在官方PaddleOCR中没有什么用，在其他官方OCR中可能可以获取附加的额外信息，比如行、字段落、词语分割。</p><h2 id="ocrresult-clickcenter" tabindex="-1"><a class="header-anchor" href="#ocrresult-clickcenter" aria-hidden="true">#</a> OCRResult.clickCenter()</h2><ul><li>返回 {boolean}</li></ul><p>在屏幕上点击OCR结果在图片中范围的中点位置，返回是否点击成功。实际上相当于<code>click(result.bounds.centerX(), result.bounds.centerY())</code>。</p>',13);function C(O,j){const t=c("RouterLink"),p=c("ExternalLinkIcon");return i(),u("div",null,[d,k,s("p",null,[n("另外，官方提供了另一个基于谷歌MLKit的OCR插件，参见"),a(t,{to:"/blog/mlkit-ocr-plugin.html"},{default:e(()=>[n("官方MLKitOCR插件")]),_:1}),n("。")]),m,s("p",null,[n("蓝奏云下载："),v,s("a",h,[n("https://wwwq.lanzouc.com/iFRks168m1aj"),a(p)])]),b,s("p",null,[n("特别感谢Auto.js爱好者L(QQ: 2056968162，"),a(t,{to:"/blog/7zip-plugin.html"},{default:e(()=>[n("7Zip插件作者")]),_:1}),n(")提供的初始对接代码，并在后续提供了一些Bug修复和优化的帮助，大大节省了开发时间❤️。")]),f,s("p",null,[n("有关资料参见"),s("a",g,[n("PaddleOCR文档"),a(p)]),n("。")]),R,s("ul",null,[s("li",null,[n("{"),a(t,{to:"/v8/widgetsBasedAutomation.html#rect-left"},{default:e(()=>[n("Rect")]),_:1}),n("}")])]),_])}const w=l(r,[["render",C],["__file","ocr.html.vue"]]);export{w as default};
