import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as p,c as i,d as n,e as s,b as t,f as a}from"./app-ff93bfbc.js";const l={},u=a(`<p>util模块是对齐早期Node.js的util模块而实现的，另外为方便Java交互而增加了<code>$util.java</code>对象。</p><h2 id="util-java" tabindex="-1"><a class="header-anchor" href="#util-java" aria-hidden="true">#</a> $util.java</h2><p>提供Java交互的辅助工具。</p><h3 id="util-java-instanceof-obj-clazz" tabindex="-1"><a class="header-anchor" href="#util-java-instanceof-obj-clazz" aria-hidden="true">#</a> $util.java.instanceOf(obj, clazz)</h3><ul><li><code>obj</code> {any} Java对象</li><li><code>clazz</code> {string} 类名</li><li>返回 {boolean}</li></ul><p>判断一个对象是否属于某个指定的类的实例，如果是，返回<code>true</code>，否则返回<code>false</code>。</p><h3 id="util-java-array-type-size" tabindex="-1"><a class="header-anchor" href="#util-java-array-type-size" aria-hidden="true">#</a> $util.java.array(type, size)</h3><ul><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>type
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>{string} 数组类型，可以是一个Java类名，或者是以下初始类型的名称：</p><ul><li><code>&quot;int&quot;</code></li><li><code>&quot;long&quot;</code></li><li><code>&quot;double&quot;</code></li><li><code>&quot;char&quot;</code></li><li><code>&quot;byte&quot;</code></li><li><code>&quot;float&quot;</code></li></ul></li><li><p><code>size</code> {number} 数组大小</p></li><li><p>返回 {Java数组}</p></li></ul><p>创建一个Java数组并返回。例如创建二进制byte数组<code>let bytes = $util.java.array(&#39;byte&#39;, 1024)</code>。</p><h3 id="util-java-tojsarray-list-nulllisttoemptyarray" tabindex="-1"><a class="header-anchor" href="#util-java-tojsarray-list-nulllisttoemptyarray" aria-hidden="true">#</a> $util.java.toJsArray(list, nullListToEmptyArray)</h3><ul><li><code>list</code> {List} <code>java.util.List</code>列表对象</li><li><code>nullListToEmptyArray</code> {boolean} null列表对象是否转化为空数组</li><li>返回 {Array}</li></ul><p>将Java列表转换为javascript数组。</p><h3 id="util-java-objecttomap-obj" tabindex="-1"><a class="header-anchor" href="#util-java-objecttomap-obj" aria-hidden="true">#</a> $util.java.objectToMap(obj)</h3><ul><li><code>obj</code> {any} 对象</li><li>返回 {java.util.Map}</li></ul><p>将JavaScript object对象转换成<code>java.util.Map</code>。</p><h3 id="util-java-maptoobject" tabindex="-1"><a class="header-anchor" href="#util-java-maptoobject" aria-hidden="true">#</a> $util.java.mapToObject</h3><ul><li><code>map</code> {Map} Java Map对象</li><li>返回 {obj}</li></ul><p>将<code>java.util.Map</code>的java对象转换成JavaScript object对象。</p><h2 id="util-format-format-args" tabindex="-1"><a class="header-anchor" href="#util-format-format-args" aria-hidden="true">#</a> $util.format(format[, ...args])</h2><ul><li><code>format</code> {string} 类似<code>printf</code>的格式字符串。</li></ul><p><code>$util.format()</code> 方法使用第一个参数返回一个格式化的字符串作为类似<code>printf</code>的格式。</p><p>第一个参数是一个包含零个或多个 <em>placeholder</em> 标记的字符串。 每个占位符标记都替换为从对应的论据。 支持的占位符有：</p><ul><li><code>%s</code> - 字符串。</li><li><code>%d</code> - 数字（整数或浮点值）。</li><li><code>%i</code> - 整数。</li><li><code>%f</code> - 浮点值。</li><li><code>%j</code> - JSON。 如果参数被替换为字符串 <code>&#39;[Circular]&#39;</code>包含循环引用。</li><li><code>%o</code> - 对象。 对象的字符串表示： 使用通用的 JavaScript 对象格式。 类似于 <code>$util.inspect()</code>，带有选项 <code>\\{ showHidden: true, depth: 4, showProxy: true \\}</code>。 这将显示完整的对象，包括不可枚举的符号和属性。</li><li><code>%O</code> - 对象。 具有通用 JavaScript 对象格式的对象的字符串表示形式。 类似于 <code>$util.inspect()</code> 没有选项。 这将显示不包括不可枚举符号和属性的完整对象。</li><li><code>%%</code> - 单个百分号（<code>&#39;%&#39;</code>）。 这不会消耗一个论点。</li></ul><p>如果占位符没有对应的参数，则占位符为没有被替换。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$util<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;%s:%s&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: &#39;foo:%s&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果传递给 <code>$util.format()</code> 方法的参数多于占位符的数量，则额外的参数将被强制转换为字符串，然后连接到返回的字符串，每个字符串由空格分隔。 <code>typeof</code> 为 <code>&#39;object&#39;</code> 或 <code>&#39;symbol&#39;</code> 的过多参数（<code>null</code> 除外）将由 <code>$util.inspect()</code> 转换。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$util<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;%s:%s&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;foo:bar baz&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果第一个参数不是字符串，则 <code>$util.format()</code> 返回一个字符串，该字符串是由空格分隔的所有参数的串联。 使用 $util.inspect() 将每个参数转换为字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$util<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;1 2 3&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果只有一个参数被传递给 $util.format() ，它会按原样返回，没有任何格式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$util<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;%% %s&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;%% %s&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="util-inspect-object-options" tabindex="-1"><a class="header-anchor" href="#util-inspect-object-options" aria-hidden="true">#</a> $util.inspect(object[, options])</h2>`,32),d=a(`<li><p><code>object</code> {any} 任何 JavaScript 原语或对象。</p></li><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>选项
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>{对象}</p><ul><li><code>showHidden</code> {boolean} 如果为 <code>true</code>，则 <code>object</code> 的不可枚举符号和属性将包含在格式化结果中。 默认为<code>false</code>。</li><li><code>depth</code> {number} 指定格式化<code>object</code>时递归的次数。 这对于检查大型复杂对象很有用。默认为<code>2</code>。 为了让它无限期地递归，传递<code>null</code>。</li></ul></li>`,2),r=n("code",null,"colors",-1),k=n("code",null,"true",-1),v=n("code",null,"false",-1),m={href:"https://pro.autojs.org/docs/zh/v8/util.html#util_customizing_util_inspect_colors",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"$util.inspect",-1),f=n("li",null,[n("p",null,[n("code",null,"customInspect"),s(" {boolean} 如果为 "),n("code",null,"false"),s("，则不会调用在被检查的"),n("code",null,"object"),s("上导出的自定义"),n("code",null,"inspect(depth, opts)"),s("函数。默认为"),n("code",null,"true"),s("。")])],-1),h=a(`<p><code>$util.inspect()</code> 方法返回 <code>object</code> 的字符串表示形式，主要用于调试。 可以传递额外的 <code>options</code>来改变格式化字符串的某些方面。</p><p>以下示例检查 <code>$util</code> 对象的所有属性：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span>$util<span class="token punctuation">,</span> \\<span class="token punctuation">{</span> <span class="token literal-property property">showHidden</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">depth</span><span class="token operator">:</span> <span class="token keyword">null</span> \\<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>值可以提供它们自己的自定义<code>inspect(depth, opts)</code>函数，当调用这些函数时，它们会在递归检查中接收当前的 <code>depth</code> ，以及传递给<code>$util.inspect()</code>的选项对象。</p><h2 id="util-extend-target-source" tabindex="-1"><a class="header-anchor" href="#util-extend-target-source" aria-hidden="true">#</a> $util.extend(target, source)</h2><ul><li><code>target</code> {object} 目标构造函数</li><li><code>source</code> {object} 要继承的构造函数</li></ul><p>将原型方法从一个构造函数继承到另一个构造函数。类似于Node.js中的<code>util.inherits</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">SuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">SuperClass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

$util<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>ChildClass<span class="token punctuation">,</span> SuperClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">ChildClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">SuperClass</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">ChildClass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">print</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">let</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChildClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
child<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
child<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="util-isarray-object" tabindex="-1"><a class="header-anchor" href="#util-isarray-object" aria-hidden="true">#</a> $util.isArray(object)</h2><blockquote><p>稳定性：0 - 已弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul>`,11),j={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"Array.isArray",-1),y=a(`<p>如果给定的 <code>object</code> 是 <code>Array</code>，则返回 <code>true</code>。 否则，返回 <code>false</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$util<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
$util<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
$util<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>\\<span class="token punctuation">{</span>\\<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="util-isboolean-object" tabindex="-1"><a class="header-anchor" href="#util-isboolean-object" aria-hidden="true">#</a> $util.isBoolean(object)</h2><blockquote><p>稳定性：0 - 已弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul><p>如果给定的 <code>object</code> 是 <code>Boolean</code>，则返回 <code>true</code>。 否则，返回 <code>false</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$util<span class="token punctuation">.</span><span class="token function">isBoolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
$util<span class="token punctuation">.</span><span class="token function">isBoolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
$util<span class="token punctuation">.</span><span class="token function">isBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="util-isdate-object" tabindex="-1"><a class="header-anchor" href="#util-isdate-object" aria-hidden="true">#</a> $util.isDate(object)</h2><blockquote><p>稳定性：0 - 已弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul><p>如果给定的 <code>object</code> 是 <code>Date</code>，则返回 <code>true</code>。 否则，返回 <code>false</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$util<span class="token punctuation">.</span><span class="token function">isDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
$util<span class="token punctuation">.</span><span class="token function">isDate</span><span class="token punctuation">(</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// false (without &#39;new&#39; returns a String)</span>
$util<span class="token punctuation">.</span><span class="token function">isDate</span><span class="token punctuation">(</span>\\<span class="token punctuation">{</span>\\<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="util-iserror-object" tabindex="-1"><a class="header-anchor" href="#util-iserror-object" aria-hidden="true">#</a> $util.isError(object)</h2><blockquote><p>稳定性：0 - 已弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul>`,15),$=n("code",null,"object",-1),x={href:"https://pro.autojs.org/docs/zh/v8/errors.html#errors_class_error",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"Error",-1),R=n("code",null,"true",-1),w=n("code",null,"false",-1),q=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$util<span class="token punctuation">.</span><span class="token function">isError</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
$util<span class="token punctuation">.</span><span class="token function">isError</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
$util<span class="token punctuation">.</span><span class="token function">isError</span><span class="token punctuation">(</span>\\<span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Error&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;an error occurred&#39;</span> \\<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，此方法依赖于 <code>Object.prototype.toString()</code> 行为。 当 <code>object</code> 参数操作 <code>@@toStringTag</code> 时，可能会获得不正确的结果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> \\<span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Error&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;an error occurred&#39;</span> \\<span class="token punctuation">}</span><span class="token punctuation">;</span>

$util<span class="token punctuation">.</span><span class="token function">isError</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
obj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Error&#39;</span><span class="token punctuation">;</span>
$util<span class="token punctuation">.</span><span class="token function">isError</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="util-isfunction-object" tabindex="-1"><a class="header-anchor" href="#util-isfunction-object" aria-hidden="true">#</a> $util.isFunction(object)</h2><blockquote><p>稳定性：0 - 已弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul><p>如果给定的 <code>object</code> 是 <code>Function</code>，则返回 <code>true</code>。 否则，返回 <code>false</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \\<span class="token punctuation">{</span>\\<span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token function-variable function">Bar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> \\<span class="token punctuation">{</span>\\<span class="token punctuation">}</span><span class="token punctuation">;</span>

$util<span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>\\<span class="token punctuation">{</span>\\<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
$util<span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
$util<span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>Bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="util-isnull-object" tabindex="-1"><a class="header-anchor" href="#util-isnull-object" aria-hidden="true">#</a> $util.isNull(object)</h2><blockquote><p>稳定性：0 - 已弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul><p>如果给定的 <code>object</code> 严格为 <code>null</code>，则返回 <code>true</code>。 否则，返回 <code>false</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$util<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
$util<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
$util<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="util-isnullorundefined-object" tabindex="-1"><a class="header-anchor" href="#util-isnullorundefined-object" aria-hidden="true">#</a> $util.isNullOrUndefined(object)</h2><blockquote><p>稳定性：0 - 已弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul><p>如果给定的 <code>object</code> 是 <code>null</code> 或 <code>undefined</code>，则返回 <code>true</code>。 否则， 返回 <code>false</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$util<span class="token punctuation">.</span><span class="token function">isNullOrUndefined</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
$util<span class="token punctuation">.</span><span class="token function">isNullOrUndefined</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
$util<span class="token punctuation">.</span><span class="token function">isNullOrUndefined</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="util-isnumber-object" tabindex="-1"><a class="header-anchor" href="#util-isnumber-object" aria-hidden="true">#</a> $util.isNumber(object)</h2><blockquote><p>稳定性：0 - 已弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul><p>如果给定的 <code>object</code> 是 <code>Number</code>，则返回 <code>true</code>。 否则，返回 <code>false</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$util<span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
$util<span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
$util<span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
$util<span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="util-isobject-object" tabindex="-1"><a class="header-anchor" href="#util-isobject-object" aria-hidden="true">#</a> $util.isObject(object)</h2><blockquote><p>稳定性：0 - 已弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul><p>如果给定的 <code>object</code> 严格来说是 <code>Object</code> <strong>并且</strong> 不是 <code>Function</code>，则返回 <code>true</code>。 否则，返回 <code>false</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$util<span class="token punctuation">.</span><span class="token function">isObject</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
$util<span class="token punctuation">.</span><span class="token function">isObject</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
$util<span class="token punctuation">.</span><span class="token function">isObject</span><span class="token punctuation">(</span>\\<span class="token punctuation">{</span>\\<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
$util<span class="token punctuation">.</span><span class="token function">isObject</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \\<span class="token punctuation">{</span>\\<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="util-isprimitive-object" tabindex="-1"><a class="header-anchor" href="#util-isprimitive-object" aria-hidden="true">#</a> $util.isPrimitive(object)</h2><blockquote><p>稳定性：0 - 已弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul><p>如果给定的 <code>object</code> 是原始类型，则返回 <code>true</code>。 否则，返回 <code>false</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
$util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
$util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
$util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
$util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
$util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span>\\<span class="token punctuation">{</span>\\<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
$util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \\<span class="token punctuation">{</span>\\<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
$util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
$util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="util-isregexp-object" tabindex="-1"><a class="header-anchor" href="#util-isregexp-object" aria-hidden="true">#</a> $util.isRegExp(object)</h2><blockquote><p>稳定性：0 - 已弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul><p>如果给定的 <code>object</code> 是 <code>RegExp</code>，则返回 <code>true</code>。 否则，返回 <code>false</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$util<span class="token punctuation">.</span><span class="token function">isRegExp</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">some regexp</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
$util<span class="token punctuation">.</span><span class="token function">isRegExp</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;another regexp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
$util<span class="token punctuation">.</span><span class="token function">isRegExp</span><span class="token punctuation">(</span>\\<span class="token punctuation">{</span>\\<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="util-isstring-object" tabindex="-1"><a class="header-anchor" href="#util-isstring-object" aria-hidden="true">#</a> $util.isString(object)</h2><blockquote><p>稳定性：0 - 已弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul><p>如果给定的 <code>object</code> 是 <code>string</code>，则返回 <code>true</code>。 否则，返回 <code>false</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$util<span class="token punctuation">.</span><span class="token function">isString</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
$util<span class="token punctuation">.</span><span class="token function">isString</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
$util<span class="token punctuation">.</span><span class="token function">isString</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
$util<span class="token punctuation">.</span><span class="token function">isString</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="util-isundefined-object" tabindex="-1"><a class="header-anchor" href="#util-isundefined-object" aria-hidden="true">#</a> $util.isUndefined(object)</h2><blockquote><p>稳定性：0 - 已弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul><p>如果给定的 <code>object</code> 是 <code>undefined</code>，则返回 <code>true</code>。 否则，返回 <code>false</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
$util<span class="token punctuation">.</span><span class="token function">isUndefined</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
$util<span class="token punctuation">.</span><span class="token function">isUndefined</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
$util<span class="token punctuation">.</span><span class="token function">isUndefined</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,48);function S(N,E){const e=c("ExternalLinkIcon");return p(),i("div",null,[u,n("ul",null,[d,n("li",null,[n("p",null,[r,s(" {boolean} 如果为 "),k,s("，输出将使用 ANSI 颜色样式代码。 默认为"),v,s("。 颜色是可自定义的，请参阅 "),n("a",m,[s("Customizing "),b,s(" colors"),t(e)]),s("。")])]),f]),h,n("p",null,[n("a",j,[g,t(e)]),s(" 的内部别名。")]),y,n("p",null,[s("如果给定的 "),$,s(" 是 "),n("a",x,[_,t(e)]),s("，则返回 "),R,s("。 否则，返回"),w,s("。")]),q])}const O=o(l,[["render",S],["__file","util.html.vue"]]);export{O as default};
