import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as i,d as n,b as t,w as e,e as a,f as o}from"./app-ff93bfbc.js";const d={},u=n("p",null,[a("lang提供语言相关的API，比如"),n("code",null,"delay"),a("(延时)。")],-1),r=n("h2",{id:"目录",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),a(" 目录")],-1),k=n("h3",{id:"类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#类","aria-hidden":"true"},"#"),a(" 类")],-1),h=n("h3",{id:"接口",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#接口","aria-hidden":"true"},"#"),a(" 接口")],-1),m=n("h3",{id:"函数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#函数","aria-hidden":"true"},"#"),a(" 函数")],-1),v=o(`<h2 id="函数-1" tabindex="-1"><a class="header-anchor" href="#函数-1" aria-hidden="true">#</a> 函数</h2><h3 id="delay" tabindex="-1"><a class="header-anchor" href="#delay" aria-hidden="true">#</a> delay</h3><p>▸ <strong>delay</strong>(<code>timeout</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p><p>返回一个Promise，将在timeout时间后resolve。例如<code>await delay(1000)</code>会在1秒后执行。不同于Pro 8的<code>sleep()</code>，此函数并不会真正阻塞线程/事件循环。</p><p><strong><code>示例</code></strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> delay <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;lang&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>timeout</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">超时时间，若小于或等于0，则此函数返回一个立即resolve的Promise。</td></tr></tbody></table><h4 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值" aria-hidden="true">#</a> 返回值</h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><hr><h3 id="lazy" tabindex="-1"><a class="header-anchor" href="#lazy" aria-hidden="true">#</a> lazy</h3><p>▸ <strong>lazy</strong>(<code>target</code>, <code>name</code>, <code>__namedParameters?</code>): <code>any</code></p><p>TypeScript装饰器，在JavaScript中无法使用。</p><p>用于装饰类的getter属性，装饰后的属性在第一个调用时会被自动执行并保存值，以后调用时会使用之前保存的值。</p><p><strong><code>示例</code></strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> lazy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;lang&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">Sum</span> <span class="token punctuation">{</span>
   <span class="token keyword">private</span> n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

   <span class="token function">constructor</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token decorator"><span class="token at operator">@</span><span class="token function">lazy</span></span>
   <span class="token keyword">get</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;calculating sum...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          result <span class="token operator">+=</span> i<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">return</span> result<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// calculating sum...55</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 55</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="参数-1" tabindex="-1"><a class="header-anchor" href="#参数-1" aria-hidden="true">#</a> 参数</h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>target</code></td><td style="text-align:left;"><code>any</code></td></tr><tr><td style="text-align:left;"><code>name</code></td><td style="text-align:left;"><code>string</code></td></tr><tr><td style="text-align:left;"><code>__namedParameters</code></td><td style="text-align:left;"><code>PropertyDescriptor</code></td></tr></tbody></table><h4 id="返回值-1" tabindex="-1"><a class="header-anchor" href="#返回值-1" aria-hidden="true">#</a> 返回值</h4><p><code>any</code></p><hr><h3 id="lazyprop" tabindex="-1"><a class="header-anchor" href="#lazyprop" aria-hidden="true">#</a> lazyProp</h3>`,23),b=n("strong",null,"lazyProp",-1),y=n("code",null,"T",-1),g=n("code",null,"evaluator",-1),f=n("code",null,"ReadOnlyProperty",-1),_=n("code",null,"T",-1),x=o('<h4 id="类型参数" tabindex="-1"><a class="header-anchor" href="#类型参数" aria-hidden="true">#</a> 类型参数</h4><table><thead><tr><th style="text-align:left;">名称</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><h4 id="参数-2" tabindex="-1"><a class="header-anchor" href="#参数-2" aria-hidden="true">#</a> 参数</h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>evaluator</code></td><td style="text-align:left;">() =&gt; <code>T</code></td></tr></tbody></table><h4 id="返回值-2" tabindex="-1"><a class="header-anchor" href="#返回值-2" aria-hidden="true">#</a> 返回值</h4>',5),P=n("code",null,"ReadOnlyProperty",-1),w=n("code",null,"T",-1),T=o(`<hr><h3 id="promise" tabindex="-1"><a class="header-anchor" href="#promise" aria-hidden="true">#</a> promise</h3><p>▸ <strong>promise</strong>&lt;<code>T</code>&gt;(<code>executor</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p><p>创建一个Promise，与<code>new Promise</code>类似，唯一不同的是在此Promise状态在pending状态时（也即resolve/reject之前），autojs会保持引擎不退出。</p><p>由于nodejs并不感知Java的一些异步API的执行，此函数通常用于创建和Java API相关的Promise，在Java API返回之前保持程序运行。</p><p><strong><code>示例</code></strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> promise <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;lang&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> android <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;android&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">loadAudioAsync</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> SoundPool <span class="token operator">=</span> android<span class="token punctuation">.</span>media<span class="token punctuation">.</span>SoundPool<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">const</span> soundPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoundPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> SoundPool<span class="token punctuation">.</span><span class="token constant">STREAM_MUSIC</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     soundPool<span class="token punctuation">.</span><span class="token function">setOnLoadCompleteListener</span><span class="token punctuation">(</span>$autojs<span class="token punctuation">.</span>java<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>soundPool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     soundPool<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="类型参数-1" tabindex="-1"><a class="header-anchor" href="#类型参数-1" aria-hidden="true">#</a> 类型参数</h4><table><thead><tr><th style="text-align:left;">名称</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><h4 id="参数-3" tabindex="-1"><a class="header-anchor" href="#参数-3" aria-hidden="true">#</a> 参数</h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>executor</code></td><td style="text-align:left;">(<code>resolve</code>: (<code>value</code>: <code>T</code> | <code>PromiseLike</code>&lt;<code>T</code>&gt;) =&gt; <code>void</code>, <code>reject</code>: (<code>reason?</code>: <code>any</code>) =&gt; <code>void</code>) =&gt; <code>void</code></td></tr></tbody></table><h4 id="返回值-3" tabindex="-1"><a class="header-anchor" href="#返回值-3" aria-hidden="true">#</a> 返回值</h4><p><code>Promise</code>&lt;<code>T</code>&gt;</p>`,13);function j(z,S){const s=c("RouterLink");return l(),i("div",null,[u,r,k,n("ul",null,[n("li",null,[t(s,{to:"/v9/generated/classes/lang.Deferred.html"},{default:e(()=>[a("Deferred")]),_:1})]),n("li",null,[t(s,{to:"/v9/generated/classes/lang.TimeoutError.html"},{default:e(()=>[a("TimeoutError")]),_:1})])]),h,n("ul",null,[n("li",null,[t(s,{to:"/v9/generated/interfaces/lang.ReadOnlyProperty.html"},{default:e(()=>[a("ReadOnlyProperty")]),_:1})])]),m,n("ul",null,[n("li",null,[t(s,{to:"/v9/generated/modules/lang.html#delay"},{default:e(()=>[a("delay")]),_:1})]),n("li",null,[t(s,{to:"/v9/generated/modules/lang.html#lazy"},{default:e(()=>[a("lazy")]),_:1})]),n("li",null,[t(s,{to:"/v9/generated/modules/lang.html#lazyprop"},{default:e(()=>[a("lazyProp")]),_:1})]),n("li",null,[t(s,{to:"/v9/generated/modules/lang.html#promise"},{default:e(()=>[a("promise")]),_:1})])]),v,n("p",null,[a("▸ "),b,a("<"),y,a(">("),g,a("): "),t(s,{to:"/v9/generated/interfaces/lang.ReadOnlyProperty.html"},{default:e(()=>[f]),_:1}),a("<"),_,a(">")]),x,n("p",null,[t(s,{to:"/v9/generated/interfaces/lang.ReadOnlyProperty.html"},{default:e(()=>[P]),_:1}),a("<"),w,a(">")]),T])}const A=p(d,[["render",j],["__file","lang.html.vue"]]);export{A as default};
