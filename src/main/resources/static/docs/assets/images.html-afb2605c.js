import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as l,c as u,d as n,e as s,b as a,w as p,f as t}from"./app-ff93bfbc.js";const r={},d=t(`<blockquote><p>Stability: 2 - Stable</p></blockquote><p>images模块提供了一些手机设备中常见的图片处理函数，包括截图、读写图片、图片剪裁、旋转、二值化、找色找图等。</p><p>该模块分为两个部分，找图找色部分和图片处理部分。</p><p>需要注意的是，image对象创建后尽量在不使用时进行回收，同时避免循环创建大量图片。因为图片是一种占用内存比较大的资源，尽管Auto.js通过各种方式（比如图片缓存机制、垃圾回收时回收图片、脚本结束时回收所有图片）尽量降低图片资源的泄漏和内存占用，但是糟糕的代码仍然可以占用大量内存。</p><p>Image对象通过调用<code>recycle()</code>函数来回收。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 读取图片</span>
<span class="token keyword">var</span> img <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;./1.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 对图片进行操作</span>
<span class="token operator">...</span> 
<span class="token comment">// 回收图片</span>
img<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例外的是，<code>captureScreen()</code>返回的图片不需要回收。</p><h2 id="图片处理" tabindex="-1"><a class="header-anchor" href="#图片处理" aria-hidden="true">#</a> 图片处理</h2><h2 id="images-read-path" tabindex="-1"><a class="header-anchor" href="#images-read-path" aria-hidden="true">#</a> images.read(path)</h2><ul><li><code>path</code> {string} 图片路径</li></ul><p>读取在路径path的图片文件并返回一个Image对象。如果文件不存在或者文件无法解码则返回null。</p><h2 id="images-load-url" tabindex="-1"><a class="header-anchor" href="#images-load-url" aria-hidden="true">#</a> images.load(url)</h2><ul><li><code>url</code> {string} 图片URL地址</li></ul><p>加载在地址URL的网络图片并返回一个Image对象。如果地址不存在或者图片无法解码则返回null。</p><h2 id="images-copy-img" tabindex="-1"><a class="header-anchor" href="#images-copy-img" aria-hidden="true">#</a> images.copy(img)</h2><ul><li><code>img</code> {Image} 图片</li><li>返回 {Image}</li></ul><p>复制一张图片并返回新的副本。该函数会完全复制img对象的数据。</p><h2 id="images-save-image-path-format-png-quality-100" tabindex="-1"><a class="header-anchor" href="#images-save-image-path-format-png-quality-100" aria-hidden="true">#</a> images.save(image, path[, format = &quot;png&quot;, quality = 100])</h2><ul><li><p><code>image</code> {Image} 图片</p></li><li><p><code>path</code> {string} 路径</p></li><li><p><code>format</code> {string} 图片格式，可选的值为:</p><ul><li><code>png</code></li><li><code>jpeg</code>/<code>jpg</code></li><li><code>webp</code></li></ul></li><li><p><code>quality</code> {number} 图片质量，为0~100的整数值</p></li></ul><p>把图片image以PNG格式保存到path中。如果文件不存在会被创建；文件存在会被覆盖。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 把图片压缩为原来的一半质量并保存</span>
<span class="token keyword">var</span> img <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
images<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;/sdcard/1.jpg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jpg&quot;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">viewFile</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-frombase64-base64" tabindex="-1"><a class="header-anchor" href="#images-frombase64-base64" aria-hidden="true">#</a> images.fromBase64(base64)</h2><ul><li><code>base64</code> {string} 图片的Base64数据</li><li>返回 {Image}</li></ul><p>解码Base64数据并返回解码后的图片Image对象。如果base64无法解码则返回<code>null</code>。</p><h2 id="images-tobase64-img-format-png-quality-100" tabindex="-1"><a class="header-anchor" href="#images-tobase64-img-format-png-quality-100" aria-hidden="true">#</a> images.toBase64(img[, format = &quot;png&quot;, quality = 100])</h2><ul><li><code>image</code> {image} 图片</li><li><code>format</code> {string} 图片格式，可选的值为: <ul><li><code>png</code></li><li><code>jpeg</code>/<code>jpg</code></li><li><code>webp</code></li></ul></li><li><code>quality</code> {number} 图片质量，为0~100的整数值</li><li>返回 {string}</li></ul><p>把图片编码为base64数据并返回。</p><h2 id="images-frombytes-bytes" tabindex="-1"><a class="header-anchor" href="#images-frombytes-bytes" aria-hidden="true">#</a> images.fromBytes(bytes)</h2><ul><li><code>bytes</code> {byte[]} 字节数组</li></ul><p>解码字节数组bytes并返回解码后的图片Image对象。如果bytes无法解码则返回<code>null</code>。</p><h2 id="images-tobytes-img-format-png-quality-100" tabindex="-1"><a class="header-anchor" href="#images-tobytes-img-format-png-quality-100" aria-hidden="true">#</a> images.toBytes(img[, format = &quot;png&quot;, quality = 100])</h2><ul><li><p><code>image</code> {image} 图片</p></li><li><p><code>format</code> {string} 图片格式，可选的值为:</p><ul><li><code>png</code></li><li><code>jpeg</code>/<code>jpg</code></li><li><code>webp</code></li></ul></li><li><p><code>quality</code> {number} 图片质量，为0~100的整数值</p></li><li><p>返回 {byte[]}</p></li></ul><p>把图片编码为字节数组并返回。</p><h2 id="images-readpixels-path" tabindex="-1"><a class="header-anchor" href="#images-readpixels-path" aria-hidden="true">#</a> images.readPixels(path)</h2><ul><li><code>path</code> {string} 图片的地址</li><li>返回 {Object} 包括图片的像素数据和宽高，{data,width,height}</li></ul><p>读取图片的像素数据和宽高。</p><h2 id="images-clip-img-x-y-w-h" tabindex="-1"><a class="header-anchor" href="#images-clip-img-x-y-w-h" aria-hidden="true">#</a> images.clip(img, x, y, w, h)</h2><ul><li><code>img</code> {Image} 图片</li><li><code>x</code> {number} 剪切区域的左上角横坐标</li><li><code>y</code> {number} 剪切区域的左上角纵坐标</li><li><code>w</code> {number} 剪切区域的宽度</li><li><code>h</code> {number} 剪切区域的高度</li><li>返回 {Image}</li></ul><p>从图片img的位置(x, y)处剪切大小为w * h的区域，并返回该剪切区域的新图片。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> src <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> clip <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">clip</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
images<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>clip<span class="token punctuation">,</span> <span class="token string">&quot;/sdcard/clip.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-resize-img-size-interpolation" tabindex="-1"><a class="header-anchor" href="#images-resize-img-size-interpolation" aria-hidden="true">#</a> images.resize(img, size[, interpolation])</h2><p><strong>[v4.1.0新增]</strong></p>`,42),m=n("li",null,[n("code",null,"img"),s(" {Image} 图片")],-1),k=n("li",null,[n("code",null,"size"),s(" {Array} 两个元素的数组[w, h]，分别表示宽度和高度；如果只有一个元素，则宽度和高度相等")],-1),g=n("code",null,"interpolation",-1),h=n("li",null,[n("code",null,"NEAREST"),s(" 最近邻插值")],-1),v=n("li",null,[n("code",null,"LINEAR"),s(" 线性插值（默认）")],-1),b=n("li",null,[n("code",null,"AREA"),s(" 区域插值")],-1),f=n("li",null,[n("code",null,"CUBIC"),s(" 三次样条插值")],-1),y=n("code",null,"LANCZOS4",-1),_={href:"https://docs.opencv.org/3.4.4/da/d54/group__imgproc__transform.html#ga5bb5a1fea74ea38e1a5445ca803ff121",target:"_blank",rel:"noopener noreferrer"},q=n("li",null,"返回 {Image}",-1),x=n("p",null,[s("调整图片大小，并返回调整后的图片。例如把图片放缩为200*300："),n("code",null,"images.resize(img, [200, 300])"),s("。")],-1),w={href:"https://docs.opencv.org/3.4.4/da/d54/group__imgproc__transform.html#ga47a974309e9102f5f08231edc7e7529d",target:"_blank",rel:"noopener noreferrer"},C=n("h2",{id:"images-scale-img-fx-fy-interpolation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#images-scale-img-fx-fy-interpolation","aria-hidden":"true"},"#"),s(" images.scale(img, fx, fy[, interpolation])")],-1),j=n("p",null,[n("strong",null,"[v4.1.0新增]")],-1),I=n("li",null,[n("code",null,"img"),s(" {Image} 图片")],-1),R=n("li",null,[n("code",null,"fx"),s(" {number} 宽度放缩倍数")],-1),M=n("li",null,[n("code",null,"fy"),s(" {number} 高度放缩倍数")],-1),A=n("code",null,"interpolation",-1),S=n("li",null,[n("code",null,"NEAREST"),s(" 最近邻插值")],-1),O=n("li",null,[n("code",null,"LINEAR"),s(" 线性插值（默认）")],-1),T=n("li",null,[n("code",null,"AREA"),s(" 区域插值")],-1),E=n("li",null,[n("code",null,"CUBIC"),s(" 三次样条插值")],-1),B=n("code",null,"LANCZOS4",-1),F={href:"https://docs.opencv.org/3.4.4/da/d54/group__imgproc__transform.html#ga5bb5a1fea74ea38e1a5445ca803ff121",target:"_blank",rel:"noopener noreferrer"},N=n("li",null,"返回 {Image}",-1),P=n("p",null,[s("放缩图片，并返回放缩后的图片。例如把图片变成原来的一半："),n("code",null,"images.scale(img, 0.5, 0.5)"),s("。")],-1),L={href:"https://docs.opencv.org/3.4.4/da/d54/group__imgproc__transform.html#ga47a974309e9102f5f08231edc7e7529d",target:"_blank",rel:"noopener noreferrer"},$=t('<h2 id="images-rotate-img-degree-x-y" tabindex="-1"><a class="header-anchor" href="#images-rotate-img-degree-x-y" aria-hidden="true">#</a> images.rotate(img, degree[, x, y])</h2><p><strong>[v4.1.0新增]</strong></p><ul><li><code>img</code> {Image} 图片</li><li><code>degree</code> {number} 旋转角度。</li><li><code>x</code> {number} 旋转中心x坐标，默认为图片中点</li><li><code>y</code> {number} 旋转中心y坐标，默认为图片中点</li><li>返回 {Image}</li></ul><p>将图片逆时针旋转degree度，返回旋转后的图片对象。</p><p>例如逆时针旋转90度为<code>images.rotate(img, 90)</code>。</p><h2 id="images-concat-img1-image2-direction" tabindex="-1"><a class="header-anchor" href="#images-concat-img1-image2-direction" aria-hidden="true">#</a> images.concat(img1, image2[, direction])</h2><p><strong>[v4.1.0新增]</strong></p><ul><li><code>img1</code> {Image} 图片1</li><li><code>img2</code> {Image} 图片2</li><li><code>direction</code> {string} 连接方向，默认为&quot;RIGHT&quot;，可选的值有： <ul><li><code>LEFT</code> 将图片2接到图片1左边</li><li><code>RIGHT</code> 将图片2接到图片1右边</li><li><code>TOP</code> 将图片2接到图片1上边</li><li><code>BOTTOM</code> 将图片2接到图片1下边</li></ul></li><li>返回 {Image}</li></ul><p>连接两张图片，并返回连接后的图像。如果两张图片大小不一致，小的那张将适当居中。</p><h2 id="images-grayscale-img" tabindex="-1"><a class="header-anchor" href="#images-grayscale-img" aria-hidden="true">#</a> images.grayscale(img)</h2><p><strong>[v4.1.0新增]</strong></p><ul><li><code>img</code> {Image} 图片</li><li>返回 {Image}</li></ul><p>灰度化图片，并返回灰度化后的图片。</p><h2 id="images-threshold-img-threshold-maxval-type" tabindex="-1"><a class="header-anchor" href="#images-threshold-img-threshold-maxval-type" aria-hidden="true">#</a> images.threshold(img, threshold, maxVal[, type])</h2><p><strong>[v4.1.0新增]</strong></p>',15),z=n("li",null,[n("code",null,"img"),s(" {Image} 图片")],-1),G=n("li",null,[n("code",null,"threshold"),s(" {number} 阈值")],-1),V=n("li",null,[n("code",null,"maxVal"),s(" {number} 最大值")],-1),U=n("code",null,"type",-1),D={href:"https://docs.opencv.org/3.4.4/d7/d1b/group__imgproc__misc.html#gaa9e58d2860d4afa658ef70a9b1115576",target:"_blank",rel:"noopener noreferrer"},Y=t("<ul><li><code>BINARY</code></li><li><code>BINARY_INV</code></li><li><code>TRUNC</code></li><li><code>TOZERO</code></li><li><code>TOZERO_INV</code></li><li><code>OTSU</code></li><li><code>TRIANGLE</code></li></ul>",1),H=n("li",null,"返回 {Image}",-1),X=n("p",null,[s("将图片阈值化，并返回处理后的图像。可以用这个函数进行图片二值化。例如："),n("code",null,'images.threshold(img, 100, 255, "BINARY")'),s("，这个代码将图片中大于100的值全部变成255，其余变成0，从而达到二值化的效果。如果img是一张灰度化图片，这个代码将会得到一张黑白图片。")],-1),Q={href:"https://blog.csdn.net/u012566751/article/details/77046445",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://docs.opencv.org/3.4.4/d7/d1b/group__imgproc__misc.html#gae8a4a146d1ca78c626a53577199e9c57",target:"_blank",rel:"noopener noreferrer"},J=t('<h2 id="images-adaptivethreshold-img-maxvalue-adaptivemethod-thresholdtype-blocksize-c" tabindex="-1"><a class="header-anchor" href="#images-adaptivethreshold-img-maxvalue-adaptivemethod-thresholdtype-blocksize-c" aria-hidden="true">#</a> images.adaptiveThreshold(img, maxValue, adaptiveMethod, thresholdType, blockSize, C)</h2><p><strong>[v4.1.0新增]</strong></p><ul><li><code>img</code> {Image} 图片</li><li><code>maxValue</code> {number} 最大值</li><li><code>adaptiveMethod</code> {string} 在一个邻域内计算阈值所采用的算法，可选的值有： <ul><li><code>MEAN_C</code> 计算出领域的平均值再减去参数C的值</li><li><code>GAUSSIAN_C</code> 计算出领域的高斯均值再减去参数C的值</li></ul></li><li><code>thresholdType</code> {string} 阈值化类型，可选的值有： <ul><li><code>BINARY</code></li><li><code>BINARY_INV</code></li></ul></li><li><code>blockSize</code> {number} 邻域块大小</li><li><code>C</code> {number} 偏移值调整量</li><li>返回 {Image}</li></ul><p>对图片进行自适应阈值化处理，并返回处理后的图像。</p>',4),K={href:"https://blog.csdn.net/guduruyu/article/details/68059450",target:"_blank",rel:"noopener noreferrer"},W={href:"https://docs.opencv.org/3.4.4/d7/d1b/group__imgproc__misc.html#ga72b913f352e4a1b1b397736707afcde3",target:"_blank",rel:"noopener noreferrer"},nn=n("h2",{id:"images-cvtcolor-img-code-dstcn",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#images-cvtcolor-img-code-dstcn","aria-hidden":"true"},"#"),s(" images.cvtColor(img, code[, dstCn])")],-1),sn=n("p",null,[n("strong",null,"[v4.1.0新增]")],-1),an=n("li",null,[n("p",null,[n("code",null,"img"),s(" {Image} 图片")])],-1),en=n("code",null,"code",-1),tn={href:"https://docs.opencv.org/3.4.4/d8/d01/group__imgproc__color__conversions.html#ga4e0972be5de079fed4e3a10e24ef5ef0",target:"_blank",rel:"noopener noreferrer"},on=n("ul",null,[n("li",null,[n("code",null,"BGR2GRAY"),s(" BGR转换为灰度")]),n("li",null,[n("code",null,"BGR2HSV"),s(" BGR转换为HSV")])],-1),pn=n("li",null,[n("p",null,[n("code",null,"dstCn"),s(" {number} 目标图像的颜色通道数量，如果不填写则根据其他参数自动决定。")])],-1),cn=n("li",null,[n("p",null,"返回 {Image}")],-1),ln=n("p",null,"对图像进行颜色空间转换，并返回转换后的图像。",-1),un={href:"https://blog.csdn.net/u011574296/article/details/70896811?locationNum=14&fps=1",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://docs.opencv.org/3.4.4/d8/d01/group__imgproc__color__conversions.html#ga397ae87e1288a81d2363b61574eb8cab",target:"_blank",rel:"noopener noreferrer"},dn=t('<h2 id="images-inrange-img-lowerbound-upperbound" tabindex="-1"><a class="header-anchor" href="#images-inrange-img-lowerbound-upperbound" aria-hidden="true">#</a> images.inRange(img, lowerBound, upperBound)</h2><p><strong>[v4.1.0新增]</strong></p><ul><li><code>img</code> {Image} 图片</li><li><code>lowerBound</code> {string} | {number} 颜色下界</li><li><code>upperBound</code> {string} | {number} 颜色下界</li><li>返回 {Image}</li></ul><p>将图片二值化，在lowerBound~upperBound范围以外的颜色都变成0，在范围以内的颜色都变成255。</p><p>例如<code>images.inRange(img, &quot;#000000&quot;, &quot;#222222&quot;)</code>。</p><h2 id="images-interval-img-color-interval" tabindex="-1"><a class="header-anchor" href="#images-interval-img-color-interval" aria-hidden="true">#</a> images.interval(img, color, interval)</h2><p><strong>[v4.1.0新增]</strong></p><ul><li><code>img</code> {Image} 图片</li><li><code>color</code> {string} | {number} 颜色值</li><li><code>interval</code> {number} 每个通道的范围间隔</li><li>返回 {Image}</li></ul><p>将图片二值化，在color-interval ~ color+interval范围以外的颜色都变成0，在范围以内的颜色都变成255。这里对color的加减是对每个通道而言的。</p><p>例如<code>images.interval(img, &quot;#888888&quot;, 16)</code>，每个通道的颜色值均为0x88，加减16后的范围是[0x78, 0x98]，因此这个代码将把#787878~#989898的颜色变成#FFFFFF，而把这个范围以外的变成#000000。</p><h2 id="images-blur-img-size-anchor-type" tabindex="-1"><a class="header-anchor" href="#images-blur-img-size-anchor-type" aria-hidden="true">#</a> images.blur(img, size[, anchor, type])</h2><p><strong>[v4.1.0新增]</strong></p><ul><li><code>img</code> {Image} 图片</li><li><code>size</code> {Array} 定义滤波器的大小，如[3, 3]</li><li><code>anchor</code> {Array} 指定锚点位置(被平滑点)，默认为图像中心</li><li><code>type</code> {string} 推断边缘像素类型，默认为&quot;DEFAULT&quot;，可选的值有： <ul><li><code>CONSTANT</code> iiiiii|abcdefgh|iiiiiii with some specified i</li><li><code>REPLICATE</code> aaaaaa|abcdefgh|hhhhhhh</li><li><code>REFLECT</code> fedcba|abcdefgh|hgfedcb</li><li><code>WRAP</code> cdefgh|abcdefgh|abcdefg</li><li><code>REFLECT_101</code> gfedcb|abcdefgh|gfedcba</li><li><code>TRANSPARENT</code> uvwxyz|abcdefgh|ijklmno</li><li><code>REFLECT101</code> same as BORDER_REFLECT_101</li><li><code>DEFAULT</code> same as BORDER_REFLECT_101</li><li><code>ISOLATED</code> do not look outside of ROI</li></ul></li><li>返回 {Image}</li></ul><p>对图像进行模糊（平滑处理），返回处理后的图像。</p>',14),mn={href:"https://www.cnblogs.com/denny402/p/3848316.html",target:"_blank",rel:"noopener noreferrer"},kn={href:"https://docs.opencv.org/3.4.4/d4/d86/group__imgproc__filter.html#ga8c45db9afe636703801b0b2e440fce37",target:"_blank",rel:"noopener noreferrer"},gn=t('<h2 id="images-medianblur-img-size" tabindex="-1"><a class="header-anchor" href="#images-medianblur-img-size" aria-hidden="true">#</a> images.medianBlur(img, size)</h2><p><strong>[v4.1.0新增]</strong></p><ul><li><code>img</code> {Image} 图片</li><li><code>size</code> {Array} 定义滤波器的大小，如[3, 3]</li><li>返回 {Image}</li></ul><p>对图像进行中值滤波，返回处理后的图像。</p>',4),hn={href:"https://www.cnblogs.com/denny402/p/3848316.html",target:"_blank",rel:"noopener noreferrer"},vn={href:"https://docs.opencv.org/3.4.4/d4/d86/group__imgproc__filter.html#ga564869aa33e58769b4469101aac458f9",target:"_blank",rel:"noopener noreferrer"},bn=t('<h2 id="images-gaussianblur-img-size-sigmax-sigmay-type" tabindex="-1"><a class="header-anchor" href="#images-gaussianblur-img-size-sigmax-sigmay-type" aria-hidden="true">#</a> images.gaussianBlur(img, size[, sigmaX, sigmaY, type])</h2><p><strong>[v4.1.0新增]</strong></p><ul><li><code>img</code> {Image} 图片</li><li><code>size</code> {Array} 定义滤波器的大小，如[3, 3]</li><li><code>sigmaX</code> {number} x方向的标准方差，不填写则自动计算</li><li><code>sigmaY</code> {number} y方向的标准方差，不填写则自动计算</li><li><code>type</code> {string} 推断边缘像素类型，默认为&quot;DEFAULT&quot;，参见<code>images.blur</code></li><li>返回 {Image}</li></ul><p>对图像进行高斯模糊，返回处理后的图像。</p>',4),fn={href:"https://www.cnblogs.com/denny402/p/3848316.html",target:"_blank",rel:"noopener noreferrer"},yn={href:"https://docs.opencv.org/3.4.4/d4/d86/group__imgproc__filter.html#gaabe8c836e97159a9193fb0b11ac52cf1",target:"_blank",rel:"noopener noreferrer"},_n=t(`<h2 id="images-getsimilarity-img1-img2-options" tabindex="-1"><a class="header-anchor" href="#images-getsimilarity-img1-img2-options" aria-hidden="true">#</a> images.getSimilarity(img1, img2, options)</h2><ul><li><code>img1</code> {Image} 图片1</li><li><code>img2</code> {Image} 图片2</li><li><code>options</code> {Object} 选项包括： <ul><li><code>type</code> {string} 比较相似度的算法(默认为MSSIM)： <ul><li><code>MSSIM</code> 平均结构相似性，在影像品质的衡量上更能符合人眼对影像品质的判断。结构相似性SSIM的取值范围是 [ 0 , 1 ] ，当两张图像越相似时，则SSIM越接近1。</li><li><code>PNSR</code> 峰值信噪比，是针对于像素绝对误差，通过均方误差（MSE）进行定义，当两幅图像的PSNR小于30时，那么这两幅图像可以说是比较相似的。</li></ul></li></ul></li><li>返回 {number}</li></ul><p>比较两幅图片的相似性，返回相似度。</p><p>例如</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">log</span><span class="token punctuation">(</span>images<span class="token punctuation">.</span><span class="token function">getSimilarity</span><span class="token punctuation">(</span>img1<span class="token punctuation">,</span> img2<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;PNSR&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-mattoimage-mat" tabindex="-1"><a class="header-anchor" href="#images-mattoimage-mat" aria-hidden="true">#</a> images.matToImage(mat)</h2><p><strong>[v4.1.0新增]</strong></p><ul><li><code>mat</code> {Mat} OpenCV的Mat对象</li><li>返回 {Image}</li></ul><p>把Mat对象转换为Image对象。</p><h2 id="找图找色" tabindex="-1"><a class="header-anchor" href="#找图找色" aria-hidden="true">#</a> 找图找色</h2><p>找图找色介绍了通过截图、匹配等搜索目标的不同方式，可以根据实际情况选择不同的方式：</p>`,11),qn=n("strong",null,"全分辨率找图（特征匹配）",-1),xn=t(`<h2 id="images-requestscreencapture-landscape" tabindex="-1"><a class="header-anchor" href="#images-requestscreencapture-landscape" aria-hidden="true">#</a> images.requestScreenCapture([landscape])</h2><ul><li><code>landscape</code> {boolean} 布尔值， 表示将要执行的截屏是否为横屏。如果landscape为false, 则表示竖屏截图; true为横屏截图。</li></ul><p>向系统申请屏幕截图权限，返回是否请求成功。</p><p>第一次使用该函数会弹出截图权限请求，建议选择“总是允许”。（某些系统没有总是允许选项）</p><p>这个函数只是申请截图权限，并不会真正执行截图，真正的截图函数是<code>captureScreen()</code>。</p><p>该函数在截图脚本中只需执行一次，而无需每次调用<code>captureScreen()</code>都调用一次；若已有截图权限，则抛出异常。</p><p><strong>如果不指定landscape值，则截图方向由当前设备屏幕方向决定</strong>，因此务必注意执行该函数时的屏幕</p><p>截图权限无法在脚本引擎之间共享。</p><p>建议在本软件界面运行该函数，在其他软件界面运行时容易出现一闪而过的黑屏现象；另外，<strong>某些定制ROM或者高版本Android不允许在后台弹出界面，在后台运行此函数时可能会一直阻塞</strong>。</p><p>示例:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 请求截图</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;请求截图失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 连续截图10张图片(间隔1秒)并保存到存储卡目录</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/screen_capture_&quot;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&quot;.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数也可以作为全局函数使用。</p><h2 id="images-requestscreencapture-options" tabindex="-1"><a class="header-anchor" href="#images-requestscreencapture-options" aria-hidden="true">#</a> $images.requestScreenCapture(options)</h2>`,13),wn={href:"https://pro.autojs.org/",target:"_blank",rel:"noopener noreferrer"},Cn=t(`<ul><li><p><code>options</code> {object} 申请截图选项</p><ul><li><p><code>width</code> {number} 截图宽度，默认为-1，即自动设置为设备屏幕宽度</p></li><li><p><code>height</code> {number} 截图高度，默认为-1，即自动设置为设备屏幕高度</p></li><li><p><code>orientation</code> {number} 截图方向，默认为0</p><ul><li>-1：ORIENTATION_CURRENT, 检测当前的屏幕方向，用该方向作为申请截图的屏幕方向</li><li>0: ORIENTATION_AUTO, 自动适应截图方向（转屏时自动切换方向）</li><li>1: ORIENTATION_PORTRAIT， 竖屏截图</li><li>2: ORIENTATION_LANDSCAPE, 横屏截图</li></ul></li><li><p><code>async</code> {boolean} 是否为异步截图。默认为false</p></li></ul></li></ul><p>向系统申请屏幕截图权限，返回是否请求成功。对于width和height参数，系统只会匹配相邻的合适的宽高。截图宽高不一定和指定的宽高完全一致。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">requestScreenCapture</span><span class="token punctuation">(</span>\\<span class="token punctuation">{</span><span class="token literal-property property">orientation</span><span class="token operator">:</span> <span class="token number">0</span>\\<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更多参数和说明参见上面的<code>images.requestScreenCapture([landscape])</code>函数，这里只特别解释<code>async</code>参数。</p><p>当<code>async</code>为true时，申请截图将为异步截图，也即无法通过<code>captureScreen()</code>来截图，而是通过事件<code>screen_capture</code>来监听截图。</p><p>该事件将在屏幕变化时自动触发，对于屏幕刷新少的软件界面更加节能省电，对于游戏界面则可能无法达到省电效果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 请求截图权限, 注意参数 async: true</span>
<span class="token function">requestScreenCapture</span><span class="token punctuation">(</span>\\<span class="token punctuation">{</span><span class="token literal-property property">async</span><span class="token operator">:</span> <span class="token boolean">true</span>\\<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> target <span class="token operator">=</span> $images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&#39;./test.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;exit&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> target<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 监听屏幕截图</span>
$images<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;screen_capture&quot;</span><span class="token punctuation">,</span> <span class="token parameter">capture</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 找图</span>
    <span class="token keyword">let</span> pos <span class="token operator">=</span> $images<span class="token punctuation">.</span><span class="token function">findImage</span><span class="token punctuation">(</span>capture<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 打印</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-getscreencaptureoptions" tabindex="-1"><a class="header-anchor" href="#images-getscreencaptureoptions" aria-hidden="true">#</a> $images.getScreenCaptureOptions()</h2>`,8),jn={href:"https://pro.autojs.org/",target:"_blank",rel:"noopener noreferrer"},In=t('<ul><li>返回 {object} | {null}</li></ul><p>获取当前截图配置选项。如果并未申请截图权限，则返回<code>null</code>。返回的对象有以下字段： * <code>width</code> {number} 截图宽度 * <code>height</code> {number} 截图高度 * <code>orientation</code> {number} 截图方向 * 0: ORIENTATION_AUTO, 自动适应截图方向 * 1: ORIENTATION_PORTRAIT， 竖屏截图 * 2: ORIENTATION_LANDSCAPE, 横屏截图 * <code>density</code> {number} 截图像素密度 * <code>async</code> {boolean} 是否为异步截图</p><h2 id="images-stopscreencapture" tabindex="-1"><a class="header-anchor" href="#images-stopscreencapture" aria-hidden="true">#</a> $images.stopScreenCapture()</h2>',3),Rn={href:"https://pro.autojs.org/",target:"_blank",rel:"noopener noreferrer"},Mn=t(`<p>释放截图权限。如果并未申请截图权限，则此函数没有任何作用。</p><h2 id="images-capturescreen" tabindex="-1"><a class="header-anchor" href="#images-capturescreen" aria-hidden="true">#</a> images.captureScreen()</h2><p>截取当前屏幕并返回一个Image对象。</p><p>没有截图权限时执行该函数会抛出SecurityException。</p><p>该函数不会返回null，两次调用可能返回相同的Image对象。这是因为设备截图的更新需要一定的时间，短时间内（一般来说是16ms）连续调用则会返回同一张截图。</p><p>截图需要转换为Bitmap格式，从而该函数执行需要一定的时间(0~20ms)。</p><p>另外在requestScreenCapture()执行成功后需要一定时间后才有截图可用，因此如果立即调用captureScreen()，会等待一定时间后(一般为几百ms)才返回截图。</p><p>例子:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 请求横屏截图</span>
<span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 截图</span>
<span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取在点(100, 100)的颜色值</span>
<span class="token keyword">var</span> color <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">pixel</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 显示该颜色值</span>
<span class="token function">toast</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数也可以作为全局函数使用。</p><h2 id="images-capturescreen-path" tabindex="-1"><a class="header-anchor" href="#images-capturescreen-path" aria-hidden="true">#</a> images.captureScreen(path)</h2><ul><li><code>path</code> {string} 截图保存路径</li></ul><p>截取当前屏幕并以PNG格式保存到path中。如果文件不存在会被创建；文件存在会被覆盖。</p><p>该函数不会返回任何值。该函数也可以作为全局函数使用。</p><h2 id="images-pixel-image-x-y" tabindex="-1"><a class="header-anchor" href="#images-pixel-image-x-y" aria-hidden="true">#</a> images.pixel(image, x, y)</h2><ul><li><code>image</code> {Image} 图片</li><li><code>x</code> {number} 要获取的像素的横坐标。</li><li><code>y</code> {number} 要获取的像素的纵坐标。</li></ul><p>返回图片image在点(x, y)处的像素的ARGB值。</p><p>该值的格式为0xAARRGGBB，是一个&quot;32位整数&quot;(虽然JavaScript中并不区分整数类型和其他数值类型)。</p><p>坐标系以图片左上角为原点。以图片左侧边为y轴，上侧边为x轴。</p><h2 id="images-findcolor-image-color-options" tabindex="-1"><a class="header-anchor" href="#images-findcolor-image-color-options" aria-hidden="true">#</a> images.findColor(image, color, options)</h2><ul><li><code>image</code> {Image} 图片</li><li><code>color</code> {number} | {string} 要寻找的颜色的RGB值。如果是一个整数，则以0xRRGGBB的形式代表RGB值（A通道会被忽略）；如果是字符串，则以&quot;#RRGGBB&quot;代表其RGB值。</li><li><code>options</code> {Object} 选项</li></ul><p>在图片中寻找颜色color。找到时返回找到的点Point，找不到时返回null。</p><p>选项包括：</p><ul><li><code>region</code> {Array} 找色区域。是一个两个或四个元素的数组。(region[0], region[1])表示找色区域的左上角；region[2]*region[3]表示找色区域的宽高。如果只有region只有两个元素，则找色区域为(region[0], region[1])到图片右下角。如果不指定region选项，则找色区域为整张图片。</li><li><code>threshold</code> {number} 找色时颜色相似度的临界值，范围为0 ~ 255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255.</li></ul><p>该函数也可以作为全局函数使用。</p><p>一个循环找色的例子如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 循环找色，找到红色(#ff0000)时停止并报告坐标</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token function">findColor</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;#ff0000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;找到红色，坐标为(&quot;</span> <span class="token operator">+</span> point<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> point<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个区域找色的例子如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 读取本地图片/sdcard/1.png</span>
<span class="token keyword">var</span> img <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 判断图片是否加载成功</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>img<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;没有该图片&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 在该图片中找色，指定找色区域为在位置(400, 500)的宽为300长为200的区域，指定找色临界值为4</span>
<span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token function">findColor</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;#00ff00&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">region</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
     <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">4</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;找到啦:&quot;</span> <span class="token operator">+</span> point<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;没找到&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-findcolorinregion-img-color-x-y-width-height-threshold" tabindex="-1"><a class="header-anchor" href="#images-findcolorinregion-img-color-x-y-width-height-threshold" aria-hidden="true">#</a> images.findColorInRegion(img, color, x, y[, width, height, threshold])</h2><p>区域找色的简便方法。</p><p>相当于</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>images<span class="token punctuation">.</span><span class="token function">findColor</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> color<span class="token punctuation">,</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">region</span><span class="token operator">:</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">]</span><span class="token punctuation">,</span>
     <span class="token literal-property property">threshold</span><span class="token operator">:</span> threshold
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数也可以作为全局函数使用。</p><h2 id="images-findallpointsforcolor-img-color-options" tabindex="-1"><a class="header-anchor" href="#images-findallpointsforcolor-img-color-options" aria-hidden="true">#</a> images.findAllPointsForColor(img, color, options)</h2><ul><li><code>img</code> {Image} 图片</li><li><code>color</code> {number} | {string} 要检测的颜色</li><li><code>options</code> {Object} 选项包括： <ul><li><code>region</code> {Array} 找色区域。是一个两个或四个元素的数组。(region[0], region[1])表示找色区域的左上角；region[2]*region[3]表示找色区域的宽高。如果只有region只有两个元素，则找色区域为(region[0], region[1])到图片右下角。如果不指定region选项，则找色区域为整张图片。</li><li><code>similarity</code> {number} 找色时颜色相似度，范围为0~1（越大越相似，1为颜色相等，0为任何颜色都能匹配）。</li><li><code>threshold</code> {number} 找色时颜色相似度的临界值，范围为0 ~ 255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255 。相似度与阈值二选一，同时存在则以相似度为准。</li></ul></li><li>返回 {Array}</li></ul><p>在图片中寻找所有颜色为color的点。找到时返回找到的点Point的数组，找不到时返回null。</p><p>例如找出所有白色的点：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">log</span><span class="token punctuation">(</span>images<span class="token punctuation">.</span><span class="token function">findAllPointsForColor</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;#ffffff&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="images-findcolorequals-img-color-x-y-width-height" tabindex="-1"><a class="header-anchor" href="#images-findcolorequals-img-color-x-y-width-height" aria-hidden="true">#</a> images.findColorEquals(img, color[, x, y, width, height])</h2><ul><li><code>img</code> {Image} 图片</li><li><code>color</code> {number} | {string} 要寻找的颜色</li><li><code>x</code> {number} 找色区域的左上角横坐标</li><li><code>y</code> {number} 找色区域的左上角纵坐标</li><li><code>width</code> {number} 找色区域的宽度</li><li><code>height</code> {number} 找色区域的高度</li><li>返回 {Point}</li></ul><p>在图片img指定区域中找到颜色和color完全相等的某个点，并返回该点的左边；如果没有找到，则返回<code>null</code>。</p><p>找色区域通过<code>x</code>, <code>y</code>, <code>width</code>, <code>height</code>指定，如果不指定找色区域，则在整张图片中寻找。</p><p>该函数也可以作为全局函数使用。</p><p>示例： (通过找QQ红点的颜色来判断是否有未读消息)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">launchApp</span><span class="token punctuation">(</span><span class="token string">&quot;QQ&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">findColorEquals</span><span class="token punctuation">(</span><span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;#f64d30&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;有未读消息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;没有未读消息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-findmulticolors-img-firstcolor-colors-options" tabindex="-1"><a class="header-anchor" href="#images-findmulticolors-img-firstcolor-colors-options" aria-hidden="true">#</a> images.findMultiColors(img, firstColor, colors[, options])</h2><ul><li><code>img</code> {Image} 要找色的图片</li><li><code>firstColor</code> {number} | {string} 第一个点的颜色</li><li><code>colors</code> {Array} 表示剩下的点相对于第一个点的位置和颜色的数组，数组的每个元素为[x, y, color]</li><li><code>options</code> {Object} 选项，包括： <ul><li><code>region</code> {Array} 找色区域。是一个两个或四个元素的数组。(region[0], region[1])表示找色区域的左上角；region[2]*region[3]表示找色区域的宽高。如果只有region只有两个元素，则找色区域为(region[0], region[1])到图片右下角。如果不指定region选项，则找色区域为整张图片。</li><li><code>threshold</code> {number} 找色时颜色相似度的临界值，范围为0 ~ 255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255.</li></ul></li></ul><p>多点找色，类似于按键精灵的多点找色，其过程如下：</p><ol><li>在图片img中找到颜色firstColor的位置(x0, y0)</li><li>对于数组colors的每个元素[x, y, color]，检查图片img在位置(x + x0, y + y0)上的像素是否是颜色color，是的话返回(x0, y0)，否则继续寻找firstColor的位置，重新执行第1步</li><li>整张图片都找不到时返回<code>null</code></li></ol><p>例如，对于代码<code>images.findMultiColors(img, &quot;#123456&quot;, [[10, 20, &quot;#ffffff&quot;], [30, 40, &quot;#000000&quot;]])</code>，假设图片在(100, 200)的位置的颜色为#123456, 这时如果(110, 220)的位置的颜色为#fffff且(130, 240)的位置的颜色为#000000，则函数返回点(100, 200)。</p><p>如果要指定找色区域，则在options中指定，例如:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> p <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">findMultiColors</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;#123456&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&quot;#ffffff&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">&quot;#000000&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">region</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">960</span><span class="token punctuation">,</span> <span class="token number">1080</span><span class="token punctuation">,</span> <span class="token number">960</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-detectscolor-image-color-x-y-threshold-16-algorithm-diff" tabindex="-1"><a class="header-anchor" href="#images-detectscolor-image-color-x-y-threshold-16-algorithm-diff" aria-hidden="true">#</a> images.detectsColor(image, color, x, y[, threshold = 16, algorithm = &quot;diff&quot;])</h2>`,54),An=t("<li><code>image</code> {Image} 图片</li><li><code>color</code> {number} | {string} 要检测的颜色</li><li><code>x</code> {number} 要检测的位置横坐标</li><li><code>y</code> {number} 要检测的位置纵坐标</li><li><code>threshold</code> {number} 颜色相似度临界值，默认为16。取值范围为0 ~ 255。</li>",5),Sn=n("code",null,"algorithm",-1),On=n("li",null,'"equal": 相等匹配，只有与给定颜色color完全相等时才匹配。',-1),Tn=n("li",null,'"diff": 差值匹配。与给定颜色的R、G、B差的绝对值之和小于threshold时匹配。',-1),En=n("li",null,'"rgb": rgb欧拉距离相似度。与给定颜色color的rgb欧拉距离小于等于threshold时匹配。',-1),Bn={href:"https://en.wikipedia.org/wiki/Color_difference",target:"_blank",rel:"noopener noreferrer"},Fn=n("li",null,'"hs": hs欧拉距离匹配。hs为HSV空间的色调值。',-1),Nn=t(`<p>返回图片image在位置(x, y)处是否匹配到颜色color。用于检测图片中某个位置是否是特定颜色。</p><p>一个判断微博客户端的某个微博是否被点赞过的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 找到点赞控件</span>
<span class="token keyword">var</span> like <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;ly_feed_like_icon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取该控件中点坐标</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> like<span class="token punctuation">.</span><span class="token function">bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">centerX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> y <span class="token operator">=</span> like<span class="token punctuation">.</span><span class="token function">bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">centerY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 截图</span>
<span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 判断在该坐标的颜色是否为橙红色</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>images<span class="token punctuation">.</span><span class="token function">detectsColor</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;#fed9a8&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 是的话则已经是点赞过的了，不做任何动作</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token comment">// 否则点击点赞按钮</span>
    like<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-detectsmulticolors-img-x-y-firstcolor-colors-options" tabindex="-1"><a class="header-anchor" href="#images-detectsmulticolors-img-x-y-firstcolor-colors-options" aria-hidden="true">#</a> images.detectsMultiColors(img, x, y, firstColor, colors, options)</h2><ul><li><code>img</code> {Image} 目标图片</li><li><code>x</code> {number} 第一个点的x坐标</li><li><code>y</code> {number} 第一个点的y坐标</li><li><code>firstColor</code> {number} | {string} 第一个点的颜色</li><li><code>colors</code> {Array} 表示剩下的点相对于第一个点的位置和颜色的数组，数组的每个元素为[x, y, color]</li><li><code>options</code> {Object} 选项，包括： <ul><li><code>region</code> {Array} 找色区域。是一个两个或四个元素的数组。(region[0], region[1])表示找色区域的左上角；region[2]*region[3]表示找色区域的宽高。如果只有region只有两个元素，则找色区域为(region[0], region[1])到图片右下角。如果不指定region选项，则区域为整张图片。</li><li><code>threshold</code> {number} 比色时颜色相似度的临界值，范围为0 ~ 255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255.</li></ul></li><li>返回 <code>boolean</code></li></ul><p>多点比色，返回img在起始位置(x, y)处的多个点的颜色是否匹配。</p><p>参见<code>images.findMultiColors()</code>多点找色的文档。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">log</span><span class="token punctuation">(</span>images<span class="token punctuation">.</span><span class="token function">detectsMultiColors</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;#000000&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;#123456&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;#ff0000&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="images-findimage-img-template-options" tabindex="-1"><a class="header-anchor" href="#images-findimage-img-template-options" aria-hidden="true">#</a> images.findImage(img, template[, options])</h2><p><strong>[v8.5.5新增]</strong></p><ul><li><code>img</code> {Image} 大图片</li><li><code>template</code> {Image} 小图片（模板）</li><li><code>options</code> {Object} 找图选项</li></ul><p>找图。在大图片img中查找小图片template的位置（模块匹配），找到时返回位置坐标(Point)，找不到时返回null。</p><p>选项包括：</p><ul><li><code>threshold</code> {number} 图片相似度。取值范围为0~1的浮点数。默认值为0.9。</li><li><code>region</code> {Array} 找图区域。参见findColor函数关于region的说明。</li><li><code>level</code> {number} <strong>一般而言不必修改此参数</strong>。不加此参数时该参数会根据图片大小自动调整。找图算法是采用图像金字塔进行的, level参数表示金字塔的层次, level越大可能带来越高的找图效率，但也可能造成找图失败（图片因过度缩小而无法分辨）或返回错误位置。因此，除非您清楚该参数的意义并需要进行性能调优，否则不需要用到该参数。</li></ul><p>该函数也可以作为全局函数使用。</p><p>一个最简单的找图例子如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> img <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/大图.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> templ <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/小图.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">findImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> templ<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;找到啦:&quot;</span> <span class="token operator">+</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;没找到&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>稍微复杂点的区域找图例子如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">auto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> wx <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/微信图标.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回桌面</span>
<span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 截图并找图</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">findImage</span><span class="token punctuation">(</span><span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> wx<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">region</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">0.8</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;在桌面找到了微信图标啦: &quot;</span> <span class="token operator">+</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;在桌面没有找到微信图标&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-findimageinregion-img-template-x-y-width-height-threshold" tabindex="-1"><a class="header-anchor" href="#images-findimageinregion-img-template-x-y-width-height-threshold" aria-hidden="true">#</a> images.findImageInRegion(img, template, x, y[, width, height, threshold])</h2><p>区域找图的简便方法。相当于：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>images<span class="token punctuation">.</span><span class="token function">findImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> template<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">region</span><span class="token operator">:</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">threshold</span><span class="token operator">:</span> threshold
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数也可以作为全局函数使用。</p><h2 id="images-matchtemplate-img-template-options" tabindex="-1"><a class="header-anchor" href="#images-matchtemplate-img-template-options" aria-hidden="true">#</a> images.matchTemplate(img, template, options)</h2><p><strong>[v4.1.0新增]</strong></p>`,25),Pn=n("li",null,[n("code",null,"img"),s(" {Image} 大图片")],-1),Ln=n("li",null,[n("code",null,"template"),s(" {Image} 小图片（模板）")],-1),$n=n("code",null,"options",-1),zn=n("li",null,[n("code",null,"threshold"),s(" {number} 图片相似度。取值范围为0~1的浮点数。默认值为0.9。")],-1),Gn=n("li",null,[n("code",null,"region"),s(" {Array} 找图区域。参见findColor函数关于region的说明。")],-1),Vn=n("li",null,[n("code",null,"max"),s(" {number} 找图结果最大数量，默认为5")],-1),Un=n("code",null,"transparentMask",-1),Dn={href:"https://pro.autojs.org/",target:"_blank",rel:"noopener noreferrer"},Yn=n("li",null,[n("code",null,"level"),s(" {number} "),n("strong",null,"一般而言不必修改此参数"),s("。不加此参数时该参数会根据图片大小自动调整。找图算法是采用图像金字塔进行的, level参数表示金字塔的层次, level越大可能带来越高的找图效率，但也可能造成找图失败（图片因过度缩小而无法分辨）或返回错误位置。因此，除非您清楚该参数的意义并需要进行性能调优，否则不需要用到该参数。")],-1),Hn=n("li",null,"返回 {MatchingResult}",-1),Xn=t(`<p>在大图片中搜索小图片，并返回搜索结果MatchingResult。该函数可以用于找图时找出多个位置，可以通过max参数控制最大的结果数量。也可以对匹配结果进行排序、求最值等操作。</p><h2 id="images-findcircles-gray-options" tabindex="-1"><a class="header-anchor" href="#images-findcircles-gray-options" aria-hidden="true">#</a> images.findCircles(gray, options)</h2><ul><li><code>gray</code> {Image} 灰度图片</li><li><code>options</code> {Object} 选项包括： <ul><li><code>region</code> {Array} 找圆区域。是一个两个或四个元素的数组。(region[0], region[1])表示找圆区域的左上角；region[2]*region[3]表示找圆区域的宽高。如果只有region只有两个元素，则找圆区域为(region[0], region[1])到图片右下角。如果不指定region选项，则找圆区域为整张图片。</li><li><code>dp</code> {number} dp是累加面与原始图像相比的分辨率的反比参数，dp=2时累计面分辨率是元素图像的一半，宽高都缩减为原来的一半，dp=1时，两者相同。默认为1。</li><li><code>minDst</code> {number} minDist定义了两个圆心之间的最小距离。默认为图片高度的八分之一。</li><li><code>param1</code> {number} param1是Canny边缘检测的高阈值，低阈值被自动置为高阈值的一半。默认为100，范围为0-255。</li><li><code>param2</code> {number} param2是累加平面对是否是圆的判定阈值，默认为100。</li><li><code>minRadius</code> {number} 定义了检测到的圆的半径的最小值，默认为0。</li><li><code>maxRadius</code> {number} 定义了检测到的圆的半径的最大值，0为不限制最大值，默认为0。</li></ul></li><li>返回 {Array}</li></ul><p>在图片中寻找圆（做霍夫圆变换）。找到时返回找到的所有圆{x,y,radius}的数组，找不到时返回null。</p><p>一个寻找圆的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 请求截图</span>
<span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 截图</span>
<span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 灰度化图片</span>
<span class="token keyword">let</span> gray <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">grayscale</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 找圆</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token function">findCircles</span><span class="token punctuation">(</span>gray<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">dp</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">minDst</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>
    <span class="token literal-property property">param1</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
    <span class="token literal-property property">param2</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
    <span class="token literal-property property">minRadius</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
    <span class="token literal-property property">maxRadius</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 回收图片</span>
gray<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="images-detectandcomputefeatures-img-options" tabindex="-1"><a class="header-anchor" href="#images-detectandcomputefeatures-img-options" aria-hidden="true">#</a> $images.detectAndComputeFeatures(img[, options]）</h2><p><strong>[v9.2新增]</strong></p>`,8),Qn=t("<li><code>img</code> {Image} 图片，要计算特征的图片</li><li><code>options</code> {object} 特征计算选项，可选参数： <ul><li><code>scale</code> {number} 计算特征时图片的缩放比例，缩放比例越小，计算特征越快，但可能因为放缩过度导致特征计算错误。对于宽度 * 高度 &gt; 1000000的图片，scale参数默认为0.5，否则scale默认为1</li><li><code>grayscale</code> {boolean} 是否灰度化后再计算特征，默认为<code>true</code></li><li><code>method</code> {string} 图像特征匹配的方法，默认为<code>SIFT</code>，也可指定为<code>ORB</code>（不推荐）</li><li><code>region</code> {Array} 图像的匹配区域，不填此字段时则为整个图片计算特征</li></ul></li>",2),Zn=n("code",null,"recycle()",-1),Jn=n("p",null,"一般而言，小图的特征可以在程序开始时就计算，在程序结束时再回收。如果每次截图时都去读取小图、计算小图特征，不仅会导致程序运行效率低，而且会导致内存碎片，从而使得内存难以利用和更快耗尽。",-1),Kn=n("h2",{id:"images-matchfeatures-scene-object-options",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#images-matchfeatures-scene-object-options","aria-hidden":"true"},"#"),s(" $images.matchFeatures(scene, object[, options])")],-1),Wn=n("p",null,[n("strong",null,"[v9.2新增]")],-1),ns=t("<li><code>scene</code> {ImageFeatures} 场景图片的特征对象（大图特征）</li><li><code>object</code> {ImageFeatures} 目标图片的特征对象（小图特征）</li><li><code>options</code> {object} 可选参数： <ul><li><code>matcher</code> {string} 特征匹配方式，默认为<code>FLANNBASED</code>，可选的值有<code>&quot;FLANNBASED&quot;</code>, <code>&quot;BRUTEFORCE&quot;</code>, <code>&quot;BRUTEFORCE_L1&quot;</code>, <code>&quot;BRUTEFORCE_HAMMING&quot;</code>, <code>&quot;BRUTEFORCE_HAMMINGLUT&quot;</code>, <code>&quot;BRUTEFORCE_SL2&quot;</code>，除了<code>FLANNBASED</code>外其他匹配方式未经过充分测试</li><li><code>drawMatches</code> {string} 绘制图片匹配详情的路径，若为空则不绘制匹配详情。此选项一般为调试使用，在真正匹配时请勿指定，否则会增加耗时。</li><li><code>thredshold</code> {number} 匹配阈值，默认为<code>0.7</code></li></ul></li>",3),ss=n("code",null,"null",-1),as=t(`<p>特征匹配提供了全分辨率找图功能，可以识别检测图像中明显的特征并根据特征来查找类似图片。即使图片的分辨率、形状、旋转有差异也能识别出来，但匹配速度相对较慢。</p><p>需要注意的是，计算特征的过程也比较耗时，因此请勿在每次匹配时才计算小图的特征，小图若不变可以提前计算特征并复用特征对象。</p><p>以下是一个简单的示例，也在Auto.js Pro内置示例&quot;图片与图色处理 - 找图找色&quot;文件夹中，可直接运行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 读取小图</span>
<span class="token keyword">let</span> hellokitty <span class="token operator">=</span> $images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&#39;./hellokitty.jpg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 计算小图特征</span>
<span class="token keyword">let</span> objectFeatures <span class="token operator">=</span> $images<span class="token punctuation">.</span><span class="token function">detectAndComputeFeatures</span><span class="token punctuation">(</span>hellokitty<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 请求截图权限</span>
<span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 打开HelloKitty图片</span>
$app<span class="token punctuation">.</span><span class="token function">openUrl</span><span class="token punctuation">(</span><span class="token string">&#39;https://baike.baidu.com/item/Hello%20Kitty/984270&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> capture <span class="token operator">=</span> <span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 若要提高效率，可以在计算大图特征时调整scale参数，默认为0.5，</span>
    <span class="token comment">// 越小越快，但可以放缩过度导致匹配错误。若在特征匹配时无法搜索到正确结果，可以调整这里的参数，比如\\{scale: 1\\}</span>
    <span class="token comment">// 也可以在这里指定\\{region: [...]\\}参数只计算这个区域的特征提高效率</span>
    <span class="token keyword">let</span> sceneFeatures <span class="token operator">=</span> $images<span class="token punctuation">.</span><span class="token function">detectAndComputeFeatures</span><span class="token punctuation">(</span>capture<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 最后一次匹配时，我们将特征和匹配绘制出来，在调试时更容易看出匹配效果，但会增加耗时</span>
    <span class="token keyword">let</span> drawMatches <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">&#39;./matches.jpg&#39;</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> $images<span class="token punctuation">.</span><span class="token function">matchFeatures</span><span class="token punctuation">(</span>sceneFeatures<span class="token punctuation">,</span> objectFeatures<span class="token punctuation">,</span> \\<span class="token punctuation">{</span> drawMatches \\<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 打印结果和中心点，可使用click(reuslt.centerX, result.centerY)点击</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> result <span class="token operator">?</span> result<span class="token punctuation">.</span>center <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 回收特征对象</span>
    sceneFeatures<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>drawMatches<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 可以在当前目录查看matches.jpg图片，会绘制详细匹配详情</span>
        app<span class="token punctuation">.</span><span class="token function">viewFile</span><span class="token punctuation">(</span><span class="token string">&#39;./matches.jpg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 回收小图特征对象</span>
objectFeatures<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
hellokitty<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="imagefeatures" tabindex="-1"><a class="header-anchor" href="#imagefeatures" aria-hidden="true">#</a> ImageFeatures</h2><p><strong>[v9.2新增]</strong></p><p>存储特征信息的类，仅用于特征匹配。</p><h3 id="imagefeatures-recycle" tabindex="-1"><a class="header-anchor" href="#imagefeatures-recycle" aria-hidden="true">#</a> ImageFeatures.recycle()</h3><p>回收特征对象。必须显式在不使用该对象时调用，否则会导致内存泄露而程序崩溃。</p><h2 id="objectframe" tabindex="-1"><a class="header-anchor" href="#objectframe" aria-hidden="true">#</a> ObjectFrame</h2><p><strong>[v9.2新增]</strong></p><p>特征匹配返回的结果，表示一个四边形。</p><h3 id="objectframe-topleft" tabindex="-1"><a class="header-anchor" href="#objectframe-topleft" aria-hidden="true">#</a> ObjectFrame.topLeft</h3>`,13),es=n("p",null,"四边形的左上角坐标。",-1),ts=n("h3",{id:"objectframe-topright",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#objectframe-topright","aria-hidden":"true"},"#"),s(" ObjectFrame.topRight")],-1),os=n("p",null,"四边形的右上角坐标。",-1),ps=n("h3",{id:"objectframe-bottomleft",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#objectframe-bottomleft","aria-hidden":"true"},"#"),s(" ObjectFrame.bottomLeft")],-1),is=n("p",null,"四边形的左下角坐标。",-1),cs=n("h3",{id:"objectframe-bottomright",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#objectframe-bottomright","aria-hidden":"true"},"#"),s(" ObjectFrame.bottomRight")],-1),ls=n("p",null,"四边形的右下角坐标。",-1),us=n("h3",{id:"objectframe-center",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#objectframe-center","aria-hidden":"true"},"#"),s(" ObjectFrame.center")],-1),rs=t(`<p>四边形的中心点坐标。</p><h3 id="objectframe-centerx" tabindex="-1"><a class="header-anchor" href="#objectframe-centerx" aria-hidden="true">#</a> ObjectFrame.centerX</h3><ul><li>{number}</li></ul><p>四边形的中心点x坐标。</p><h3 id="objectframe-centery" tabindex="-1"><a class="header-anchor" href="#objectframe-centery" aria-hidden="true">#</a> ObjectFrame.centerY</h3><ul><li>{number}</li></ul><p>四边形的中心点y坐标。</p><h2 id="matchingresult" tabindex="-1"><a class="header-anchor" href="#matchingresult" aria-hidden="true">#</a> MatchingResult</h2><p><strong>[v4.1.0新增]</strong></p><h3 id="matchingresult-matches" tabindex="-1"><a class="header-anchor" href="#matchingresult-matches" aria-hidden="true">#</a> MatchingResult.matches</h3><ul><li>{Array} 匹配结果的数组。</li></ul><p>数组的元素是一个Match对象：</p><ul><li><code>point</code> {Point} 匹配位置</li><li><code>similarity</code> {number} 相似度</li></ul><p>例如:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> result <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">matchTemplate</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> template<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">100</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
result<span class="token punctuation">.</span>matches<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">match</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;point = &quot;</span> <span class="token operator">+</span> match<span class="token punctuation">.</span>point <span class="token operator">+</span> <span class="token string">&quot;, similarity = &quot;</span> <span class="token operator">+</span> match<span class="token punctuation">.</span>similarity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="matchingresult-points" tabindex="-1"><a class="header-anchor" href="#matchingresult-points" aria-hidden="true">#</a> MatchingResult.points</h3><ul><li>{Array} 匹配位置的数组。</li></ul><h3 id="matchingresult-first" tabindex="-1"><a class="header-anchor" href="#matchingresult-first" aria-hidden="true">#</a> MatchingResult.first()</h3><ul><li>返回 {Match}</li></ul><p>第一个匹配结果。如果没有任何匹配，则返回<code>null</code>。</p><h3 id="matchingresult-last" tabindex="-1"><a class="header-anchor" href="#matchingresult-last" aria-hidden="true">#</a> MatchingResult.last()</h3><ul><li>返回 {Match}</li></ul><p>最后一个匹配结果。如果没有任何匹配，则返回<code>null</code>。</p><h3 id="matchingresult-leftmost" tabindex="-1"><a class="header-anchor" href="#matchingresult-leftmost" aria-hidden="true">#</a> MatchingResult.leftmost()</h3><ul><li>返回 {Match}</li></ul><p>位于大图片最左边的匹配结果。如果没有任何匹配，则返回<code>null</code>。</p><h3 id="matchingresult-topmost" tabindex="-1"><a class="header-anchor" href="#matchingresult-topmost" aria-hidden="true">#</a> MatchingResult.topmost()</h3><ul><li>返回 {Match}</li></ul><p>位于大图片最上边的匹配结果。如果没有任何匹配，则返回<code>null</code>。</p><h3 id="matchingresult-rightmost" tabindex="-1"><a class="header-anchor" href="#matchingresult-rightmost" aria-hidden="true">#</a> MatchingResult.rightmost()</h3><ul><li>返回 {Match}</li></ul><p>位于大图片最右边的匹配结果。如果没有任何匹配，则返回<code>null</code>。</p><h3 id="matchingresult-bottommost" tabindex="-1"><a class="header-anchor" href="#matchingresult-bottommost" aria-hidden="true">#</a> MatchingResult.bottommost()</h3><ul><li>返回 {Match}</li></ul><p>位于大图片最下边的匹配结果。如果没有任何匹配，则返回<code>null</code>。</p><h3 id="matchingresult-best" tabindex="-1"><a class="header-anchor" href="#matchingresult-best" aria-hidden="true">#</a> MatchingResult.best()</h3><ul><li>返回 {Match}</li></ul><p>相似度最高的匹配结果。如果没有任何匹配，则返回<code>null</code>。</p><h3 id="matchingresult-worst" tabindex="-1"><a class="header-anchor" href="#matchingresult-worst" aria-hidden="true">#</a> MatchingResult.worst()</h3><ul><li>返回 {Match}</li></ul><p>相似度最低的匹配结果。如果没有任何匹配，则返回<code>null</code>。</p><h3 id="matchingresult-sortby-cmp" tabindex="-1"><a class="header-anchor" href="#matchingresult-sortby-cmp" aria-hidden="true">#</a> MatchingResult.sortBy(cmp)</h3><ul><li><code>cmp</code> {Function} | {string} 比较函数，或者是一个字符串表示排序方向。例如&quot;left&quot;表示将匹配结果按匹配位置从左往右排序、&quot;top&quot;表示将匹配结果按匹配位置从上往下排序，&quot;left-top&quot;表示将匹配结果按匹配位置从左往右、从上往下排序。方向包括<code>left</code>（左）, <code>top</code> （上）, <code>right</code> （右）, <code>bottom</code>（下）。</li><li>{MatchingResult}</li></ul><p>对匹配结果进行排序，并返回排序后的结果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> result <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">matchTemplate</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> template<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">100</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">sortBy</span><span class="token punctuation">(</span><span class="token string">&quot;top-right&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="image" tabindex="-1"><a class="header-anchor" href="#image" aria-hidden="true">#</a> Image</h2><p>表示一张图片，可以是截图的图片，或者本地读取的图片，或者从网络获取的图片。</p><h3 id="image-getwidth" tabindex="-1"><a class="header-anchor" href="#image-getwidth" aria-hidden="true">#</a> Image.getWidth()</h3><p>返回以像素为单位图片宽度。</p><h3 id="image-getheight" tabindex="-1"><a class="header-anchor" href="#image-getheight" aria-hidden="true">#</a> Image.getHeight()</h3><p>返回以像素为单位的图片高度。</p><h3 id="image-saveto-path" tabindex="-1"><a class="header-anchor" href="#image-saveto-path" aria-hidden="true">#</a> Image.saveTo(path)</h3><ul><li><code>path</code> {string} 路径</li></ul><p>把图片保存到路径path。（如果文件存在则覆盖）</p><h3 id="image-pixel-x-y" tabindex="-1"><a class="header-anchor" href="#image-pixel-x-y" aria-hidden="true">#</a> Image.pixel(x, y)</h3><ul><li><code>x</code> {number} 横坐标</li><li><code>y</code> {number} 纵坐标</li></ul><p>返回图片image在点(x, y)处的像素的ARGB值。</p><p>该值的格式为0xAARRGGBB，是一个&quot;32位整数&quot;(虽然JavaScript中并不区分整数类型和其他数值类型)。</p><p>坐标系以图片左上角为原点。以图片左侧边为y轴，上侧边为x轴。</p><h2 id="point" tabindex="-1"><a class="header-anchor" href="#point" aria-hidden="true">#</a> Point</h2><p>findColor, findImage返回的对象。表示一个点（坐标）。</p><h3 id="point-x" tabindex="-1"><a class="header-anchor" href="#point-x" aria-hidden="true">#</a> Point.x</h3><p>横坐标。</p><h3 id="point-y" tabindex="-1"><a class="header-anchor" href="#point-y" aria-hidden="true">#</a> Point.y</h3><p>纵坐标。</p><h2 id="colormapping" tabindex="-1"><a class="header-anchor" href="#colormapping" aria-hidden="true">#</a> ColorMapping</h2><p>通过颜色映射的实现一种找色方式，对于同一张图找多次色，每次找色相比images模块里的函数非常快，只是需要相比一般找色需要一个初始化过程。</p><p>注意！ColorMapping仅能使用<strong>截图的图片对象</strong>初始化颜色映射。</p><p>初始化方式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 申请截图权限</span>
$images<span class="token punctuation">.</span><span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 初始化ColorMapping</span>
<span class="token keyword">let</span> ColorMapping <span class="token operator">=</span> $colors<span class="token punctuation">.</span>mapping<span class="token punctuation">;</span>
<span class="token comment">// 创建ColorMapping实例</span>
<span class="token keyword">let</span> cm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColorMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 截屏</span>
<span class="token keyword">let</span> img <span class="token operator">=</span> $images<span class="token punctuation">.</span><span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 初始化颜色映射</span>
cm<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用完后及时回收</span>
cm<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不想手动回收，可以用ColorMapping的单例，这个单例会自动在脚本结束时回收。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 申请截图权限</span>
$images<span class="token punctuation">.</span><span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 初始化ColorMapping</span>
<span class="token keyword">let</span> ColorMapping <span class="token operator">=</span> $colors<span class="token punctuation">.</span>mapping<span class="token punctuation">;</span>
<span class="token comment">// 创建ColorMapping实例</span>
<span class="token keyword">let</span> cm <span class="token operator">=</span> ColorMapping<span class="token punctuation">.</span>singleton<span class="token punctuation">;</span>
<span class="token comment">// 截屏</span>
<span class="token keyword">let</span> img <span class="token operator">=</span> $images<span class="token punctuation">.</span><span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 初始化颜色映射</span>
cm<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 找色</span>
cm<span class="token punctuation">.</span><span class="token function">findColor</span><span class="token punctuation">(</span><span class="token string">&quot;#ffffff&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="colormapping-singleton" tabindex="-1"><a class="header-anchor" href="#colormapping-singleton" aria-hidden="true">#</a> ColorMapping.singleton</h3><ul><li>{ColorMapping}</li></ul><p>ColorMapping的全局单例对象。</p><h3 id="colormapping-reset-img" tabindex="-1"><a class="header-anchor" href="#colormapping-reset-img" aria-hidden="true">#</a> ColorMapping.reset(img)</h3><ul><li><code>img</code> {Image} 截图</li></ul><p>此操作会重新初始化颜色映射的数据。</p><h3 id="colormapping-recycle" tabindex="-1"><a class="header-anchor" href="#colormapping-recycle" aria-hidden="true">#</a> ColorMapping.recycle()</h3><p>此操作会释放ColorMapping对象。</p><h3 id="colormapping-findcolor-color-options" tabindex="-1"><a class="header-anchor" href="#colormapping-findcolor-color-options" aria-hidden="true">#</a> ColorMapping.findColor(color[, options])</h3><ul><li><code>color</code> {number} | {string} 要检测的颜色</li><li><code>options</code> {Object} 选项包括： <ul><li><code>region</code> {Array} 找色区域。是一个两个或四个元素的数组。(region[0], region[1])表示找色区域的左上角；region[2]*region[3]表示找色区域的宽高。如果只有region只有两个元素，则找色区域为(region[0], region[1])到图片右下角。如果不指定region选项，则找色区域为整张图片。</li><li><code>similarity</code> {number} 找色时颜色相似度，范围为0~1（越大越相似，1为颜色相等，0为任何颜色都能匹配）。</li><li><code>threshold</code> {number} 找色时颜色相似度的临界值，范围为0 ~ 255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255 。相似度与阈值二选一，同时存在则以相似度为准。</li></ul></li><li>返回 {Point}</li></ul><p>在图片中寻找颜色color。找到时返回找到的点Point，找不到时返回null。</p><p>一个同一张图多次找色的例子如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 申请截图权限</span>
$images<span class="token punctuation">.</span><span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 初始化ColorMapping</span>
<span class="token keyword">let</span> ColorMapping <span class="token operator">=</span> $colors<span class="token punctuation">.</span>mapping<span class="token punctuation">;</span>
<span class="token comment">// 创建ColorMapping实例</span>
<span class="token keyword">let</span> cm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColorMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用ColorMapping找色</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 截屏</span>
    <span class="token keyword">let</span> img <span class="token operator">=</span> $images<span class="token punctuation">.</span><span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 初始化颜色映射</span>
    cm<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> p1 <span class="token operator">=</span> cm<span class="token punctuation">.</span><span class="token function">findColor</span><span class="token punctuation">(</span><span class="token string">&quot;#ffffff&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;白色点坐标&quot;</span> <span class="token operator">+</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> p2 <span class="token operator">=</span> cm<span class="token punctuation">.</span><span class="token function">findColor</span><span class="token punctuation">(</span><span class="token string">&quot;#000000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;黑色点坐标&quot;</span> <span class="token operator">+</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 释放ColorMapping</span>
cm<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个区域找色的例子如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 申请截图权限</span>
$images<span class="token punctuation">.</span><span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 初始化ColorMapping</span>
<span class="token keyword">let</span> ColorMapping <span class="token operator">=</span> $colors<span class="token punctuation">.</span>mapping<span class="token punctuation">;</span>
<span class="token comment">// 创建ColorMapping实例</span>
<span class="token keyword">let</span> cm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColorMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 截屏</span>
<span class="token keyword">let</span> img <span class="token operator">=</span> $images<span class="token punctuation">.</span><span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 初始化颜色映射</span>
cm<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用ColorMapping找色，指定找色区域为在位置(400, 500)的宽为300长为200的区域，指定找色临界值为4</span>
<span class="token keyword">let</span> point <span class="token operator">=</span> cm<span class="token punctuation">.</span><span class="token function">findColor</span><span class="token punctuation">(</span><span class="token string">&quot;#00ff00&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">region</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
     <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">4</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;找到啦:&quot;</span> <span class="token operator">+</span> point<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;没找到&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 释放ColorMapping</span>
cm<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="colormapping-findmulticolors-firstcolor-colors-options" tabindex="-1"><a class="header-anchor" href="#colormapping-findmulticolors-firstcolor-colors-options" aria-hidden="true">#</a> ColorMapping.findMultiColors(firstColor, colors, options)</h3><ul><li><code>firstColor</code> {number} | {string} 第一个点的颜色</li><li><code>colors</code> {Array} 表示剩下的点相对于第一个点的位置和颜色的数组，数组的每个元素为[x, y, color]</li><li><code>options</code> {Object} 选项，包括： <ul><li><code>region</code> {Array} 找色区域。是一个两个或四个元素的数组。(region[0], region[1])表示找色区域的左上角；region[2]*region[3]表示找色区域的宽高。如果只有region只有两个元素，则找色区域为(region[0], region[1])到图片右下角。如果不指定region选项，则找色区域为整张图片。</li><li><code>threshold</code> {number} 找色时颜色相似度的临界值，范围为0 ~ 255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255。</li></ul></li><li>返回 {Point}</li></ul><p>多点找色，与images.findMultiColors类似,但多次在同一张图片中找色速度极快。</p><p>一个同一张图片多次多点找色的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 申请截图权限</span>
$images<span class="token punctuation">.</span><span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 初始化ColorMapping</span>
<span class="token keyword">let</span> ColorMapping <span class="token operator">=</span> $colors<span class="token punctuation">.</span>mapping<span class="token punctuation">;</span>
<span class="token comment">// 创建ColorMapping实例</span>
<span class="token keyword">let</span> cm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColorMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 截屏</span>
<span class="token keyword">let</span> img <span class="token operator">=</span> $images<span class="token punctuation">.</span><span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 初始化颜色映射</span>
cm<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用ColorMapping多点找色</span>
<span class="token keyword">let</span> p1 <span class="token operator">=</span> cm<span class="token punctuation">.</span><span class="token function">findMultiColors</span><span class="token punctuation">(</span><span class="token string">&quot;#ff00ff&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&quot;#ffffff&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">&quot;#000000&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> p2 <span class="token operator">=</span> cm<span class="token punctuation">.</span><span class="token function">findMultiColors</span><span class="token punctuation">(</span><span class="token string">&quot;#ff00ff&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&quot;#ffffff&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">&quot;#000000&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;p1&quot;</span> <span class="token operator">+</span> p1 <span class="token operator">+</span> <span class="token string">&quot;p2&quot;</span> <span class="token operator">+</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 释放ColorMapping</span>
cm<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="colormapping-findallpointsforcolor-color-options" tabindex="-1"><a class="header-anchor" href="#colormapping-findallpointsforcolor-color-options" aria-hidden="true">#</a> ColorMapping.findAllPointsForColor(color, options)</h3><ul><li><code>color</code> {number} | {string} 要检测的颜色</li><li><code>options</code> {Object} 选项包括： <ul><li><code>region</code> {Array} 找色区域。是一个两个或四个元素的数组。(region[0], region[1])表示找色区域的左上角；region[2]*region[3]表示找色区域的宽高。如果只有region只有两个元素，则找色区域为(region[0], region[1])到图片右下角。如果不指定region选项，则找色区域为整张图片。</li><li><code>similarity</code> {number} 找色时颜色相似度，范围为0~1（越大越相似，1为颜色相等，0为任何颜色都能匹配）。</li><li><code>threshold</code> {number} 找色时颜色相似度的临界值，范围为0—255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255 。相似度与阈值二选一，同时存在则以相似度为准。</li></ul></li><li>返回 {Array}</li></ul><p>在图片中寻找所有颜色为color的点。找到时返回找到的点Point的数组，找不到时返回null。</p><p>找出所有白色点和所有黑色点的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 申请截图权限</span>
$images<span class="token punctuation">.</span><span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 初始化ColorMapping</span>
<span class="token keyword">let</span> ColorMapping <span class="token operator">=</span> $colors<span class="token punctuation">.</span>mapping<span class="token punctuation">;</span>
<span class="token comment">// 创建ColorMapping实例</span>
<span class="token keyword">let</span> cm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColorMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 截屏</span>
<span class="token keyword">let</span> img <span class="token operator">=</span> $images<span class="token punctuation">.</span><span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 初始化颜色映射</span>
cm<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用ColorMapping多点找色</span>
<span class="token keyword">let</span> whitePoints <span class="token operator">=</span> cm<span class="token punctuation">.</span><span class="token function">findAllPointsForColor</span><span class="token punctuation">(</span><span class="token string">&quot;#ffffff&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> blackPoints <span class="token operator">=</span> cm<span class="token punctuation">.</span><span class="token function">findAllPointsForColor</span><span class="token punctuation">(</span><span class="token string">&quot;#000000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>whitePoints <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;白色点有&quot;</span> <span class="token operator">+</span> whitePoints<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">&quot;个&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;未找到白色点&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>blackPoints <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;黑色点有&quot;</span> <span class="token operator">+</span> blackPoints<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">&quot;个&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;未找到黑色点&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 释放ColorMapping</span>
cm<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,97);function ds(ms,ks){const e=i("ExternalLinkIcon"),o=i("RouterLink");return l(),u("div",null,[d,n("ul",null,[m,k,n("li",null,[g,s(' {string} 插值方法，可选，默认为"LINEAR"（线性插值），可选的值有： '),n("ul",null,[h,v,b,f,n("li",null,[y,s(" Lanczos插值 参见"),n("a",_,[s("InterpolationFlags"),a(e)])])])]),q]),x,n("p",null,[s("参见"),n("a",w,[s("Imgproc.resize"),a(e)]),s("。")]),C,j,n("ul",null,[I,R,M,n("li",null,[A,s(' {string} 插值方法，可选，默认为"LINEAR"（线性插值），可选的值有： '),n("ul",null,[S,O,T,E,n("li",null,[B,s(" Lanczos插值 参见"),n("a",F,[s("InterpolationFlags"),a(e)])])])]),N]),P,n("p",null,[s("参见"),n("a",L,[s("Imgproc.resize"),a(e)]),s("。")]),$,n("ul",null,[z,G,V,n("li",null,[U,s(' {string} 阈值化类型，默认为"BINARY"，参见'),n("a",D,[s("ThresholdTypes"),a(e)]),s(", 可选的值: "),Y]),H]),X,n("p",null,[s("可以参考有关博客（比如"),n("a",Q,[s("threshold函数的使用"),a(e)]),s("）或者OpenCV文档"),n("a",Z,[s("threshold"),a(e)]),s("。")]),J,n("p",null,[s("可以参考有关博客（比如"),n("a",K,[s("threshold与adaptiveThreshold"),a(e)]),s("）或者OpenCV文档"),n("a",W,[s("adaptiveThreshold"),a(e)]),s("。")]),nn,sn,n("ul",null,[an,n("li",null,[n("p",null,[en,s(" {string} 颜色空间转换的类型，可选的值有一共有205个（参见"),n("a",tn,[s("ColorConversionCodes"),a(e)]),s("），这里只列出几个：")]),on]),pn,cn]),ln,n("p",null,[s("可以参考有关博客（比如"),n("a",un,[s("颜色空间转换"),a(e)]),s("）或者OpenCV文档"),n("a",rn,[s("cvtColor"),a(e)]),s("。")]),dn,n("p",null,[s("可以参考有关博客（比如"),n("a",mn,[s("实现图像平滑处理"),a(e)]),s("）或者OpenCV文档"),n("a",kn,[s("blur"),a(e)]),s("。")]),gn,n("p",null,[s("可以参考有关博客（比如"),n("a",hn,[s("实现图像平滑处理"),a(e)]),s("）或者OpenCV文档"),n("a",vn,[s("blur"),a(e)]),s("。")]),bn,n("p",null,[s("可以参考有关博客（比如"),n("a",fn,[s("实现图像平滑处理"),a(e)]),s("）或者OpenCV文档"),n("a",yn,[s("GaussianBlur"),a(e)]),s("。")]),_n,n("ul",null,[n("li",null,[a(o,{to:"/v8/images.html#images-findcolor-image-color-options"},{default:p(()=>[s("找色、多点找色")]),_:1}),s("：通过描述颜色或颜色路径匹配图片中的像素，效率较高")]),n("li",null,[a(o,{to:"/v8/images.html#colormapping"},{default:p(()=>[s("基于ColorMaping的找色或多点找色")]),_:1}),s("：适合每次截图都有多次找色、多点找色的情况，可以进一步提升找色效率，效率最高")]),n("li",null,[a(o,{to:"/v8/images.html#images-findimage-img-template-options"},{default:p(()=>[s("找图（模板匹配）")]),_:1}),s("：通过在大图中依次匹配小图，搜索小图的位置，效率中等，但不同分辨率兼容性较差")]),n("li",null,[a(o,{to:"/v8/images.html#images-detectandcomputefeatures-img-options"},{default:p(()=>[qn]),_:1}),s("：通过计算大图和小图的特征点，匹配特征而计算小图的位置，效率比普通找图低，但兼容分辨率、旋转等变化")])]),xn,n("p",null,[n("strong",null,[s("["),n("a",wn,[s("Pro 8.0新增"),a(e)]),s("]")])]),Cn,n("p",null,[n("strong",null,[s("["),n("a",jn,[s("Pro 8.8.12新增"),a(e)]),s("]")])]),In,n("p",null,[n("strong",null,[s("["),n("a",Rn,[s("Pro 8.8.12新增"),a(e)]),s("]")])]),Mn,n("ul",null,[An,n("li",null,[Sn,s(" {string} 颜色匹配算法，包括: "),n("ul",null,[On,Tn,En,n("li",null,[s('"rgb+": 加权rgb欧拉距离匹配('),n("a",Bn,[s("LAB Delta E"),a(e)]),s(")。")]),Fn])])]),Nn,n("ul",null,[Pn,Ln,n("li",null,[$n,s(" {Object} 找图选项： "),n("ul",null,[zn,Gn,Vn,n("li",null,[Un,s(" {boolean} 是否使用透明模板找图。此选项开启后，传入的template参数可以是一个透明背景的图片对象用于匹配。此选项为 "),n("strong",null,[s("["),n("a",Dn,[s("Pro 8.0新增"),a(e)]),s("]")]),s(" 。")]),Yn])]),Hn]),Xn,n("ul",null,[Qn,n("li",null,[s("返回 {"),a(o,{to:"/v8/images.html#imagefeatures"},{default:p(()=>[s("ImageFeatures")]),_:1}),s("} 保存图片特征的对象，不用时需要调用"),Zn,s("回收")])]),n("p",null,[s("对给定图片计算特征，将图片计算后的特征信息返回。该特征信息对象可用于后续使用"),a(o,{to:"/v8/images.html#images-matchfeatures-scene-object-options"},{default:p(()=>[s("matchFeatures")]),_:1}),s("函数做特征匹配。")]),Jn,Kn,Wn,n("ul",null,[ns,n("li",null,[s("返回 {"),a(o,{to:"/v8/images.html#objectframe"},{default:p(()=>[s("ObjectFrame")]),_:1}),s("} | {null} 小图在大图中的匹配位置，若未找到则返回"),ss])]),as,n("ul",null,[n("li",null,[s("{"),a(o,{to:"/v8/images.html#point"},{default:p(()=>[s("Point")]),_:1}),s("}")])]),es,ts,n("ul",null,[n("li",null,[s("{"),a(o,{to:"/v8/images.html#point"},{default:p(()=>[s("Point")]),_:1}),s("}")])]),os,ps,n("ul",null,[n("li",null,[s("{"),a(o,{to:"/v8/images.html#point"},{default:p(()=>[s("Point")]),_:1}),s("}")])]),is,cs,n("ul",null,[n("li",null,[s("{"),a(o,{to:"/v8/images.html#point"},{default:p(()=>[s("Point")]),_:1}),s("}")])]),ls,us,n("ul",null,[n("li",null,[s("{"),a(o,{to:"/v8/images.html#point"},{default:p(()=>[s("Point")]),_:1}),s("}")])]),rs])}const vs=c(r,[["render",ds],["__file","images.html.vue"]]);export{vs as default};
