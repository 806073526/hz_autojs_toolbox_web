import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c,d as a,e as n,b as e,f as t}from"./app-ff93bfbc.js";const l={},r=t(`<p>app模块提供一系列函数，用于使用其他应用、与其他应用交互。例如发送意图、打开文件、发送邮件等。</p><p>同时提供了方便的进阶函数startActivity和sendBroadcast，用他们可完成app模块没有内置的和其他应用的交互。</p><h2 id="app-versioncode" tabindex="-1"><a class="header-anchor" href="#app-versioncode" aria-hidden="true">#</a> app.versionCode</h2><ul><li>{number}</li></ul><p>当前软件版本号，整数值。例如160, 256等。</p><p>如果在Auto.js中运行则为Auto.js的版本号；在打包的软件中则为打包软件的版本号。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">toastLog</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>versionCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="app-versionname" tabindex="-1"><a class="header-anchor" href="#app-versionname" aria-hidden="true">#</a> app.versionName</h2><ul><li>{string}</li></ul><p>当前软件的版本名称，例如&quot;3.0.0 Beta&quot;。</p><p>如果在Auto.js中运行则为Auto.js的版本名称；在打包的软件中则为打包软件的版本名称。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">toastLog</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>versionName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="app-autojs-versioncode" tabindex="-1"><a class="header-anchor" href="#app-autojs-versioncode" aria-hidden="true">#</a> app.autojs.versionCode</h2><ul><li>{number}</li></ul><p>Auto.js版本号，整数值。例如160, 256等。</p><h2 id="app-autojs-versionname" tabindex="-1"><a class="header-anchor" href="#app-autojs-versionname" aria-hidden="true">#</a> app.autojs.versionName</h2><ul><li>{string}</li></ul><p>Auto.js版本名称，例如&quot;3.0.0 Beta&quot;。</p><h2 id="app-launchapp-appname" tabindex="-1"><a class="header-anchor" href="#app-launchapp-appname" aria-hidden="true">#</a> app.launchApp(appName)</h2><ul><li><code>appName</code> {string} 应用名称</li></ul><p>通过应用名称启动应用。如果该名称对应的应用不存在，则返回false; 否则返回true。如果该名称对应多个应用，则只启动其中某一个。</p><p>该函数也可以作为全局函数使用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">launchApp</span><span class="token punctuation">(</span><span class="token string">&quot;Auto.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="app-launch-packagename" tabindex="-1"><a class="header-anchor" href="#app-launch-packagename" aria-hidden="true">#</a> app.launch(packageName)</h2><ul><li><code>packageName</code> {string} 应用包名</li></ul><p>通过应用包名启动应用。如果该包名对应的应用不存在，则返回false；否则返回true。</p><p>该函数也可以作为全局函数使用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//启动微信</span>
<span class="token function">launch</span><span class="token punctuation">(</span><span class="token string">&quot;com.tencent.mm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="app-launchpackage-packagename" tabindex="-1"><a class="header-anchor" href="#app-launchpackage-packagename" aria-hidden="true">#</a> app.launchPackage(packageName)</h2><ul><li><code>packageName</code> {string} 应用包名</li></ul><p>相当于<code>app.launch(packageName)</code>。</p><h2 id="app-getpackagename-appname" tabindex="-1"><a class="header-anchor" href="#app-getpackagename-appname" aria-hidden="true">#</a> app.getPackageName(appName)</h2><ul><li><code>appName</code> {string} 应用名称</li></ul><p>获取应用名称对应的已安装的应用的包名。如果该找不到该应用，返回null；如果该名称对应多个应用，则只返回其中某一个的包名。</p><p>该函数也可以作为全局函数使用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token string">&quot;QQ&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回&quot;com.tencent.mobileqq&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="app-getappname-packagename" tabindex="-1"><a class="header-anchor" href="#app-getappname-packagename" aria-hidden="true">#</a> app.getAppName(packageName)</h2><ul><li><code>packageName</code> {string} 应用包名</li></ul><p>获取应用包名对应的已安装的应用的名称。如果该找不到该应用，返回null。</p><p>该函数也可以作为全局函数使用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token string">&quot;com.tencent.mobileqq&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回&quot;QQ&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="app-openappsetting-packagename" tabindex="-1"><a class="header-anchor" href="#app-openappsetting-packagename" aria-hidden="true">#</a> app.openAppSetting(packageName)</h2><ul><li><code>packageName</code> {string} 应用包名</li></ul><p>打开应用的详情页(设置页)。如果找不到该应用，返回false; 否则返回true。</p><p>该函数也可以作为全局函数使用。</p><h2 id="app-viewfile-path" tabindex="-1"><a class="header-anchor" href="#app-viewfile-path" aria-hidden="true">#</a> app.viewFile(path)</h2><ul><li><code>path</code> {string} 文件路径</li></ul><p>用其他应用查看文件。文件不存在的情况由查看文件的应用处理。</p><p>如果找不出可以查看该文件的应用，则抛出<code>ActivityNotException</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//查看文本文件</span>
app<span class="token punctuation">.</span><span class="token function">viewFile</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="app-editfile-path" tabindex="-1"><a class="header-anchor" href="#app-editfile-path" aria-hidden="true">#</a> app.editFile(path)</h2><ul><li><code>path</code> {string} 文件路径</li></ul><p>用其他应用编辑文件。文件不存在的情况由编辑文件的应用处理。</p><p>如果找不出可以编辑该文件的应用，则抛出<code>ActivityNotException</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//编辑文本文件</span>
app<span class="token punctuation">.</span><span class="token function">editFile</span><span class="token punctuation">(</span>&quot;<span class="token operator">/</span>sdcard<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">.</span>txt<span class="token operator">/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="app-uninstall-packagename" tabindex="-1"><a class="header-anchor" href="#app-uninstall-packagename" aria-hidden="true">#</a> app.uninstall(packageName)</h2><ul><li><code>packageName</code> {string} 应用包名</li></ul><p>卸载应用。执行后会会弹出卸载应用的提示框。如果该包名的应用未安装，由应用卸载程序处理，可能弹出&quot;未找到应用&quot;的提示。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//卸载QQ</span>
app<span class="token punctuation">.</span><span class="token function">uninstall</span><span class="token punctuation">(</span><span class="token string">&quot;com.tencent.mobileqq&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="app-openurl-url" tabindex="-1"><a class="header-anchor" href="#app-openurl-url" aria-hidden="true">#</a> app.openUrl(url)</h2><ul><li><code>url</code> {string} 网站的Url，如果不以&quot;http://&quot;或&quot;https://&quot;开头则默认是&quot;http://&quot;。</li></ul><p>用浏览器打开网站url。</p><p>如果没有安装浏览器应用，则抛出<code>ActivityNotException</code>。</p><h2 id="app-sendemail-options" tabindex="-1"><a class="header-anchor" href="#app-sendemail-options" aria-hidden="true">#</a> app.sendEmail(options)</h2><ul><li><code>options</code> {Object} 发送邮件的参数。包括:</li><li><code>email</code> {string} | {Array} 收件人的邮件地址。如果有多个收件人，则用字符串数组表示</li><li><code>cc</code> {string} | {Array} 抄送收件人的邮件地址。如果有多个抄送收件人，则用字符串数组表示</li><li><code>bcc</code> {string} | {Array} 密送收件人的邮件地址。如果有多个密送收件人，则用字符串数组表示</li><li><code>subject</code> {string} 邮件主题(标题)</li><li><code>text</code> {string} 邮件正文</li><li><code>attachment</code> {string} 附件的路径。</li></ul><p>根据选项options调用邮箱应用发送邮件。这些选项均是可选的。</p><p>如果没有安装邮箱应用，则抛出<code>ActivityNotException</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//发送邮件给10086@qq.com和10001@qq.com。</span>
app<span class="token punctuation">.</span><span class="token function">sendEmail</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;10086@qq.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;10001@qq.com&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">subject</span><span class="token operator">:</span> <span class="token string">&quot;这是一个邮件标题&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;这是邮件正文&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="app-startactivity-name" tabindex="-1"><a class="header-anchor" href="#app-startactivity-name" aria-hidden="true">#</a> app.startActivity(name)</h2><ul><li><code>name</code> {string} 活动名称，可选的值为: <ul><li><code>console</code> 日志界面</li><li><code>settings</code> 设置界面</li></ul></li></ul><p>启动Auto.js的特定界面。该函数在Auto.js内运行则会打开Auto.js内的界面，在打包应用中运行则会打开打包应用的相应界面。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token string">&quot;console&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="app-intent-options" tabindex="-1"><a class="header-anchor" href="#app-intent-options" aria-hidden="true">#</a> app.intent(options)</h2>`,73),d=a("p",null,[a("code",null,"options"),n(" {Object} 选项，包括：")],-1),u=a("code",null,"action",-1),v={href:"https://developer.android.com/reference/android/content/Intent.html#standard-activity-actions",target:"_blank",rel:"noopener noreferrer"},h=a("li",null,[a("p",null,[a("code",null,"type"),n(' {string} 意图的MimeType，表示和该意图直接相关的数据的类型，表示比如"text/plain"为纯文本类型。')])],-1),k=a("li",null,[a("p",null,[a("code",null,"data"),n(' {string} 意图的Data，表示和该意图直接相关的数据，是一个Uri, 可以是文件路径或者Url等。例如要打开一个文件, action为"android.intent.action.VIEW", data为"file:///sdcard/1.txt"。')])],-1),m=a("code",null,"category",-1),g={href:"https://developer.android.com/reference/android/content/Intent.html#standard-categories",target:"_blank",rel:"noopener noreferrer"},b=a("li",null,[a("p",null,[a("code",null,"packageName"),n(" {string} 目标包名")])],-1),q=a("li",null,[a("p",null,[a("code",null,"className"),n(" {string} 目标Activity或Service等组件的名称")])],-1),_=a("code",null,"extras",-1),f={href:"https://developer.android.com/reference/android/content/Intent.html#standard-extra-data",target:"_blank",rel:"noopener noreferrer"},y=a("code",null,"flags",-1),j=a("code",null,'["activity_new_task", "grant_read_uri_permission"]',-1),x={href:"https://developer.android.com/reference/android/content/Intent.html#setFlags(int)",target:"_blank",rel:"noopener noreferrer"},A=a("p",null,[a("strong",null,"[v4.1.0新增]")],-1),N=a("li",null,[a("p",null,[a("code",null,"root"),n(" {Boolean} 是否以root权限启动、发送该intent。使用该参数后，不能使用"),a("code",null,"context.startActivity()"),n("等方法，而应该直接使用诸如"),a("code",null,"app.startActivity({...\\})"),n("的方法。")]),a("p",null,[a("strong",null,"[v4.1.0新增]")])],-1),I=t(`<p>根据选项，构造一个意图Intent对象。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//打开应用来查看图片文件</span>
<span class="token keyword">var</span> i <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">intent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">action</span><span class="token operator">:</span> <span class="token string">&quot;VIEW&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;image/png&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&quot;file:///sdcard/1.png&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Intent(意图) 是一个消息传递对象，您可以使用它从其他应用组件请求操作。尽管 Intent 可以通过多种方式促进组件之间的通信，但其基本用例主要包括以下三个：</p><ul><li>启动活动(Activity)： Activity 表示应用中的一个&quot;屏幕&quot;。例如应用主入口都是一个Activity，应用的功能通常也以Activity的形式独立，例如微信的主界面、朋友圈、聊天窗口都是不同的Activity。通过将 Intent 传递给 startActivity()，您可以启动新的 Activity 实例。Intent 描述了要启动的 Activity，并携带了任何必要的数据。</li><li>启动服务(Service)： Service 是一个不使用用户界面而在后台执行操作的组件。通过将 Intent 传递给 startService()，您可以启动服务执行一次性操作（例如，下载文件）。Intent 描述了要启动的服务，并携带了任何必要的数据。</li><li>传递广播： 广播是任何应用均可接收的消息。系统将针对系统事件（例如：系统启动或设备开始充电时）传递各种广播。通过将 Intent 传递给 sendBroadcast()、sendOrderedBroadcast() 或 sendStickyBroadcast()，您可以将广播传递给其他应用。</li></ul><p>需要注意的是，除非应用专门暴露Activity出来，否则在没有root权限的情况下使用intent是无法跳转到特定Activity、应用的特定界面的。例如我们能通过Intent跳转到QQ的分享界面，是因为QQ对外暴露了分享的Activity；而在没有root权限的情况下，我们无法通过intent跳转到QQ的设置界面，因为QQ并没有暴露这个Activity。</p><p>但如果有root权限，则在intent的参数加上<code>&quot;root&quot;: true</code>即可。例如使用root权限跳转到Auto.js的设置界面为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">packageName</span><span class="token operator">:</span> <span class="token string">&quot;org.autojs.autojs&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&quot;org.autojs.autojs.ui.settings.SettingsActivity_&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，关于intent的参数如何获取的问题，一些intent是意外发现并且在网络中传播的（例如跳转QQ聊天窗口是因为QQ给网页提供了跳转到客服QQ的方法），如果要自己获取活动的intent的参数，可以通过例如&quot;intent记录&quot;，&quot;隐式启动&quot;等应用拦截内部intent或者查询暴露的intent。其中拦截内部intent需要XPosed框架，或者可以通过反编译等手段获取参数。总之，没有简单直接的方法。</p>`,9),w={href:"https://www.baidu.com/s?wd=android",target:"_blank",rel:"noopener noreferrer"},U={href:"https://developer.android.com/guide/components/intents-filters.html#Types",target:"_blank",rel:"noopener noreferrer"},Q=t(`<h2 id="app-startactivity-options" tabindex="-1"><a class="header-anchor" href="#app-startactivity-options" aria-hidden="true">#</a> app.startActivity(options)</h2><ul><li><code>options</code> {Object} 选项</li></ul><p>根据选项构造一个Intent，并启动该Activity。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">action</span><span class="token operator">:</span> <span class="token string">&quot;SEND&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&quot;file:///sdcard/1.txt&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="app-sendbroadcast-options" tabindex="-1"><a class="header-anchor" href="#app-sendbroadcast-options" aria-hidden="true">#</a> app.sendBroadcast(options)</h2><ul><li><code>options</code> {Object} 选项</li></ul><p>根据选项构造一个Intent，并发送该广播。</p><h2 id="app-startservice-options" tabindex="-1"><a class="header-anchor" href="#app-startservice-options" aria-hidden="true">#</a> app.startService(options)</h2><ul><li><code>options</code> {Object} 选项</li></ul><p>根据选项构造一个Intent，并启动该服务。</p><h2 id="app-sendbroadcast-name" tabindex="-1"><a class="header-anchor" href="#app-sendbroadcast-name" aria-hidden="true">#</a> app.sendBroadcast(name)</h2><p><strong>[v4.1.0新增]</strong></p><ul><li><code>name</code> {string} 特定的广播名称，包括： <ul><li><code>inspect_layout_hierarchy</code> 布局层次分析</li><li><code>inspect_layout_bounds</code> 布局范围</li></ul></li></ul><p>发送以上特定名称的广播可以触发Auto.js的布局分析，方便脚本调试。这些广播在Auto.js发送才有效，在打包的脚本上运行将没有任何效果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">sendBroadcast</span><span class="token punctuation">(</span><span class="token string">&quot;inspect_layout_bounds&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="app-intenttoshell-options" tabindex="-1"><a class="header-anchor" href="#app-intenttoshell-options" aria-hidden="true">#</a> app.intentToShell(options)</h2><p><strong>[v4.1.0新增]</strong></p><ul><li><code>options</code> {Object} 选项</li></ul><p>根据选项构造一个Intent，转换为对应的shell的intent命令的参数。</p><p>例如:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">shell</span><span class="token punctuation">(</span><span class="token string">&quot;am start &quot;</span> <span class="token operator">+</span> app<span class="token punctuation">.</span><span class="token function">intentToShell</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">packageName</span><span class="token operator">:</span> <span class="token string">&quot;org.autojs.autojs&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&quot;org.autojs.autojs.ui.settings.SettingsActivity_&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),E={href:"https://developer.android.com/studio/command-line/adb#IntentSpec",target:"_blank",rel:"noopener noreferrer"},S=a("h2",{id:"app-parseuri-uri",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#app-parseuri-uri","aria-hidden":"true"},"#"),n(" app.parseUri(uri)")],-1),B=a("p",null,[a("strong",null,"[v4.1.0新增]")],-1),O=a("code",null,"uri",-1),F={href:"https://www.autojs.org",target:"_blank",rel:"noopener noreferrer"},P={href:"https://developer.android.com/reference/android/net/Uri",target:"_blank",rel:"noopener noreferrer"},C=t('<p>解析uri字符串并返回相应的Uri对象。即使Uri格式错误，该函数也会返回一个Uri对象，但之后如果访问该对象的scheme, path等值可能因解析失败而返回<code>null</code>。</p><p>需要注意的是，在高版本Android上，由于系统限制直接在Uri暴露文件的绝对路径，因此如果uri字符串是文件<code>file://...</code>，返回的Uri会是诸如<code>content://...</code>的形式。</p><h2 id="app-geturiforfile-path" tabindex="-1"><a class="header-anchor" href="#app-geturiforfile-path" aria-hidden="true">#</a> app.getUriForFile(path)</h2><p><strong>[v4.1.0新增]</strong></p>',4),V=a("li",null,[a("code",null,"path"),n(' {string} 文件路径，例如"/sdcard/1.txt"')],-1),T={href:"https://developer.android.com/reference/android/net/Uri",target:"_blank",rel:"noopener noreferrer"},D=a("p",null,[n("从一个文件路径创建一个uri对象。需要注意的是，在高版本Android上，由于系统限制直接在Uri暴露文件的绝对路径，因此返回的Uri会是诸如"),a("code",null,"content://..."),n("的形式。")],-1),L=a("h2",{id:"app-getinstalledapps-options",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#app-getinstalledapps-options","aria-hidden":"true"},"#"),n(" app.getInstalledApps([options])")],-1),W={href:"https://pro.autojs.org/",target:"_blank",rel:"noopener noreferrer"},X=t(`<ul><li><code>options</code> {Object} 选项，包括： <ul><li><code>get</code>: 指定返回的应用信息中包含的信息 <ul><li><code>&quot;activities&quot;</code> 应用的Activity组件信息</li><li><code>&quot;configurations&quot;</code> 应用的硬件配置</li><li><code>&quot;gids&quot;</code> 应用的group id</li><li><code>&quot;instrumentation&quot;</code> 应用的Instrumentation信息</li><li><code>&quot;intent_filters&quot;</code> 应用的意图过滤</li><li><code>&quot;meta_data&quot;</code> 应用的元信息（默认）</li><li><code>&quot;permissions&quot;</code> 应用的权限信息</li><li><code>&quot;providers&quot;</code> 应用的ContentProvider组件信息</li><li><code>&quot;receivers&quot;</code> 应用的BroadcastReceiver组件信息</li><li><code>&quot;services&quot;</code> 应用的Service组件信息</li><li><code>&quot;shared_library_files&quot;</code> 应用的动态链接库文件信息</li><li><code>&quot;signatures&quot;</code> 应用的签名信息（已弃用</li><li><code>&quot;signing_certificates&quot;</code> 应用的签名信息</li><li><code>&quot;uri_permission_patterns&quot;</code></li><li><code>&quot;disabled_components&quot;</code> 被卸载的但保留了数据的应用</li><li><code>&quot;disabled_until_used_components&quot;</code> 禁用直到被使用的组件</li><li><code>&quot;uninstalled_packages&quot;</code> 被卸载的但保留了数据的应用</li></ul></li><li><code>match</code>: 指定要匹配的应用列表 <ul><li><code>&quot;uninstalled_packages&quot;</code> 被卸载的但保留了数据的应用</li><li><code>&quot;disabled_components&quot;</code> 被禁用的组件</li><li><code>&quot;disabled_until_used_components&quot;</code> 禁用直到被使用的组件</li><li><code>&quot;system_only&quot;</code> 只匹配系统应用</li><li><code>&quot;factory_only&quot;</code> 只匹配预装应用</li><li><code>&quot;apex&quot;</code> APEX应用</li></ul></li></ul></li><li>返回 {Array&lt;ApplicationInfo&gt;}</li></ul><p>返回为当前用户安装的所有应用程序包的列表。如果设置了match选项 <code>uninstalled_packages</code>，则包括被删除但保留了数据的应用程序。 获取安装的应用列表。</p><p>返回值是ApplicationInfo对象的数组。 如果没有安装任何应用，则返回一个空数组。</p><p>选项options的match选项用于指定要返回哪些应用程序，get选项用于指定返回的应用程序携带哪些信息。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取系统app</span>
<span class="token keyword">let</span> apps <span class="token operator">=</span> $app<span class="token punctuation">.</span><span class="token function">getInstalledApps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">get</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;meta_data&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">match</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;system_only&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apps<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function M(R,$){const s=p("ExternalLinkIcon");return i(),c("div",null,[r,a("ul",null,[a("li",null,[d,a("ul",null,[a("li",null,[a("p",null,[u,n(' {string} 意图的Action，指意图要完成的动作，是一个字符串常量，比如"android.intent.action.SEND"。当action以"android.intent.action"开头时，可以省略前缀，直接用"SEND"代替。参见'),a("a",v,[n("Actions"),e(s)]),n("。")])]),h,k,a("li",null,[a("p",null,[m,n(" {Array} 意图的类别。比较少用。参见"),a("a",g,[n("Categories"),e(s)]),n("。")])]),b,q,a("li",null,[a("p",null,[_,n(" {Object} 以键值对构成的这个Intent的Extras(额外信息)。提供该意图的其他信息，例如发送邮件时的邮件标题、邮件正文。参见"),a("a",f,[n("Extras"),e(s)]),n("。")])]),a("li",null,[a("p",null,[y,n(" {Array} intent的标识，字符串数组，例如"),j,n("。参见"),a("a",x,[n("Flags"),e(s)]),n("。")]),A]),N])])]),I,a("p",null,[n("更多信息，请百度[安卓Intent]("),a("a",w,[n("https://www.baidu.com/s?wd=android"),e(s)]),n(" Intent)或参考"),a("a",U,[n("Android指南: Intent"),e(s)]),n("。")]),Q,a("p",null,[n("参见"),a("a",E,[n("intent参数的规范"),e(s)]),n("。")]),S,B,a("ul",null,[a("li",null,[O,n(' {string} 一个代表Uri的字符串，例如"file:///sdcard/1.txt", "'),a("a",F,[n("https://www.autojs.org"),e(s)]),n('"')]),a("li",null,[n("返回 {Uri} 一个代表Uri的对象，参见"),a("a",P,[n("android.net.Uri"),e(s)]),n("。")])]),C,a("ul",null,[V,a("li",null,[n("返回 {Uri} 一个指向该文件的Uri的对象，参见"),a("a",T,[n("android.net.Uri"),e(s)]),n("。")])]),D,L,a("p",null,[n("** ["),a("a",W,[n("Pro 8.0.0新增"),e(s)]),n("] **")]),X])}const H=o(l,[["render",M],["__file","app.html.vue"]]);export{H as default};
