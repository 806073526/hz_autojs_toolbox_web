import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as l,d as n,b as e,w as t,e as a,f as o}from"./app-ff93bfbc.js";const r={},u=n("p",null,"创建本地存储的选项。",-1),d=n("p",null,[n("strong",null,[n("code",null,"参见")])],-1),k=n("h2",{id:"目录",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),a(" 目录")],-1),h=n("h3",{id:"属性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#属性","aria-hidden":"true"},"#"),a(" 属性")],-1),v=o('<h2 id="属性-1" tabindex="-1"><a class="header-anchor" href="#属性-1" aria-hidden="true">#</a> 属性</h2><h3 id="encryptionkey" tabindex="-1"><a class="header-anchor" href="#encryptionkey" aria-hidden="true">#</a> encryptionKey</h3><p>• <code>Optional</code> <strong>encryptionKey</strong>: <code>any</code></p><p>指定对本地存储的数据进行加密的Key，需要是为长度16, 32或64的字符串或二进制数据（分别对应AES128, AES256和AES512）</p><hr><h3 id="serializer" tabindex="-1"><a class="header-anchor" href="#serializer" aria-hidden="true">#</a> serializer</h3>',6),m=n("code",null,"Optional",-1),_=n("strong",null,"serializer",-1),f=n("code",null,"Serializer",-1),y=o(`<p>自定义本地存储的序列化器，默认是使用JSON进行序列化。以下是默认的JSON序列化器的代码，若要自定义序列化器可参数：</p><p><strong><code>示例</code></strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> jsonSerializer <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">valueToString</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">valueFromString</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> data<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function b(g,w){const s=c("RouterLink");return i(),l("div",null,[n("p",null,[e(s,{to:"/v9/generated/modules/datastore.html"},{default:t(()=>[a("datastore")]),_:1}),a(".DatastoreOptions")]),u,d,n("p",null,[e(s,{to:"/v9/generated/modules/datastore.html#createdatastore"},{default:t(()=>[a("createDatastore")]),_:1})]),k,h,n("ul",null,[n("li",null,[e(s,{to:"/v9/generated/interfaces/datastore.DatastoreOptions.html#encryptionkey"},{default:t(()=>[a("encryptionKey")]),_:1})]),n("li",null,[e(s,{to:"/v9/generated/interfaces/datastore.DatastoreOptions.html#serializer"},{default:t(()=>[a("serializer")]),_:1})])]),v,n("p",null,[a("• "),m,a(),_,a(": "),e(s,{to:"/v9/generated/interfaces/datastore.Serializer.html"},{default:t(()=>[f]),_:1})]),y])}const O=p(r,[["render",b],["__file","datastore.DatastoreOptions.html.vue"]]);export{O as default};
