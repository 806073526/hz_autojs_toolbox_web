import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as r,d as n,e as a,b as t,f as o}from"./app-ff93bfbc.js";const l={},p=n("p",null,"canvas提供了使用画布进行2D画图的支持，可用于简单的小游戏开发或者图片编辑。使用canvas可以轻松地在一张图片或一个界面上绘制各种线与图形。",-1),d={class:"hint-container tip"},u=n("p",{class:"hint-container-title"},"提示",-1),h={href:"https://developer.android.google.cn/reference/android/graphics/Canvas",target:"_blank",rel:"noopener noreferrer"},v={href:"https://developer.android.google.cn/reference/android/graphics/Canvas",target:"_blank",rel:"noopener noreferrer"},b={href:"https://developer.android.google.cn/reference/android/graphics/Paint",target:"_blank",rel:"noopener noreferrer"},m={href:"https://developer.android.google.cn/reference/android/graphics/Path",target:"_blank",rel:"noopener noreferrer"},x=o(`<p>canvas的坐标系为平面直角坐标系，以控件左上角为原点，控件上边沿为x轴正方向，控件左边沿为y轴正方向。例如分辨率为1920*1080的屏幕上，canvas控件覆盖全屏，画一条从屏幕左上角到屏幕右下角的线段为:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>canvas<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1080</span><span class="token punctuation">,</span> <span class="token number">1920</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>canvas的绘制依赖于画笔Paint, 通过设置画笔的粗细、颜色、填充等可以改变绘制出来的图形。例如绘制一个红色实心正方形为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置画笔为填充，则绘制出来的图形都是实心的</span>
paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>Style<span class="token punctuation">.</span><span class="token constant">FILL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置画笔颜色为红色</span>
paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 绘制一个从坐标(0, 0)到坐标(100, 100)的正方形</span>
canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要绘制正方形的边框，则通过设置画笔的Style来实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置画笔为描边，则绘制出来的图形都是轮廓</span>
paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>Style<span class="token punctuation">.</span><span class="token constant">STROKE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置画笔颜色为红色</span>
paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 绘制一个从坐标(0, 0)到坐标(100, 100)的正方形</span>
canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合画笔，canvas可以绘制基本图形、图片等。</p><h2 id="常用方法索引" tabindex="-1"><a class="header-anchor" href="#常用方法索引" aria-hidden="true">#</a> 常用方法索引</h2><p>绘制颜色：</p><ul><li>根据R、G、B分量绘制颜色：<a href="#canvas-drawrgb-r-g-b">canvas.drawRGB(r, g, b)</a></li><li>根据A、R、G、B分量绘制颜色：<a href="#canvas-draw-argba-r-g-b">canvas.drawARGB(r, g, b)</a></li><li>根据颜色值绘制颜色：<a href="#canvas-drawcolor-color">canvas.drawColor(color)</a></li><li>根据颜色值与混合模式绘制颜色：<a href="#canvas-drawcolor-color-mode">canvas.drawColor(color, mode)</a></li></ul><p>绘制画笔：</p><ul><li><a href="#canvas-drawpaint-paint">canvas.drawPaint(paint)</a></li></ul><p>绘制几何图形：</p><ul><li>绘制一个点：<a href="#canvas-drawpoint-x-y-paint">canvas.drawPoint(x, y, paint)</a></li><li>绘制多个点：<a href="#canvas-drawpoints-pts-paint">canvas.drawPoints(pts, paint)</a></li><li>绘制一条线：<a href="#canvas-drawlinestart-x-starty-stopx-stopy-paint">canvas.drawLine(startX, startY, stopX, stopY, paint)</a></li><li>绘制多条线：<a href="#canvas-drawlines-pts-paint">canvas.drawLines(pts, paint)</a></li><li>绘制矩形：<a href="#canvas-drawrect-r-paint">canvas.drawRect(r, paint)</a></li><li>绘制椭圆：<a href="#canvas-drawoval-oval-paint">canvas.drawOval(oval, paint)</a></li><li>绘制圆：<a href="#canvas-drawcircle-cx-cy-radius-paint">canvas.drawCircle(cx, cy, radius, paint)</a></li><li>绘制弧：<a href="#canvas-drawarc-oval-startangle-sweepangle-usecenter-paint">canvas.drawArc(oval, startAngle, sweepAngle, useCenter, paint)</a></li><li>绘制圆角矩形：<a href="#canvas-drawroundrect-rect-rx-ry-paint">canvas.drawRoundRect(rect, rx, ry, paint)</a></li><li>绘制路径：<a href="#canvas-drawpath-path-paint">canvas.drawPath(path, paint)</a></li></ul><p>绘制文字：</p><ul><li>沿直线绘制文字：<a href="#canvas-drawtext-text-x-y-paint">canvas.drawText(text, x, y, paint)</a></li><li>沿路径绘制文字：<a href="#canvas-drawtextonpath-text-path-hoffset-voffset-paint">canvas.drawTextOnPath(text, path, hOffset, vOffset, paint)</a></li></ul><p>绘制图片：</p><ul><li>绘制位图：<a href="#canvas-drawbitmap-bitmap-left-top-paint">canvas.drawBitmap(bitmap, left, top, paint)</a></li><li>绘制图章：<a href="#canvas-drawpicture-picture">canvas.drawPicture(picture)</a></li></ul><p>获取画布大小：</p><ul><li>获取宽度：<a href="#canvas-getwidth">canvas.getWidth()</a></li><li>获取高度：<a href="#canvas-getheight">canvas.getHeight()</a></li></ul><p>矩阵变换：</p><ul><li>平移：<a href="#canvas-translate-dx-dy">canvas.translate(dx, dy)</a></li><li>缩放：<a href="#canvas-scale-sx-sy-px-py">canvas.scale(sx, sy[, px, py])</a></li><li>旋转：<a href="#canvas-rotate-degrees-px-py">canvas.rotate(degrees[, px, py])</a></li><li>切变变换：<a href="#canvas-skew-sx-sy">canvas.skew(sx, sy)</a></li></ul><h2 id="canvas-getwidth" tabindex="-1"><a class="header-anchor" href="#canvas-getwidth" aria-hidden="true">#</a> canvas.getWidth()</h2><ul><li>返回 {number}</li></ul><p>返回画布当前图层的宽度。</p><h2 id="canvas-getheight" tabindex="-1"><a class="header-anchor" href="#canvas-getheight" aria-hidden="true">#</a> canvas.getHeight()</h2><ul><li>返回 {number}</li></ul><p>返回画布当前图层的高度。</p><h2 id="canvas-drawrgb-r-g-b" tabindex="-1"><a class="header-anchor" href="#canvas-drawrgb-r-g-b" aria-hidden="true">#</a> canvas.drawRGB(r, g, b)</h2><ul><li><code>r</code> {number} 红色通道值</li><li><code>g</code> {number} 绿色通道值</li><li><code>b</code> {number} 蓝色通道值</li></ul><p>将整个可绘制区域填充为r、g、b指定的颜色。相当于 <code>canvas.drawColor(colors.rgb(r, g, b))</code>。</p><h2 id="canvas-drawargb-a-r-g-b" tabindex="-1"><a class="header-anchor" href="#canvas-drawargb-a-r-g-b" aria-hidden="true">#</a> canvas.drawARGB(a, r, g, b)</h2><ul><li><code>a</code> {number} 透明通道值</li><li><code>r</code> {number} 红色通道值</li><li><code>g</code> {number} 绿色通道值</li><li><code>b</code> {number} 蓝色通道值</li></ul><p>将整个可绘制区域填充为a、r、g、b指定的颜色。相当于 <code>canvas.drawColor(colors.argb(a, r, g, b))</code>。</p><h2 id="canvas-drawcolor-color" tabindex="-1"><a class="header-anchor" href="#canvas-drawcolor-color" aria-hidden="true">#</a> canvas.drawColor(color)</h2><ul><li><code>color</code> {number} 颜色值</li></ul><p>将整个可绘制区域填充为color指定的颜色。</p><h2 id="canvas-drawcolor-color-mode" tabindex="-1"><a class="header-anchor" href="#canvas-drawcolor-color-mode" aria-hidden="true">#</a> canvas.drawColor(color, mode)</h2><ul><li><code>color</code> {number} 颜色值</li><li><code>mode</code> {PorterDuff.Mode} 混合模式</li></ul><p>将整个可绘制区域按mode指定的混合模式填充为color指定的颜色。</p><h2 id="canvas-drawpaint-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawpaint-paint" aria-hidden="true">#</a> canvas.drawPaint(paint)</h2><ul><li><code>paint</code> {Paint} 画笔</li></ul><p>将整个可绘制区域用paint指定的画笔填充。相当于绘制一个无限大的矩形，但是更快。通过该方法可以绘制一个指定的着色器的图案。</p><h2 id="canvas-drawpoint-x-y-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawpoint-x-y-paint" aria-hidden="true">#</a> canvas.drawPoint(x, y, paint)</h2><ul><li><code>x</code> {number} x坐标</li><li><code>y</code> {number} y坐标</li><li><code>paint</code> {Paint} 画笔</li></ul><p>在可绘制区域绘制由坐标(x, y)指定的点。</p><p>点的形状由画笔的线帽决定（参见paint.setStrokeCap(cap)）。 点的大小由画笔的宽度决定（参见paint.setStrokeWidth(width)）。</p><blockquote><p>如果画笔宽度为0，则也会绘制1个像素（若抗锯齿启用则绘制至多4个像素）。</p></blockquote><p>相当于 <code>canvas.drawPoints([x, y], paint)</code>。</p><h2 id="canvas-drawpoints-pts-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawpoints-pts-paint" aria-hidden="true">#</a> canvas.drawPoints(pts, paint)</h2><ul><li><code>pts</code> {number[]} 点坐标数组 [x0, y0, x1, y1, x2, y2, ...]</li><li><code>paint</code> {Paint} 画笔</li></ul><p>在可绘制区域绘制由坐标数组指定的多个点。</p><h2 id="canvas-drawline-startx-starty-stopx-stopy-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawline-startx-starty-stopx-stopy-paint" aria-hidden="true">#</a> canvas.drawLine(startX, startY, stopX, stopY, paint)</h2><ul><li><code>startX</code> {number} 起点x坐标</li><li><code>startY</code> {number} 起点y坐标</li><li><code>endX</code> {number} 终点x坐标</li><li><code>endY</code> {number} 终点y坐标</li><li><code>paint</code> {Paint} 画笔</li></ul><p>在可绘制区域绘制由起点坐标(startX, startY)和终点坐标(endX, endY)指定的线。 绘制时会忽略画笔的样式(Style)。也就是说，即使样式设为“仅填充(FILL)”也会绘制。</p><p>退化为点的线（长度为0）不会被绘制。</p><h2 id="canvas-drawlines-pts-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawlines-pts-paint" aria-hidden="true">#</a> canvas.drawLines(pts, paint)</h2><ul><li><code>pts</code> {number[]} 点坐标数组 [x0, y0, x1, y1, x2, y2, ...]</li><li><code>paint</code> {Paint} 画笔</li></ul><p>在可绘制区域绘制由坐标数组指定的点两两连成的一系列线。</p><p>每条线需要点坐标数组中的四个连续的值，因此要绘制一条线，数组必须至少包含四个值。 相当于 <code>canvas.drawLine(pts[0], pts[1], pts[2], pts[3], paint)</code> 然后 <code>canvas.drawLine(pts[4], pts[5], pts[6], pts[7], paint)</code>，之后以此类推。</p><p>绘制时会忽略画笔的样式(Style)。也就是说，即使样式设为“仅填充(FILL)”也会绘制。</p><h2 id="canvas-drawrect-r-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawrect-r-paint" aria-hidden="true">#</a> canvas.drawRect(r, paint)</h2><ul><li><code>r</code> {Rect|RectF} 矩形边界</li><li><code>paint</code> {Paint} 画笔</li></ul><p>在可绘制区域绘制由矩形边界r指定的矩形。 绘制时画笔的样式(Style)决定了是否绘制矩形界线和填充矩形。</p><p>相当于 <code>canvas.drawRect(r.left, r.top, r.right, r.bottom, paint)</code>。</p><h2 id="canvas-drawrect-left-top-right-bottom-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawrect-left-top-right-bottom-paint" aria-hidden="true">#</a> canvas.drawRect(left, top, right, bottom, paint)</h2><ul><li><code>left</code> {number} 矩形左边界x坐标</li><li><code>top</code> {number} 矩形上边界y坐标</li><li><code>right</code> {number} 矩形右边界x坐标</li><li><code>bottom</code> {number} 矩形下边界y坐标</li><li><code>paint</code> {Paint} 画笔</li></ul><p>在可绘制区域绘制由矩形边界(left, top) - (right, bottom)指定的矩形。 绘制时画笔的样式(Style)决定了是否绘制矩形界线和填充矩形。</p><h2 id="canvas-drawoval-oval-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawoval-oval-paint" aria-hidden="true">#</a> canvas.drawOval(oval, paint)</h2><ul><li><code>oval</code> {RectF} 椭圆的外接矩形的边界</li><li><code>paint</code> {Paint} 画笔</li></ul><p>在可绘制区域绘制由矩形边界oval指定的椭圆。 绘制时画笔的样式(Style)决定了是否绘制椭圆界线和填充椭圆。</p><p>相当于 <code>canvas.drawOval(oval.left, oval.top, oval.right, oval.bottom, paint)</code>。</p><h2 id="canvas-drawoval-left-top-right-bottom-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawoval-left-top-right-bottom-paint" aria-hidden="true">#</a> canvas.drawOval(left, top, right, bottom, paint)</h2><ul><li><code>left</code> {number} 椭圆外接矩形的左边界x坐标</li><li><code>top</code> {number} 椭圆外接矩形的上边界y坐标</li><li><code>right</code> {number} 椭圆外接矩形的右边界x坐标</li><li><code>bottom</code> {number} 椭圆外接矩形的下边界y坐标</li><li><code>paint</code> {Paint} 画笔</li></ul><p>在可绘制区域绘制由矩形边界(left, top) - (right, bottom)指定的椭圆。 绘制时画笔的样式(Style)决定了是否绘制椭圆界线和填充椭圆。</p><h2 id="canvas-drawcircle-cx-cy-radius-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawcircle-cx-cy-radius-paint" aria-hidden="true">#</a> canvas.drawCircle(cx, cy, radius, paint)</h2><ul><li><code>cx</code> {number} 圆心的x坐标</li><li><code>cy</code> {number} 圆心的y坐标</li><li><code>radius</code> {number} 圆的半径</li><li><code>paint</code> {Paint} 画笔</li></ul><p>在可绘制区域绘制由圆心(cx, cy)与半径radius指定的圆。如果半径小于等于0则不会绘制。 绘制时画笔的样式(Style)决定了是否绘制圆的界线和填充圆。</p><h2 id="canvas-drawarc-oval-startangle-sweepangle-usecenter-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawarc-oval-startangle-sweepangle-usecenter-paint" aria-hidden="true">#</a> canvas.drawArc(oval, startAngle, sweepAngle, useCenter, paint)</h2><ul><li><code>oval</code> {RectF} 圆弧对应的椭圆外接矩形的边界</li><li><code>startAngle</code> {number} 圆弧的起始角（以角度计算）</li><li><code>sweepAngle</code> {number} 圆弧所对的圆心角（顺时针方向，以角度计算）</li><li><code>useCenter</code> {boolean} 绘制路径时是否连接圆弧对应的椭圆圆心</li><li><code>paint</code> {Paint} 画笔</li></ul><p>在可绘制区域绘制指定的圆弧。 这一圆弧是由矩形边界oval指定的椭圆的一部分，起始于startAngle指定的角度，并以顺时针方向扫过sweepAngle指定的角度。</p><p>如果起始角startAngle为负数或大于等于360，则绘制时起始角将对360取模。 圆弧是沿顺时针方向绘制的。起始角0°相当于从直角坐标系的0°开始绘制（即从3点钟方向沿顺时针方向绘制）。</p><p>如果圆心角sweepAngle大于等于360，则此函数将绘制一个完整的椭圆。 注意，这与path.arcTo方法不同，path.arcTo会将圆心角对360取模。 如果圆心角为负数则会将圆心角对360取模。</p><p>如果指定useCenter为true，在描边和填充时将会连接圆弧对应的椭圆圆心，最终将绘制出一个扇形。</p><p>相当于 <code>canvas.drawArc(oval.left, oval.top, oval.right, oval.bottom, startAngle, sweepAngle, useCenter, paint)</code>。</p><h2 id="canvas-drawarc-left-top-right-bottom-startangle-sweepangle-usecenter-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawarc-left-top-right-bottom-startangle-sweepangle-usecenter-paint" aria-hidden="true">#</a> canvas.drawArc(left, top, right, bottom, startAngle, sweepAngle, useCenter, paint)</h2><ul><li><code>left</code> {number} 椭圆外接矩形的左边界x坐标</li><li><code>top</code> {number} 椭圆外接矩形的上边界y坐标</li><li><code>right</code> {number} 椭圆外接矩形的右边界x坐标</li><li><code>bottom</code> {number} 椭圆外接矩形的下边界y坐标</li><li><code>startAngle</code> {number} 圆弧的起始角（以角度计算）</li><li><code>sweepAngle</code> {number} 圆弧所对的圆心角（顺时针方向，以角度计算）</li><li><code>useCenter</code> {boolean} 绘制路径时是否连接圆弧对应的椭圆圆心</li><li><code>paint</code> {Paint} 画笔</li></ul><p>在可绘制区域绘制指定的圆弧。这一圆弧是由矩形边界(left, top) - (right, bottom)指定的椭圆的一部分，其余参数请参见 <a href="#canvas-drawarcoval-startangle-sweepangle-usecenter-paint">canvas.drawArc(oval, startAngle, sweepAngle, useCenter, paint)</a>。</p><h2 id="canvas-drawroundrect-rect-rx-ry-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawroundrect-rect-rx-ry-paint" aria-hidden="true">#</a> canvas.drawRoundRect(rect, rx, ry, paint)</h2><ul><li><code>rect</code> {RectF} 矩形边界</li><li><code>rx</code> {number} 圆角在x轴上的半径</li><li><code>ry</code> {number} 圆角在y轴上的半径</li><li><code>paint</code> {Paint} 画笔</li></ul><p>在可绘制区域绘制由矩形边界rect、圆角半径rx、ry指定的圆角矩形。 绘制时画笔的样式(Style)决定了是否绘制圆角矩形界线和填充圆角矩形。</p><p>相当于 <code>canvas.drawRoundRect(rect.left, rect.top, rect.right, rect.bottom, rx, ry, paint)</code>。</p><h2 id="canvas-drawroundrect-left-top-right-bottom-rx-ry-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawroundrect-left-top-right-bottom-rx-ry-paint" aria-hidden="true">#</a> canvas.drawRoundRect(left, top, right, bottom, rx, ry, paint)</h2><ul><li><code>left</code> {number} 圆角矩形左边界x坐标</li><li><code>top</code> {number} 圆角矩形上边界y坐标</li><li><code>right</code> {number} 圆角矩形右边界x坐标</li><li><code>bottom</code> {number} 圆角矩形下边界y坐标</li><li><code>rx</code> {number} 圆角在x轴上的半径</li><li><code>ry</code> {number} 圆角在y轴上的半径</li><li><code>paint</code> {Paint} 画笔</li></ul><p>在可绘制区域绘制由矩形边界(left, top) - (right - bottom)、圆角半径rx、ry指定的圆角矩形。 绘制时画笔的样式(Style)决定了是否绘制圆角矩形界线和填充圆角矩形。</p><h2 id="canvas-drawpath-path-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawpath-path-paint" aria-hidden="true">#</a> canvas.drawPath(path, paint)</h2><ul><li><code>path</code> {Path} 路径</li><li><code>paint</code> {Paint} 画笔</li></ul><p>在可绘制区域绘制指定的路径。 绘制时画笔的样式(Style)决定了是否描边路径和填充路径。</p><h2 id="canvas-drawbitmap-bitmap-left-top-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawbitmap-bitmap-left-top-paint" aria-hidden="true">#</a> canvas.drawBitmap(bitmap, left, top, paint)</h2><ul><li><code>bitmap</code> {Bitmap} 位图</li><li><code>left</code> {number} x坐标</li><li><code>top</code> {number} y坐标</li><li><code>paint</code> {Paint} 画笔</li></ul><p>在可绘制区域绘制指定的位图，使它的左上角位于(left, top)指定的坐标，并应用画布的变换矩阵。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果画笔指定了遮罩过滤器并且该过滤器范围比位图大（超出位图的长/宽）（如 BlurMaskFilter），位图将会像被应用了CLAMP铺展模式的着色器一样绘制。因此超出位图原始范围的颜色将会重复使用边缘的颜色。</p></div><p>如果位图bitmap与画布canvas的密度不同，在绘制时位图将会被缩放至与画布相同密度再绘制。</p><h2 id="canvas-drawpicture-picture" tabindex="-1"><a class="header-anchor" href="#canvas-drawpicture-picture" aria-hidden="true">#</a> canvas.drawPicture(picture)</h2><ul><li><code>picture</code> {Picture} 图章</li></ul><p>保存画布的变换矩阵与可绘制区域范围，在可绘制区域绘制指定的图章，随后恢复画布的变换矩阵与可绘制区域范围。 该过程与 <code>picture.draw(canvas)</code> 不同，因为后者不会进行保存与恢复的操作。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>绘制图章将会强制图章退出录制模式（即调用 <code>picture.endRecording()</code>）以准备之后的绘制。</p></div><h2 id="canvas-drawtext-text-x-y-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawtext-text-x-y-paint" aria-hidden="true">#</a> canvas.drawText(text, x, y, paint)</h2><ul><li><code>text</code> {string} 文字</li><li><code>x</code> {number} x坐标</li><li><code>y</code> {number} y坐标</li><li><code>paint</code> {Paint} 画笔</li></ul><p>在可绘制区域绘制指定的文字，使文字的原点位于(x, y)。文字的起始位置取决于paint的对齐选项。 文字的样式取决于paint的相关设置。</p><h2 id="canvas-drawtextonpath-text-path-hoffset-voffset-paint" tabindex="-1"><a class="header-anchor" href="#canvas-drawtextonpath-text-path-hoffset-voffset-paint" aria-hidden="true">#</a> canvas.drawTextOnPath(text, path, hOffset, vOffset, paint)</h2><ul><li><code>text</code> {string} 文字</li><li><code>path</code> {Path} 路径</li><li><code>hOffset</code> {number} 在与路径平行方向的偏移，取正为沿路径方向平移</li><li><code>vOffset</code> {number} 在与路径垂直方向的偏移，取正为向文字的下方平移</li><li><code>paint</code> {Paint} 画笔</li></ul><p>在可绘制区域沿着指定的路径绘制指定的文字。文字的起始位置取决于paint的对齐选项。 文字的样式取决于paint的相关设置。</p><h2 id="canvas-translate-dx-dy" tabindex="-1"><a class="header-anchor" href="#canvas-translate-dx-dy" aria-hidden="true">#</a> canvas.translate(dx, dy)</h2><ul><li><code>dx</code> {number} 向x轴正方向平移的距离，负数表示反方向平移</li><li><code>dy</code> {number} 向y轴正方向平移的距离，负数表示反方向平移</li></ul><p>将当前的变换矩阵右乘指定的平移变换矩阵。相当于将坐标系平移指定距离。</p><h2 id="canvas-scale-sx-sy-px-py" tabindex="-1"><a class="header-anchor" href="#canvas-scale-sx-sy-px-py" aria-hidden="true">#</a> canvas.scale(sx, sy[, px, py])</h2><ul><li><code>sx</code> {number} 在x轴上缩放的倍数，负数表示沿x轴翻转</li><li><code>sy</code> {number} 在y轴上缩放的倍数，负数表示沿y轴翻转</li><li><code>px</code> {number} 缩放中心的x坐标，默认为0</li><li><code>py</code> {number} 缩放中心的y坐标，默认为0</li></ul><p>将当前的变换矩阵右乘指定的缩放变换矩阵。相当于以(px, py)为中心将坐标系缩放指定的倍数。 倍数大于 1 表示放大，小于 1 表示缩小。</p><h2 id="canvas-rotate-degrees-px-py" tabindex="-1"><a class="header-anchor" href="#canvas-rotate-degrees-px-py" aria-hidden="true">#</a> canvas.rotate(degrees[, px, py])</h2><ul><li><code>degrees</code> {number} 旋转的角度（以角度计算）</li><li><code>px</code> {number} 旋转中心的x坐标，默认为0</li><li><code>py</code> {number} 旋转中心的y坐标，默认为0</li></ul><p>将当前的变换矩阵右乘指定的旋转变换矩阵。相当于以(px, py)为中心将坐标系旋转指定的角度。</p><h2 id="canvas-skew-sx-sy" tabindex="-1"><a class="header-anchor" href="#canvas-skew-sx-sy" aria-hidden="true">#</a> canvas.skew(sx, sy)</h2><ul><li><code>sx</code> {number} x轴方向的切变系数</li><li><code>sy</code> {number} y轴方向的切变系数</li></ul><p>将当前的变换矩阵右乘指定的切变变换矩阵。</p>`,125);function w(f,g){const e=i("ExternalLinkIcon");return c(),r("div",null,[p,n("div",d,[u,n("p",null,[a("Canvas模块本质上是将 "),n("a",h,[a("Android Canvas"),t(e)]),a(" 进行包装后的结果。本模块的部分用法和文档暂时缺失，但可以在 Android 文档中找到。请参阅 "),n("a",v,[a("Android Canvas"),t(e)]),a("、"),n("a",b,[a("Android Paint"),t(e)]),a(" 与 "),n("a",m,[a("Android Path"),t(e)]),a(" 了解更多细节。")])]),x])}const P=s(l,[["render",w],["__file","canvas.html.vue"]]);export{P as default};
