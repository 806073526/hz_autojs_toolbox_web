import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as l,d as a,e as n,b as t,f as e}from"./app-ff93bfbc.js";const p={},u=e(`<p>UiSelector即选择器，用于通过各种条件选取屏幕上的控件，再对这些控件进行点击、长按等动作。这里需要先简单介绍一下控件和界面的相关知识。</p><p>一般软件的界面是由一个个控件构成的，例如图片部分是一个图片控件(ImageView)，文字部分是一个文字控件(TextView)；同时，通过各种布局来决定各个控件的位置，例如，线性布局(LinearLayout)里面的控件都是按水平或垂直一次叠放的，列表布局(AbsListView)则是以列表的形式显示控件。</p><p>控件有各种属性，包括文本(text), 描述(desc), 类名(className), id等等。我们通常用一个控件的属性来找到这个控件，例如，想要点击某聊天应用的聊天窗口的&quot;发送&quot;按钮，我们就可以通过他的文本属性为&quot;发送&quot;来找到这个控件并点击他，具体代码为:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> sendButton <span class="token operator">=</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;发送&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sendButton<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中, <code>text(&quot;发送&quot;)</code>表示一个条件(文本属性为&quot;发送&quot;)，<code>findOne()</code>表示基于这个条件找到一个符合条件的控件，从而我们可以得到发送按钮sendButton，再执行<code>sendButton.click()</code>即可点击&quot;发送&quot;按钮。</p><p>用文本属性来定位按钮控件、文本控件通常十分有效。但是，如果一个控件是图片控件，比如Auto.js主界面右上角的搜索图标，他没有文本属性，这时需要其他属性来定位他。我们如何查看他有什么属性呢？首先打开悬浮窗和无障碍服务，点击蓝色的图标(布局分析), 可以看到以下界面：</p><p>之后我们点击搜索图标，可以看到他有以下属性：</p><p>我们注意到这个图标的desc(描述)属性为&quot;搜索&quot;，那么我们就可以通过desc属性来定位这个控件，得到点击搜索图标的代码为:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">desc</span><span class="token punctuation">(</span><span class="token string">&quot;搜索&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可能心细的你可能注意到了，这个控件还有很多其他的属性，例如checked, className, clickable等等，为什么不用这些属性来定位搜索图标呢？答案是，其他控件也有这些值相同的属性、尝试一下你就可以发现很多其他控件的checked属性和搜索控件一样都是<code>false</code>，如果我们用<code>checked(false)</code>作为条件，将会找到很多控件，而无法确定哪一个是搜索图标。因此，要找到我们想要的那个控件，<strong>选择器的条件通常需要是可唯一确定控件的</strong>。我们通常用一个独一无二的属性来定位一个控件，例如这个例子中就没有其他控件的desc(描述)属性为&quot;搜索&quot;。</p><p>另外，对于这个搜索图标而言，id属性也是唯一的，我们也可以用<code>id(&quot;action_search&quot;).findOne().click()</code>来点击这个控件。如果一个控件有id属性，那么这个属性很可能是唯一的，除了以下几种情况：</p><ul><li>被混淆的控件ID，可能名称都是相同的，或者在版本之间有变化</li><li>列表中的控件，比如联系人列表等</li></ul><p>尽管id属性很方便，但也不总是最方便的，例如对于微信和网易云音乐，每次更新他的控件id都会变化，导致了相同代码对于不同版本的微信、网易云音乐并不兼容。</p><p>除了这些属性外，主要还有以下几种属性：</p><ul><li><code>className</code> 类名。类名表示一个控件的类型，例如文本控件为&quot;android.widget.TextView&quot;, 图片控件为&quot;android.widget.ImageView&quot;等。</li><li><code>packageName</code> 包名。包名表示控件所在的应用包名，例如Auto.js Pro界面的控件的包名为&quot;org.autojs.autojspro&quot;。</li><li><code>bounds</code> 控件在屏幕上的范围。</li><li><code>drawingOrder</code> 控件在父控件的绘制顺序。</li><li><code>indexInParent</code> 控件在父控件的位置。</li><li><code>clickable</code> 控件是否可点击。</li><li><code>longClickable</code> 控件是否可长按。</li><li><code>checkable</code> 控件是否可勾选。</li><li><code>checked</code> 控件是否可已勾选。</li><li><code>scrollable</code> 控件是否可滑动。</li><li><code>selected</code> 控件是否已选择。</li><li><code>editable</code> 控件是否可编辑。</li><li><code>visibleToUser</code> 控件是否可见。</li><li><code>enabled</code> 控件是否已启用。</li><li><code>depth</code> 控件的布局深度。</li></ul><p>有时候只靠一个属性并不能唯一确定一个控件，这时需要通过属性的组合来完成定位，例如<code>className(&quot;ImageView&quot;).depth(10).findOne().click()</code>，通过链式调用来组合条件。</p><p>通常用这些技巧便可以解决大部分问题，即使解决不了问题，也可以通过布局分析的&quot;生成代码&quot;功能来尝试生成一些选择器代码。接下来的问题便是对选取的控件进行操作，包括：</p><ul><li><code>click()</code> 点击。点击一个控件，前提是这个控件的clickable属性为true</li><li><code>longClick()</code> 长按。长按一个控件，前提是这个控件的longClickable属性为true</li><li><code>setText()</code> 设置文本，用于编辑框控件设置文本。</li><li><code>scrollForward()</code>, <code>scrollBackward()</code> 滑动。滑动一个控件(列表等), 前提是这个控件的scrollable属性为true</li><li><code>exits()</code> 判断控件是否存在</li><li><code>waitFor()</code> 等待控件出现</li></ul><p>这些操作包含了绝大部分控件操作。根据这些我们可以很容易写出一个&quot;刷屏&quot;脚本(代码仅为示例，请不要在别人的群里测试，否则容易被踢):</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;EditText&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;刷屏...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;发送&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clicK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这段代码也可以写成：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;EditText&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;刷屏...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;发送&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clicK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不加<code>findOne()</code>而直接进行操作，则选择器会找出<strong>所有</strong>符合条件的控件并操作。</p><p>另外一个比较常用的操作的滑动。滑动操作的第一步是找到需要滑动的控件，例如要滑动QQ消息列表则在悬浮窗布局层次分析中找到<code>AbsListView</code>，这个控件就是消息列表控件，如下图：</p><p>长按可查看控件信息，注意到其scrollable属性为true，并找出其id为&quot;recent_chat_list&quot;，从而下滑QQ消息列表的代码为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;recent_chat_list&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;AbsListView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>scrollForward()</code>为向前滑，包括下滑和右滑。</p><p>选择器的入门教程暂且要这里，更多信息可以查看下面的文档和选择器进阶。</p><h2 id="selector" tabindex="-1"><a class="header-anchor" href="#selector" aria-hidden="true">#</a> selector()</h2><ul><li>返回 {UiSelector}</li></ul><p>创建一个新的选择器。但一般情况不需要使用该函数，因为可以直接用相应条件的语句创建选择器。</p><p>由于历史遗留原因，本不应该这样设计(不应该让<code>id()</code>, <code>text()</code>等作为全局函数，而是应该用<code>By.id()</code>, <code>By.text()</code>)，但为了后向兼容性只能保留这个设计。</p><p>这样的API设计会污染全局变量，后续可能会支持&quot;去掉这些全局函数而使用By.***&quot;的选项。</p><h2 id="uiselector-algorithm-algorithm" tabindex="-1"><a class="header-anchor" href="#uiselector-algorithm-algorithm" aria-hidden="true">#</a> UiSelector.algorithm(algorithm)</h2><p><strong>[v4.1.0新增]</strong></p><ul><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>algorithm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>{string} 搜索算法，可选的值有：</p><ul><li><code>DFS</code> 深度优先算法，选择器的默认算法</li><li><code>BFS</code> 广度优先算法</li></ul></li></ul><p>指定选择器的搜索算法。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">selector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;文本&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">algorithm</span><span class="token punctuation">(</span><span class="token string">&quot;BFS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>广度优先在控件所在层次较低时，或者布局的层次不多时，通常能更快找到控件。</p><h2 id="uiselector-text-str" tabindex="-1"><a class="header-anchor" href="#uiselector-text-str" aria-hidden="true">#</a> UiSelector.text(str)</h2><ul><li><code>str</code> {string} 控件文本</li><li>返回 {UiSelector} 返回选择器自身以便链式调用</li></ul><p>为当前选择器附加控件&quot;text等于字符串str&quot;的筛选条件。</p><p>控件的text(文本)属性是文本控件上的显示的文字，例如微信左上角的&quot;微信&quot;文本。</p><h2 id="uiselector-textcontains-str" tabindex="-1"><a class="header-anchor" href="#uiselector-textcontains-str" aria-hidden="true">#</a> UiSelector.textContains(str)</h2><ul><li><code>str</code> {string} 要包含的字符串</li></ul><p>为当前选择器附加控件&quot;text需要包含字符串str&quot;的筛选条件。</p><p>这是一个比较有用的条件，例如QQ动态页和微博发现页上方的&quot;大家都在搜....&quot;的控件可以用<code>textContains(&quot;大家都在搜&quot;).findOne()</code>来获取。</p><h2 id="uiselector-textstartswith-prefix" tabindex="-1"><a class="header-anchor" href="#uiselector-textstartswith-prefix" aria-hidden="true">#</a> UiSelector.textStartsWith(prefix)</h2><ul><li><code>prefix</code> {string} 前缀</li></ul><p>为当前选择器附加控件&quot;text需要以prefix开头&quot;的筛选条件。</p><p>这也是一个比较有用的条件，例如要找出Auto.js脚本列表中名称以&quot;QQ&quot;开头的脚本的代码为<code>textStartsWith(&quot;QQ&quot;).find()</code>。</p><h2 id="uiselector-textendswith-suffix" tabindex="-1"><a class="header-anchor" href="#uiselector-textendswith-suffix" aria-hidden="true">#</a> UiSelector.textEndsWith(suffix)</h2><ul><li><code>suffix</code> {string} 后缀</li></ul><p>为当前选择器附加控件&quot;text需要以suffix结束&quot;的筛选条件。</p><h2 id="uiselector-textmatches-reg" tabindex="-1"><a class="header-anchor" href="#uiselector-textmatches-reg" aria-hidden="true">#</a> UiSelector.textMatches(reg)</h2><ul><li><code>reg</code> {string} | {Regex} 要满足的正则表达式。</li></ul><p>为当前选择器附加控件&quot;text需要满足正则表达式reg&quot;的条件。</p>`,57),d={href:"http://www.runoob.com/Stringp/Stringp-example.html",target:"_blank",rel:"noopener noreferrer"},r=e('<p>需要注意的是，如果正则表达式是字符串，则需要使用<code>\\\\</code>来表达<code>\\</code>(也即Java正则表达式的形式)，例如<code>textMatches(&quot;\\\\d+&quot;)</code>匹配多位数字；但如果使用JavaScript语法的正则表达式则不需要，例如<code>textMatches(/\\d+/)</code>。但如果使用字符串的正则表达式则该字符串不能以&quot;/&quot;同时以&quot;/&quot;结束，也即不能写诸如<code>textMatches(&quot;/\\\\d+/&quot;)</code>的表达式，否则会被开头的&quot;/&quot;和结尾的&quot;/&quot;会被忽略。</p><h2 id="uiselector-desc-str" tabindex="-1"><a class="header-anchor" href="#uiselector-desc-str" aria-hidden="true">#</a> UiSelector.desc(str)</h2><ul><li><code>str</code> {string} 控件文本</li><li>返回 {UiSelector} 返回选择器自身以便链式调用</li></ul><p>为当前选择器附加控件&quot;desc等于字符串str&quot;的筛选条件。</p><p>控件的desc(描述，全称为Content-Description)属性是对一个控件的描述，例如网易云音乐右上角的放大镜图标的描述为搜索。要查看一个控件的描述，同样地可以借助悬浮窗查看。</p><p>desc属性同样是定位控件的利器。</p><h2 id="uiselector-desccontains-str" tabindex="-1"><a class="header-anchor" href="#uiselector-desccontains-str" aria-hidden="true">#</a> UiSelector.descContains(str)</h2><ul><li><code>str</code> {string} 要包含的字符串</li></ul><p>为当前选择器附加控件&quot;desc需要包含字符串str&quot;的筛选条件。</p><h2 id="uiselector-descstartswith-prefix" tabindex="-1"><a class="header-anchor" href="#uiselector-descstartswith-prefix" aria-hidden="true">#</a> UiSelector.descStartsWith(prefix)</h2><ul><li><code>prefix</code> {string} 前缀</li></ul><p>为当前选择器附加控件&quot;desc需要以prefix开头&quot;的筛选条件。</p><h2 id="uiselector-descendswith-suffix" tabindex="-1"><a class="header-anchor" href="#uiselector-descendswith-suffix" aria-hidden="true">#</a> UiSelector.descEndsWith(suffix)</h2><ul><li><code>suffix</code> {string} 后缀</li></ul><p>为当前选择器附加控件&quot;desc需要以suffix结束&quot;的筛选条件。</p><h2 id="uiselector-descmatches-reg" tabindex="-1"><a class="header-anchor" href="#uiselector-descmatches-reg" aria-hidden="true">#</a> UiSelector.descMatches(reg)</h2><ul><li><code>reg</code> {string} | {Regex} 要满足的正则表达式。</li></ul><p>为当前选择器附加控件&quot;desc需要满足正则表达式reg&quot;的条件。</p>',18),h={href:"http://www.runoob.com/Stringp/Stringp-example.html",target:"_blank",rel:"noopener noreferrer"},k=e('<p>需要注意的是，如果正则表达式是字符串，则需要使用<code>\\\\</code>来表达<code>\\</code>(也即Java正则表达式的形式)，例如<code>textMatches(&quot;\\\\d+&quot;)</code>匹配多位数字；但如果使用JavaScript语法的正则表达式则不需要，例如<code>textMatches(/\\d+/)</code>。但如果使用字符串的正则表达式则该字符串不能以&quot;/&quot;同时以&quot;/&quot;结束，也即不能写诸如<code>textMatches(&quot;/\\\\d+/&quot;)</code>的表达式，否则会被开头的&quot;/&quot;和结尾的&quot;/&quot;会被忽略。</p><h2 id="uiselector-id-resid" tabindex="-1"><a class="header-anchor" href="#uiselector-id-resid" aria-hidden="true">#</a> UiSelector.id(resId)</h2>',2),b=a("code",null,"resId",-1),f={href:"http://com.tencent.mm",target:"_blank",rel:"noopener noreferrer"},m=a("strong",null,"也可以不指定包名",-1),g=e(`<p>为当前选择器附加&quot;id等于resId&quot;的筛选条件。</p><p>控件的id属性通常是可以用来确定控件的唯一标识，如果一个控件有id，那么使用id来找到他是最好的方法。要查看屏幕上的控件的id，可以开启悬浮窗并使用界面工具，点击相应控件即可查看。若查看到的控件id为null, 表示该控件没有id。另外，在列表中会出现多个控件的id相同的情况。例如微信的联系人列表，每个头像的id都是一样的。此时不能用id来唯一确定控件。</p><p>在QQ界面经常会出现多个id为&quot;name&quot;的控件，在微信上则每个版本的id都会变化。对于这些软件而言比较难用id定位控件。</p><h2 id="uiselector-idcontains-str" tabindex="-1"><a class="header-anchor" href="#uiselector-idcontains-str" aria-hidden="true">#</a> UiSelector.idContains(str)</h2><ul><li><code>str</code> {string} id要包含的字符串</li></ul><p>为当前选择器附加控件&quot;id包含字符串str&quot;的筛选条件。比较少用。</p><h2 id="uiselector-idstartswith-prefix" tabindex="-1"><a class="header-anchor" href="#uiselector-idstartswith-prefix" aria-hidden="true">#</a> UiSelector.idStartsWith(prefix)</h2><ul><li><code>prefix</code> {string} id前缀</li></ul><p>为当前选择器附加&quot;id需要以prefix开头&quot;的筛选条件。比较少用。</p><h2 id="uiselector-idendswith-suffix" tabindex="-1"><a class="header-anchor" href="#uiselector-idendswith-suffix" aria-hidden="true">#</a> UiSelector.idEndsWith(suffix)</h2><ul><li><code>suffix</code> {string} id后缀</li></ul><p>为当前选择器附加&quot;id需要以suffix结束&quot;的筛选条件。比较少用。</p><h2 id="uiselector-idmatches-reg" tabindex="-1"><a class="header-anchor" href="#uiselector-idmatches-reg" aria-hidden="true">#</a> UiSelector.idMatches(reg)</h2><ul><li><code>reg</code> {Regex | string} id要满足的正则表达式</li></ul><p>附加id需要满足正则表达式。</p><p>需要注意的是，如果正则表达式是字符串，则需要使用<code>\\\\</code>来表达<code>\\</code>(也即Java正则表达式的形式)，例如<code>textMatches(&quot;\\\\d+&quot;)</code>匹配多位数字；但如果使用JavaScript语法的正则表达式则不需要，例如<code>textMatches(/\\d+/)</code>。但如果使用字符串的正则表达式则该字符串不能以&quot;/&quot;同时以&quot;/&quot;结束，也即不能写诸如<code>textMatches(&quot;/\\\\d+/&quot;)</code>的表达式，否则会被开头的&quot;/&quot;和结尾的&quot;/&quot;会被忽略。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">idMatches</span><span class="token punctuation">(</span><span class="token string">&quot;[a-zA-Z]+&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="uiselector-classname-str" tabindex="-1"><a class="header-anchor" href="#uiselector-classname-str" aria-hidden="true">#</a> UiSelector.className(str)</h2><ul><li><code>str</code> {string} 控件文本</li><li>返回 {UiSelector} 返回选择器自身以便链式调用</li></ul><p>为当前选择器附加控件&quot;className等于字符串str&quot;的筛选条件。</p><p>控件的className(类名)表示一个控件的类别，例如文本控件的类名为android.widget.TextView。</p><p>如果一个控件的类名以&quot;android.widget.&quot;开头，则可以省略这部分，例如文本控件可以直接用<code>className(&quot;TextView&quot;)</code>的选择器。</p><p>常见控件的类名如下：</p><ul><li><code>android.widget.TextView</code> 文本控件</li><li><code>android.widget.ImageView</code> 图片控件</li><li><code>android.widget.Button</code> 按钮控件</li><li><code>android.widget.EditText</code> 输入框控件</li><li><code>android.widget.AbsListView</code> 列表控件</li><li><code>android.widget.LinearLayout</code> 线性布局</li><li><code>android.widget.FrameLayout</code> 帧布局</li><li><code>android.widget.RelativeLayout</code> 相对布局</li><li><code>android.widget.RelativeLayout</code> 相对布局</li><li><code>android.support.v7.widget.RecyclerView</code> 通常也是列表控件</li></ul><h2 id="uiselector-classnamecontains-str" tabindex="-1"><a class="header-anchor" href="#uiselector-classnamecontains-str" aria-hidden="true">#</a> UiSelector.classNameContains(str)</h2><ul><li><code>str</code> {string} 要包含的字符串</li></ul><p>为当前选择器附加控件&quot;className需要包含字符串str&quot;的筛选条件。</p><h2 id="uiselector-classnamestartswith-prefix" tabindex="-1"><a class="header-anchor" href="#uiselector-classnamestartswith-prefix" aria-hidden="true">#</a> UiSelector.classNameStartsWith(prefix)</h2><ul><li><code>prefix</code> {string} 前缀</li></ul><p>为当前选择器附加控件&quot;className需要以prefix开头&quot;的筛选条件。</p><h2 id="uiselector-classnameendswith-suffix" tabindex="-1"><a class="header-anchor" href="#uiselector-classnameendswith-suffix" aria-hidden="true">#</a> UiSelector.classNameEndsWith(suffix)</h2><ul><li><code>suffix</code> {string} 后缀</li></ul><p>为当前选择器附加控件&quot;className需要以suffix结束&quot;的筛选条件。</p><h2 id="uiselector-classnamematches-reg" tabindex="-1"><a class="header-anchor" href="#uiselector-classnamematches-reg" aria-hidden="true">#</a> UiSelector.classNameMatches(reg)</h2><ul><li><code>reg</code> {string} | {Regex} 要满足的正则表达式。</li></ul><p>为当前选择器附加控件&quot;className需要满足正则表达式reg&quot;的条件。</p>`,36),q={href:"http://www.runoob.com/Stringp/Stringp-example.html",target:"_blank",rel:"noopener noreferrer"},v=e('<p>需要注意的是，如果正则表达式是字符串，则需要使用<code>\\\\</code>来表达<code>\\</code>(也即Java正则表达式的形式)，例如<code>textMatches(&quot;\\\\d+&quot;)</code>匹配多位数字；但如果使用JavaScript语法的正则表达式则不需要，例如<code>textMatches(/\\d+/)</code>。但如果使用字符串的正则表达式则该字符串不能以&quot;/&quot;同时以&quot;/&quot;结束，也即不能写诸如<code>textMatches(&quot;/\\\\d+/&quot;)</code>的表达式，否则会被开头的&quot;/&quot;和结尾的&quot;/&quot;会被忽略。</p><h2 id="uiselector-packagename-str" tabindex="-1"><a class="header-anchor" href="#uiselector-packagename-str" aria-hidden="true">#</a> UiSelector.packageName(str)</h2><ul><li><code>str</code> {string} 控件文本</li><li>返回 {UiSelector} 返回选择器自身以便链式调用</li></ul><p>为当前选择器附加控件&quot;packageName等于字符串str&quot;的筛选条件。</p><p>控件的packageName表示控件所属界面的应用包名。例如Auto.js Pro的包名为&quot;org.autojs.autojspro&quot;, 那么Auto.js Pro界面的控件的packageName为&quot;org.autojs.autojspro&quot;。</p><p>要查看一个应用的包名，可以用函数<code>app.getPackageName()</code>获取，例如<code>toast(app.getPackageName(&quot;微信&quot;))</code>。</p><h2 id="uiselector-packagenamecontains-str" tabindex="-1"><a class="header-anchor" href="#uiselector-packagenamecontains-str" aria-hidden="true">#</a> UiSelector.packageNameContains(str)</h2><ul><li><code>str</code> {string} 要包含的字符串</li></ul><p>为当前选择器附加控件&quot;packageName需要包含字符串str&quot;的筛选条件。</p><h2 id="uiselector-packagenamestartswith-prefix" tabindex="-1"><a class="header-anchor" href="#uiselector-packagenamestartswith-prefix" aria-hidden="true">#</a> UiSelector.packageNameStartsWith(prefix)</h2><ul><li><code>prefix</code> {string} 前缀</li></ul><p>为当前选择器附加控件&quot;packageName需要以prefix开头&quot;的筛选条件。</p><h2 id="uiselector-packagenameendswith-suffix" tabindex="-1"><a class="header-anchor" href="#uiselector-packagenameendswith-suffix" aria-hidden="true">#</a> UiSelector.packageNameEndsWith(suffix)</h2><ul><li><code>suffix</code> {string} 后缀</li></ul><p>为当前选择器附加控件&quot;packageName需要以suffix结束&quot;的筛选条件。</p><h2 id="uiselector-packagenamematches-reg" tabindex="-1"><a class="header-anchor" href="#uiselector-packagenamematches-reg" aria-hidden="true">#</a> UiSelector.packageNameMatches(reg)</h2><ul><li><code>reg</code> {string} | {Regex} 要满足的正则表达式。</li></ul><p>为当前选择器附加控件&quot;packageName需要满足正则表达式reg&quot;的条件。</p>',18),x={href:"http://www.runoob.com/Stringp/Stringp-example.html",target:"_blank",rel:"noopener noreferrer"},w=e(`<h2 id="uiselector-bounds-left-top-right-bottom" tabindex="-1"><a class="header-anchor" href="#uiselector-bounds-left-top-right-bottom" aria-hidden="true">#</a> UiSelector.bounds(left, top, right, bottom)</h2><ul><li><code>left</code> {number} 控件左边缘与屏幕左边的距离</li><li><code>top</code> {number} 控件上边缘与屏幕上边的距离</li><li><code>right</code> {number} 控件右边缘与屏幕左边的距离</li><li><code>bottom</code> {number} 控件下边缘与屏幕上边的距离</li></ul><p>一个控件的bounds属性为这个控件在屏幕上显示的范围。我们可以用这个范围来定位这个控件。尽管用这个方法定位控件对于静态页面十分准确，却无法兼容不同分辨率的设备；同时对于列表页面等动态页面无法达到效果，因此使用不推荐该选择器。</p><p>注意参数的这四个数字不能随意填写，必须精确的填写控件的四个边界才能找到该控件。例如，要点击QQ主界面的右上角加号，我们用布局分析查看该控件的属性，如下图：</p><p>可以看到bounds属性为(951, 67, 1080, 196)，此时使用代码<code>bounds(951, 67, 1080, 196).clickable().click()</code>即可点击该控件。</p><h2 id="uiselector-boundsinside-left-top-right-bottom" tabindex="-1"><a class="header-anchor" href="#uiselector-boundsinside-left-top-right-bottom" aria-hidden="true">#</a> UiSelector.boundsInside(left, top, right, bottom)</h2><ul><li><code>left</code> {number} 范围左边缘与屏幕左边的距离</li><li><code>top</code> {number} 范围上边缘与屏幕上边的距离</li><li><code>right</code> {number} 范围右边缘与屏幕左边的距离</li><li><code>bottom</code> {number} 范围下边缘与屏幕上边的距离</li></ul><p>为当前选择器附加控件&quot;bounds需要在left, top, right, bottom构成的范围里面&quot;的条件。</p><p>这个条件用于限制选择器在某一个区域选择控件。例如要在屏幕上半部分寻找文本控件TextView，代码为:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;TextView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boundsInside</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> device<span class="token punctuation">.</span>width<span class="token punctuation">,</span> device<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中我们使用了<code>device.width</code>来获取屏幕宽度，<code>device.height</code>来获取屏幕高度。</p><h2 id="uiselector-boundscontains-left-top-right-bottom" tabindex="-1"><a class="header-anchor" href="#uiselector-boundscontains-left-top-right-bottom" aria-hidden="true">#</a> UiSelector.boundsContains(left, top, right, bottom)</h2><ul><li><code>left</code> {number} 范围左边缘与屏幕左边的距离</li><li><code>top</code> {number} 范围上边缘与屏幕上边的距离</li><li><code>right</code> {number} 范围右边缘与屏幕左边的距离</li><li><code>bottom</code> {number} 范围下边缘与屏幕上边的距离</li></ul><p>为当前选择器附加控件&quot;bounds需要包含left, top, right, bottom构成的范围&quot;的条件。</p><p>这个条件用于限制控件的范围必须包含所给定的范围。例如给定一个点(500, 300), 寻找在这个点上的可点击控件的代码为:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token function">boundsContains</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clickable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
w<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uiselector-drawingorder-order" tabindex="-1"><a class="header-anchor" href="#uiselector-drawingorder-order" aria-hidden="true">#</a> UiSelector.drawingOrder(order)</h2><ul><li><code>order</code> {number} 控件在父视图中的绘制顺序</li></ul><p>为当前选择器附加控件&quot;drawingOrder等于order&quot;的条件。</p><p>drawingOrder为一个控件在父控件中的绘制顺序，通常可以用于区分同一层次的控件。</p><p>但该属性在Android 7.0以上才能使用。</p><h2 id="uiselector-clickable-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-clickable-b-true" aria-hidden="true">#</a> UiSelector.clickable([b = true])</h2><ul><li><code>b</code> {Boolean} 表示控件是否可点击</li></ul><p>为当前选择器附加控件是否可点击的条件。但并非所有clickable为false的控件都真的不能点击，这取决于控件的实现。对于自定义控件(例如显示类名为android.view.View的控件)很多的clickable属性都为false都却能点击。</p><p>需要注意的是，可以省略参数<code>b</code>而表示选择那些可以点击的控件，例如<code>className(&quot;ImageView&quot;).clickable()</code>表示可以点击的图片控件的条件，<code>className(&quot;ImageView&quot;).clickable(false)</code>表示不可点击的图片控件的条件。</p><h2 id="uiselector-longclickable-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-longclickable-b-true" aria-hidden="true">#</a> UiSelector.longClickable([b = true])</h2><ul><li><code>b</code> {Boolean} 表示控件是否可长按</li></ul><p>为当前选择器附加控件是否可长按的条件。</p><h2 id="uiselector-checkable-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-checkable-b-true" aria-hidden="true">#</a> UiSelector.checkable([b = true])</h2><ul><li><code>b</code> {Boolean} 表示控件是否可勾选</li></ul><p>为当前选择器附加控件是否可勾选的条件。勾选通常是对于勾选框而言的，例如图片多选时左上角通常有一个勾选框。</p><h2 id="uiselector-selected-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-selected-b-true" aria-hidden="true">#</a> UiSelector.selected([b = true])</h2><ul><li><code>b</code> {Boolean} 表示控件是否被选</li></ul><p>为当前选择器附加控件是否已选中的条件。被选中指的是，例如QQ聊天界面点击下方的&quot;表情按钮&quot;时，会出现自己收藏的表情，这时&quot;表情按钮&quot;便处于选中状态，其selected属性为true。</p><h2 id="uiselector-enabled-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-enabled-b-true" aria-hidden="true">#</a> UiSelector.enabled([b = true])</h2><ul><li><code>b</code> {Boolean} 表示控件是否已启用</li></ul><p>为当前选择器附加控件是否已启用的条件。大多数控件都是启用的状态(enabled为true)，处于“禁用”状态通常是灰色并且不可点击。</p><h2 id="uiselector-scrollable-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-scrollable-b-true" aria-hidden="true">#</a> UiSelector.scrollable([b = true])</h2><ul><li><code>b</code> {Boolean} 表示控件是否可滑动</li></ul><p>为当前选择器附加控件是否可滑动的条件。滑动包括上下滑动和左右滑动。</p><p>可以用这个条件来寻找可滑动控件来滑动界面。例如滑动Auto.js的脚本列表的代码为:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;android.support.v7.widget.RecyclerView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//或者classNameEndsWith(&quot;RecyclerView&quot;).scrollable().findOne().scrollForward();</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uiselector-editable-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-editable-b-true" aria-hidden="true">#</a> UiSelector.editable([b = true])</h2><ul><li><code>b</code> {Boolean} 表示控件是否可编辑</li></ul><p>为当前选择器附加控件是否可编辑的条件。一般来说可编辑的控件为输入框(EditText)，但不是所有的输入框(EditText)都可编辑。</p><h2 id="uiselector-multiline-b-true" tabindex="-1"><a class="header-anchor" href="#uiselector-multiline-b-true" aria-hidden="true">#</a> UiSelector.multiLine([b = true])</h2><ul><li><code>b</code> {Boolean} 表示文本或输入框控件是否是多行显示的</li></ul><p>为当前选择器附加控件是否文本或输入框控件是否是多行显示的条件。</p><h2 id="uiselector-findone" tabindex="-1"><a class="header-anchor" href="#uiselector-findone" aria-hidden="true">#</a> UiSelector.findOne()</h2><ul><li>返回 {<a href="../automator/uiobject">UiObject</a>}</li></ul><p>根据当前的选择器所确定的筛选条件，对屏幕上的控件进行搜索，直到屏幕上出现满足条件的一个控件为止，并返回该控件。如果找不到控件，当屏幕内容发生变化时会重新寻找，直至找到。</p><p>需要注意的是，如果屏幕上一直没有出现所描述的控件，则该函数会阻塞，直至所描述的控件出现为止。因此此函数不会返回<code>null</code>。</p><p>该函数本来应该命名为<code>untilFindOne()</code>，但由于历史遗留原因已经无法修改。如果想要只在屏幕上搜索一次而不是一直搜索，请使用<code>findOnce()</code>。</p><p>另外，如果屏幕上有多个满足条件的控件，<code>findOne()</code>采用深度优先搜索(DFS)，会返回该搜索算法找到的第一个控件。注意控件找到的顺序有时会起到作用。</p><h2 id="uiselector-findone-timeout" tabindex="-1"><a class="header-anchor" href="#uiselector-findone-timeout" aria-hidden="true">#</a> UiSelector.findOne(timeout)</h2><ul><li><code>timeout</code> {number} 搜索的超时时间，单位毫秒</li><li>返回 {<a href="../automator/uiobject">UiObject</a>}</li></ul><p>根据当前的选择器所确定的筛选条件，对屏幕上的控件进行搜索，直到屏幕上出现满足条件的一个控件为止，并返回该控件；如果在timeout毫秒的时间内没有找到符合条件的控件，则终止搜索并返回<code>null</code>。</p><p>该函数类似于不加参数的<code>findOne()</code>，只不过加上了时间限制。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//启动Auto.js</span>
<span class="token function">launchApp</span><span class="token punctuation">(</span><span class="token string">&quot;Auto.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//在6秒内找出日志图标的控件</span>
<span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;action_log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//如果找到控件则点击</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>w <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    w<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token comment">//否则提示没有找到</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;没有找到日志图标&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uiselector-findonce" tabindex="-1"><a class="header-anchor" href="#uiselector-findonce" aria-hidden="true">#</a> UiSelector.findOnce()</h2><ul><li>返回 {<a href="../automator/uiobject">UiObject</a>}</li></ul><p>根据当前的选择器所确定的筛选条件，对屏幕上的控件进行搜索，如果找到符合条件的控件则返回该控件；否则返回<code>null</code>。</p><h2 id="uiselector-findonce-i" tabindex="-1"><a class="header-anchor" href="#uiselector-findonce-i" aria-hidden="true">#</a> UiSelector.findOnce(i)</h2><ul><li><code>i</code> {number} 索引</li></ul><p>根据当前的选择器所确定的筛选条件，对屏幕上的控件进行搜索，并返回第 i + 1 个符合条件的控件；如果没有找到符合条件的控件，或者符合条件的控件个数 &lt; i, 则返回<code>null</code>。</p><p>注意这里的控件次序，是搜索算法深度优先搜索(DSF)决定的。</p><h2 id="uiselector-find" tabindex="-1"><a class="header-anchor" href="#uiselector-find" aria-hidden="true">#</a> UiSelector.find()</h2><ul><li>返回 {<a href="../automator/uiobject#uicollection">UiCollection</a>}</li></ul><p>根据当前的选择器所确定的筛选条件，对屏幕上的控件进行搜索，找到所有满足条件的控件集合并返回。这个搜索只进行一次，并不保证一定会找到，因而会出现返回的控件集合为空的情况。</p><p>不同于<code>findOne()</code>或者<code>findOnce()</code>只找到一个控件并返回一个控件，<code>find()</code>函数会找出所有满足条件的控件并返回一个控件集合。之后可以对控件集合进行操作。</p><p>可以通过empty()函数判断找到的是否为空。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;AbsListView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;找到啦&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;没找到╭(╯^╰)╮&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uiselector-untilfind" tabindex="-1"><a class="header-anchor" href="#uiselector-untilfind" aria-hidden="true">#</a> UiSelector.untilFind()</h2><ul><li>返回 {<a href="../automator/uiobject#uicollection">UiCollection</a>}</li></ul><p>根据当前的选择器所确定的筛选条件，对屏幕上的控件进行搜索，直到找到至少一个满足条件的控件为止，并返回所有满足条件的控件集合。</p><p>该函数与<code>find()</code>函数的区别在于，该函数永远不会返回空集合；但是，如果屏幕上一直没有出现满足条件的控件，则该函数会保持阻塞。</p><h2 id="uiselector-exists" tabindex="-1"><a class="header-anchor" href="#uiselector-exists" aria-hidden="true">#</a> UiSelector.exists()</h2><ul><li>返回 {Boolean}</li></ul><p>判断屏幕上是否存在控件符合选择器所确定的条件。例如要判断某个文本出现就执行某个动作，可以用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;某个文本&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//要支持的动作</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uiselector-waitfor" tabindex="-1"><a class="header-anchor" href="#uiselector-waitfor" aria-hidden="true">#</a> UiSelector.waitFor()</h2><p>等待屏幕上出现符合条件的控件；在满足该条件的控件出现之前，该函数会一直保持阻塞。</p><p>例如要等待包含&quot;哈哈哈&quot;的文本控件出现的代码为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">textContains</span><span class="token punctuation">(</span><span class="token string">&quot;哈哈哈&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="uiselector-filter-f" tabindex="-1"><a class="header-anchor" href="#uiselector-filter-f" aria-hidden="true">#</a> UiSelector.filter(f)</h2><ul><li><code>f</code> {Function} 过滤函数，参数为UiObject，返回值为boolean</li></ul><p>为当前选择器附加自定义的过滤条件。</p><p>例如，要找出屏幕上所有文本长度为10的文本控件的代码为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> uc <span class="token operator">=</span> <span class="token function">className</span><span class="token punctuation">(</span><span class="token string">&quot;TextView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">w</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> w<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,90);function S(j,U){const s=c("ExternalLinkIcon");return i(),l("div",null,[u,a("p",null,[n("有关正则表达式，可以查看"),a("a",d,[n("正则表达式 - 菜鸟教程open in new window"),t(s)]),n("。")]),r,a("p",null,[n("有关正则表达式，可以查看"),a("a",h,[n("正则表达式 - 菜鸟教程open in new window"),t(s)]),n("。")]),k,a("ul",null,[a("li",null,[b,n(' {string} 控件的id，以"包名:id/"开头，例如"'),a("a",f,[n("com.tencent.mm"),t(s)]),n(':id/send_btn"。'),m,n('，这时会以当前正在运行的应用的包名来补全id。例如id("send_btn"),在界面想当于id("com.tencent.mobileqq:id/send_btn")。')])]),g,a("p",null,[n("有关正则表达式，可以查看"),a("a",q,[n("正则表达式 - 菜鸟教程open in new window"),t(s)]),n("。")]),v,a("p",null,[n("有关正则表达式，可以查看"),a("a",x,[n("正则表达式 - 菜鸟教程open in new window"),t(s)]),n("。")]),w])}const O=o(p,[["render",S],["__file","selector.html.vue"]]);export{O as default};
