import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as i,d as n,e as s,b as t,w as e,f as o}from"./app-ff93bfbc.js";const u={},r=o("<p>datastore即本地存储，采用key-value形式存储，类似于第一代API中的<code>storages</code>模块，并增加了异步读取、数据加密、自定义序列化的功能。</p><p>datastore支持<code>number</code>、<code>boolean</code>、<code>string</code>、<code>Array</code>、<code>Object</code>、<code>null</code>、<code>undefined</code>等可转换为json的数据类型。</p><p>datastore保存的数据除非应用被卸载或者被主动删除，否则会一直保留。</p><p>不同应用的数据是隔离的，也即在Auto.js Pro本体和打包的应用中的数据并不互通；同一应用的不同脚本的数据是共享的，在datastore不加密的情况下，任何脚本只要知道datastore名称便可以获取到相应的数据。</p>",4),d=n("code",null,"encryptionKey",-1),k=o(`<p>另外，datastore保存的数据和第一代API的<code>storages</code>并不互通，即使名称相同，它们之间的数据也不共享。</p><p><strong><code>示例</code></strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> createDatastore <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;datastore&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建本地存储，其名称为example.test</span>
<span class="token keyword">const</span> datastore <span class="token operator">=</span> <span class="token function">createDatastore</span><span class="token punctuation">(</span><span class="token string">&#39;example.test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在本地存储中写入值</span>
    <span class="token keyword">await</span> datastore<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 从存储中获取值</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;get hello:&#39;</span><span class="token punctuation">,</span> <span class="token keyword">await</span> datastore<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 移除本地存储的值，并返回被移除的值</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;remove hello:&#39;</span><span class="token punctuation">,</span> <span class="token keyword">await</span> datastore<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 检查是否包含某个key</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;contains hello:&#39;</span><span class="token punctuation">,</span> <span class="token keyword">await</span> datastore<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 保存和读取复杂对象（对象必须是可转换为JSON的数据）</span>
    <span class="token keyword">await</span> datastore<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;versions&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">autojspro</span><span class="token operator">:</span> process<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>autojspro<span class="token punctuation">,</span> <span class="token literal-property property">nodejs</span><span class="token operator">:</span> process<span class="token punctuation">.</span>version <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> versions <span class="token operator">=</span> <span class="token keyword">await</span> datastore<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;versions&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;versions:&#39;</span><span class="token punctuation">,</span> versions<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 清空本地存储</span>
    <span class="token keyword">await</span> datastore<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><h3 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h3>`,5),v=n("h3",{id:"函数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#函数","aria-hidden":"true"},"#"),s(" 函数")],-1),m=n("h2",{id:"函数-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#函数-1","aria-hidden":"true"},"#"),s(" 函数")],-1),h=n("h3",{id:"createdatastore",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#createdatastore","aria-hidden":"true"},"#"),s(" createDatastore")],-1),f=n("strong",null,"createDatastore",-1),g=n("code",null,"name",-1),_=n("code",null,"options?",-1),b=n("code",null,"Datastore",-1),y=o(`<p>创建一个本地存储。不同名称的本地存储的数据是隔开的，而相同名称的本地存储的数据是共享的。</p><p>若本地存储已加密，并且创建时未指定或指定了错误的密钥，则创建时也不会发生错误，在获取数据时可能获取到错误的数据或者抛出反序列化异常。</p><p><strong><code>示例</code></strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建加密的本地存储，密钥为长度16, 32或64的字符串</span>
<span class="token keyword">const</span> encrptedDatastore <span class="token operator">=</span> <span class="token function">createDatastore</span><span class="token punctuation">(</span><span class="token string">&#39;example.encrypted&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">encryptionKey</span><span class="token operator">:</span> <span class="token string">&#39;bCGwOgwzsCqXQFaW&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用加密的本地存储保存数据</span>
    <span class="token keyword">await</span> encrptedDatastore<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;timestamp&#39;</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 从加密的本地存储中读取数据</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;timestamp:&#39;</span><span class="token punctuation">,</span> <span class="token keyword">await</span> encrptedDatastore<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;timestamp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h4>`,5),w=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"名称"),n("th",{style:{"text-align":"left"}},"类型"),n("th",{style:{"text-align":"left"}},"描述")])],-1),x=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"name")]),n("td",{style:{"text-align":"left"}},[n("code",null,"string")]),n("td",{style:{"text-align":"left"}},"为创建的本地存储数据命名")],-1),D=n("td",{style:{"text-align":"left"}},[n("code",null,"options?")],-1),j={style:{"text-align":"left"}},O=n("code",null,"DatastoreOptions",-1),N=n("td",{style:{"text-align":"left"}},"创建的本地存储的选项",-1),A=n("h4",{id:"返回值",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#返回值","aria-hidden":"true"},"#"),s(" 返回值")],-1),C=n("code",null,"Datastore",-1);function S(V,z){const a=c("RouterLink");return l(),i("div",null,[r,n("p",null,[s("若要保存稍微敏感的数据，可以在创建datastore时指定"),d,s("对本地存储进行加密。但是需要注意，其他人可能通过你的代码获取密钥并解密数据，保存在客户端的数据相对是不安全的。参见"),t(a,{to:"/v9/generated/interfaces/datastore.DatastoreOptions.html#encryptionkey"},{default:e(()=>[s("encryptionKey")]),_:1}),s("。")]),k,n("ul",null,[n("li",null,[t(a,{to:"/v9/generated/interfaces/datastore.Datastore.html"},{default:e(()=>[s("Datastore")]),_:1})]),n("li",null,[t(a,{to:"/v9/generated/interfaces/datastore.DatastoreEditor.html"},{default:e(()=>[s("DatastoreEditor")]),_:1})]),n("li",null,[t(a,{to:"/v9/generated/interfaces/datastore.DatastoreOptions.html"},{default:e(()=>[s("DatastoreOptions")]),_:1})]),n("li",null,[t(a,{to:"/v9/generated/interfaces/datastore.Serializer.html"},{default:e(()=>[s("Serializer")]),_:1})])]),v,n("ul",null,[n("li",null,[t(a,{to:"/v9/generated/modules/datastore.html#createdatastore"},{default:e(()=>[s("createDatastore")]),_:1})])]),m,h,n("p",null,[s("▸ "),f,s("("),g,s(", "),_,s("): "),t(a,{to:"/v9/generated/interfaces/datastore.Datastore.html"},{default:e(()=>[b]),_:1})]),y,n("table",null,[w,n("tbody",null,[x,n("tr",null,[D,n("td",j,[t(a,{to:"/v9/generated/interfaces/datastore.DatastoreOptions.html"},{default:e(()=>[O]),_:1})]),N])])]),A,n("p",null,[t(a,{to:"/v9/generated/interfaces/datastore.Datastore.html"},{default:e(()=>[C]),_:1})])])}const K=p(u,[["render",S],["__file","datastore.html.vue"]]);export{K as default};
