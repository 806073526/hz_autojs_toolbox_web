import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as u,d as n,e as s,b as a,w as p,f as t}from"./app-ff93bfbc.js";const r={},d=t(`<h1 id="阅读须知" tabindex="-1"><a class="header-anchor" href="#阅读须知" aria-hidden="true">#</a> 阅读须知</h1><p>注意</p><p>本文档为Pro 9新增的基于Node.js的第二代API的文档（第一代API仍然保留可用）。如果你想查看的是旧的第一代API的文档，请在菜单栏切换。</p><blockquote><p>本文档完善中；加入内测请加QQ群569938976。内测版本有Bug为正常情况，请积极反馈和包容。内测群禁止讨论敏感、违法话题，否则一律永久拉黑。</p></blockquote><p>Auto.js Pro 9是Auto.js Pro的全新版本，除了编辑器、打包等新功能外，最重要的是带来了<strong>基于Node.js的引擎和全新的第二代API</strong>（第一代API仍然保留可用），伴随着庞大的npm生态（接近200万个npm包），并仍然支持和Android/Java交互（也即可在Node.js中使用Android/Java API）。</p><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><h3 id="用node-js引擎运行代码" tabindex="-1"><a class="header-anchor" href="#用node-js引擎运行代码" aria-hidden="true">#</a> 用Node.js引擎运行代码</h3><p>为了向前兼容，Pro 9中的代码仍然默认为旧的Rhino引擎运行，要使用新的Node.js引擎可以用以下任一方式：</p><ol><li>文件头带上<code>&quot;nodejs&quot;;</code>，例如：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 打印nodejs的版本</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Node.js版本: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>process<span class="token punctuation">.</span>version<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),k=n("code",null,".node.js",-1),m=n("code",null,".mjs",-1),v=n("code",null,".mjs",-1),h={href:"https://nodejs.org/api/esm.html",target:"_blank",rel:"noopener noreferrer"},g=t('<h3 id="使用node-js内置模块" tabindex="-1"><a class="header-anchor" href="#使用node-js内置模块" aria-hidden="true">#</a> 使用Node.js内置模块</h3><p>在Node.js中，你可以使用其自带的几十个模块，比如：</p><ul><li><strong><code>fs</code></strong>: 文件系统，用于读写文件（类似Pro 8中的files模块）</li><li><strong><code>http</code>, <code>https</code></strong>: http(s)请求与服务，用于发送http(s)请求或者搭建http服务器</li><li><strong><code>worker_threads</code></strong>: 工作线程，用于并行执行任务（类似于Pro 8中的threads模块）</li><li>...</li></ul>',3),b={href:"https://nodejs.org/dist/latest-v16.x/docs/api/",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>以下是一个使用内置的fs模块读取文本文件的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用readFile读取文件，参见https://nodejs.org/dist/latest-v16.x/docs/api/fs.html#fsreadfilepath-options-callback</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;/sdcard/脚本/test.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;encoding&#39;</span><span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;读取文件失败:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;读取文件成功:&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用pro-9内置模块" tabindex="-1"><a class="header-anchor" href="#使用pro-9内置模块" aria-hidden="true">#</a> 使用Pro 9内置模块</h3><p>作为对Node.js内置模块的补充，Pro 9将部分Pro 8的模块迁移到了Pro 9的API中，比如：</p><ul><li><strong><code>app</code></strong>: 用于启动其他应用、获取其他应用信息，发送广播、邮件等</li><li><strong><code>ui</code></strong>: 用于显示自定义界面、Web界面</li><li><strong><code>accessibility</code></strong>: 用于使用无障碍API完成自动化任务</li><li>...</li></ul><blockquote><p>在Pro 9中，所有模块均需要使用<code>require()</code>来导入才能使用，而不能像Pro 8一样直接使用全局变量。比如不能直接用<code>app</code>或<code>$app</code>变量，而需要用<code>const app = require(&#39;app&#39;)</code>来导入模块。</p></blockquote><p>所有模块的列表可在本文档右侧或右上角菜单中查看。</p>`,7),q=n("code",null,"requestScreenCapture",-1),j=n("code",null,"await",-1),_=n("code",null,"then",-1),y=n("code",null,"setClip()",-1),w=n("code",null,"getClip()",-1),x=t(`<p>以下是一个使用media_projection模块请求截图权限，使用image模块寻找图片的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用解构语法导入模块的部分函数和变量</span>
<span class="token comment">// 当然也可以用const image = require(&quot;image&quot;)再使用image.readImage()，但相对繁琐</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>readImage<span class="token punctuation">,</span> findImage<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;image&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>requestScreenCapture<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;media_projection&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 主函数，用async标记以便使用await来等待结果</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 请求截图权限</span>
    <span class="token keyword">const</span> capturer <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">requestScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 读取要寻找的图片</span>
    <span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readImage</span><span class="token punctuation">(</span><span class="token string">&quot;./template.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取下一帧截图图片</span>
    <span class="token keyword">const</span> capture <span class="token operator">=</span> <span class="token keyword">await</span> capturer<span class="token punctuation">.</span><span class="token function">nextImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 在截图中模板匹配template</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">findImage</span><span class="token punctuation">(</span>capture<span class="token punctuation">,</span> template<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 打印结果</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;findImage: &#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 停止截图</span>
    capturer<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 回收图片</span>
    template<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 执行主函数</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用npm安装第三方模块" tabindex="-1"><a class="header-anchor" href="#使用npm安装第三方模块" aria-hidden="true">#</a> 使用npm安装第三方模块</h3><p>在npm上有大量的第三方模块，这些模块绝大部分都能在Pro 9中使用。在使用它们之前需要用npm命令来安装模块。</p><ol><li>npm包需要项目才能安装。在Pro 9文件管理中点击右下角菜单，选择项目，在模板中选择Node.js项目。</li><li>在新建项目页面，填好应用名称、包名（包名需要包含英文&quot;.&quot;，比如com.example），点击确定</li><li>在项目文件夹中，点击工具栏的项目图标，点击终端</li><li>输入&quot;npm i --no-bin-links 模块名称&quot;来安装npm包，安装后就可以在项目的代码中使用该模块</li></ol><p>以用于生成UUID的uuid模块为例，整个过程如下：</p><figure><img src="https://autojspro-apk-1252460104.cos.ap-guangzhou.myqcloud.com/npm-install.gif" alt="npm-install" tabindex="0" loading="lazy"><figcaption>npm-install</figcaption></figure>`,7),P={href:"/https://www.npmjs.com/package/uuid",target:"_blank",rel:"noopener noreferrer"},I=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> uuid <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;uuid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;uuid:&quot;</span><span class="token punctuation">,</span> uuid<span class="token punctuation">.</span><span class="token function">v4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后续需要安装其他模块，也都在终端中，通过<code>cd</code>命令进入相应的项目目录。</p>`,2),A={href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"},N=t('<blockquote><p>之所以要用<code>--no-bin-links</code>选项，是因为很多npm模块会在安装时链接一些可执行脚本到<code>node_modules/.bin</code>目录，但是Android的内部存储分区(sdcard)的文件系统不支持符号链接，因此我们需要使用该选项来禁用它。但是与此同时，我们常常会在npm脚本中用到这些可执行文件，例如安装webpack后运行webpack命令，安装react后运行react-scripts命令，此时只能执行具体路径的js文件来代替，比如用<code>node node_modules/webpack/bin/webpack.js</code>来代替。另外一个方案是将默认脚本文件夹迁移到app私有目录，这里的文件系统是支持符合链接的，你可以在设置中修改默认脚本文件夹为&quot;~&quot;，但是需要注意，私有目录会在卸载APP后被删除，因此，</p></blockquote><h3 id="安装npm全局模块" tabindex="-1"><a class="header-anchor" href="#安装npm全局模块" aria-hidden="true">#</a> 安装npm全局模块</h3><p>Pro 9内置的npm也可安装全局模块，比如typescript编译ts文件，webpack-cli打包js文件等。</p><p>在终端中执行<code>npm i -g typescript</code>即可安装typescript模块，之后就可以在终端中执行<code>tsc</code>命令来编译ts文件。</p><blockquote><p>注意！请勿升级内置的npm版本，否则可能遇到意料之外的问题；另外安装全局模块时不能用<code>--no-bin-links</code>参数，否则将无法找到相应的命令。</p></blockquote><h3 id="调用java-android-api" tabindex="-1"><a class="header-anchor" href="#调用java-android-api" aria-hidden="true">#</a> 调用Java/Android API</h3>',6),J=t(`<p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 获取$java对象，用于和Java交互</span>
<span class="token keyword">const</span> $java <span class="token operator">=</span> $autojs<span class="token punctuation">.</span>java<span class="token punctuation">;</span>
<span class="token comment">// 加载Java/Android类</span>
<span class="token keyword">const</span> StringBuilder <span class="token operator">=</span> $java<span class="token punctuation">.</span><span class="token function">findClass</span><span class="token punctuation">(</span><span class="token string">&#39;java.lang.StringBuilder&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建这个类的对象</span>
<span class="token keyword">const</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用这个类的方法</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),B=n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"j"),n("mi",null,"a"),n("mi",null,"v"),n("mi",null,"a"),n("mtext",null,"提供了调用"),n("mi",null,"J"),n("mi",null,"a"),n("mi",null,"v"),n("mi",null,"a"),n("mtext",null,"方法时切换线程等"),n("mi",null,"A"),n("mi",null,"P"),n("mi",null,"I"),n("mtext",null,"，参见"),n("mo",{stretchy:"false"},"[")]),n("annotation",{encoding:"application/x-tex"},"java提供了调用Java方法时切换线程等API，参见[")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"ja"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord cjk_fallback"},"提供了调用"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.09618em"}},"J"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord cjk_fallback"},"方法时切换线程等"),n("span",{class:"mord mathnormal"},"A"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"I"),n("span",{class:"mord cjk_fallback"},"，参见"),n("span",{class:"mopen"},"[")])])],-1),S={href:"https://pro.autojs.org/docs/v9/interfaces/globals.Java.md",target:"_blank",rel:"noopener noreferrer"},O=t(`<p>除了这种比较原始的方式外，Pro 9提供了<code>rhino</code>模块，用于提供类似Pro 8中rhino引擎类似的和Java交互的方式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 调用install后，可以直接java.*, android.*等来访问Java类</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;rhino&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> StringBuilder <span class="token operator">=</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>StringBuilder<span class="token punctuation">;</span>
<span class="token keyword">const</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">&quot;YXV0b2pz&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>暂时还不支持importClass/importPackage等函数；也不支持JavaAdapter。</p></blockquote><p>有关Java/Android交互的更多信息，请等待后续单独章节展开。</p><h2 id="线程与线程模型" tabindex="-1"><a class="header-anchor" href="#线程与线程模型" aria-hidden="true">#</a> 线程与线程模型</h2><h3 id="单线程与多线程" tabindex="-1"><a class="header-anchor" href="#单线程与多线程" aria-hidden="true">#</a> 单线程与多线程</h3><p>Node.js使用遵循带有事件循环的单线程模型，在Pro 9中也是如此，因此你不能像Pro 8那样使用threads模块启动新线程。</p><p>大多数情况你也不必使用线程，一些耗时操作，比如findImage、click等都被封装为异步操作，完全可以并行执行；调用一些Java API时，若这些API是异步操作，也可以指定Java函数执行的线程，比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;rhino&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> BitmapFactory <span class="token operator">=</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>BitmapFactory<span class="token punctuation">;</span>
<span class="token comment">// 当前目录下的test.png文件</span>
<span class="token keyword">const</span> file <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./test.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 调用 BitmapFactory.decodeFile(file)来解码图片文件为Bitmap</span>
    <span class="token comment">// 这是一个耗时操作，我们指定在io线程执行</span>
    <span class="token keyword">const</span> bitmap <span class="token operator">=</span> <span class="token keyword">await</span> BitmapFactory<span class="token punctuation">.</span>decodeFile<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;io&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    bitmap<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),U=n("code",null,"worker_threads",-1),R={href:"https://nodejs.org/dist/latest-v16.x/docs/api/worker_threads.html",target:"_blank",rel:"noopener noreferrer"},W=t(`<blockquote><p>****目前，worker_threads中的子线程无法访问autojs相关的API和模块，比如$autojs, 只能访问Node.js内置的模块和对象。</p></blockquote><h3 id="ui线程" tabindex="-1"><a class="header-anchor" href="#ui线程" aria-hidden="true">#</a> UI线程</h3><p>默认情况下，Node.js引擎运行在非UI线程，但是这样无法操作界面相关的内容；因此Pro 9提供了UI线程的选项，通过在文件头用字符串&quot;ui-thread&quot;或&quot;ui&quot;来标识，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;nodejs ui&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>isUiThread<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;ui&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isUiThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&quot;ui&quot;和&quot;ui-thread&quot;是有区别的：</p><ul><li><strong><code>ui</code></strong>: 用于显示界面（Activity）的情况，比如启动后展示一个Web页面用于用户操作，参见UI模块的文档。</li><li><strong><code>ui-thread</code></strong>: 不在启动时显示一个新页面，但是代码运行在UI线程，一般用于无界面的代码中显示和控制悬浮窗，参见悬浮窗模块的文档。</li></ul><p>另外，若在非UI线程中，偶尔需要操作UI元素，比如显示和控制対话框，则可以用前述的调用Java API时切换线程的方式来实现。比如<code>view.setText.invoke(view, [&quot;hello&quot;], &quot;ui&quot;)</code>。</p><h2 id="阅读模块文档的指引" tabindex="-1"><a class="header-anchor" href="#阅读模块文档的指引" aria-hidden="true">#</a> 阅读模块文档的指引</h2><p>模块的文档是通过代码生成的，阅读文档需要一些技巧，否则可能觉得文档晦涩难懂。</p>`,9),C=t(`<ul><li><strong><code>接口</code></strong>: 接口，第一次看文档，直接跳过这部分内容。</li><li><strong><code>变量</code></strong>: 本模块的变量。我们在这个列表中看到<code>packageName</code>，代表app模块有一个叫<code>packageName</code>的变量。可以用以下方式使用它：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>点击该变量的文档，可以看到前面有<code>常量</code>标记，表示这是一个常量，不能修改他的值，也即<code>app.packageName = &quot;xxx&quot;</code>会报错；类型是string，字符串。结合变量名可以知道，这是当前app的包名。当然后面会有变量的中文注释，只是目前还没写，得通过变量名去猜测。</p><ul><li><strong><code>函数</code></strong>: 本模块的函数。我们在这个列表中看到很多函数，比如<code>editFile</code>, <code>startActivity</code>。这些都是app模块的函数，以<code>startActivity</code>为例，点击其文档可以看到：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">startActivity</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> IntentOptionsWithRoot<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它有一个参数target，类似是string或IntentOptionsWithRoot。string我们都知道是字符串，也即类似Pro 8中的<code>app.startActivity(&quot;console&quot;)</code>的用法。那么IntentOptionsWithRoot呢？</p>`,6),F=n("code",null,"root",-1),$=t(`<p>综合起来，我们可以知道IntentOptionsWithRoot是要我们传入一个对象，这个对象可以有root、action等可选属性，因此我们可以这样写：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;root&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;action&quot;</span><span class="token operator">:</span> <span class="token string">&quot;android.intent.action.VIEW&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://pro.autojs.org&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="路线规划" tabindex="-1"><a class="header-anchor" href="#路线规划" aria-hidden="true">#</a> 路线规划</h2>`,3),V={href:"https://github.com/hyb1996/Auto.js/issues/526",target:"_blank",rel:"noopener noreferrer"};function E(L,M){const o=c("ExternalLinkIcon"),e=c("RouterLink");return l(),u("div",null,[d,n("ol",null,[n("li",null,[s("文件以"),k,s("或"),m,s("结尾。"),v,s("结尾则会同时启用ES Module功能，参见"),n("a",h,[s("https://nodejs.org/api/esm.html"),a(o)])])]),g,n("p",null,[s("全部的Node.js内置模块及其文档参见"),n("a",b,[s("Node.js 16.x文档"),a(o)]),s("，")]),f,n("p",null,[s("每个模块的API可能与Pro 8有所不同，大部分API被设计为异步而非同步阻塞，一些全局函数、变量被设计为模块内函数。比如，"),q,s("函数在Pro 8版本中是一个同步函数，请求截图权限，在用户操作前会一直阻塞，因此无法在UI线程中执行，在Pro 9中则是一个异步函数，返回一个Promise，需要用"),j,s("或"),_,s("来得到结果；"),y,s(", "),w,s("在Pro 8中是全局函数，在Pro 9中则属于模块]"),a(e,{to:"/v9/modules/clip_manager.html"},{default:p(()=>[s("clip_manager")]),_:1}),s("的函数。")]),x,n("p",null,[s("之前就可以参考"),n("a",P,[s("uuid模块的文档"),a(o)]),s("在main.js中使用该模块：")]),I,n("p",null,[s("要搜索模块，请在"),n("a",A,[s("npm官网"),a(o)]),s("中搜索。")]),N,n("p",null,[s("Pro 9提供了全局对象"),a(e,{to:"/v9/interfaces/globals.AutoJs.html"},{default:p(()=>[s("$autojs")]),_:1}),s("，提供一些特殊的API，比如调用Java API。")]),J,n("p",null,[s("除了findClass外，"),B,s("java对象的文档]("),n("a",S,[s("https://pro.autojs.org/docs/v9/interfaces/globals.Java.md"),a(o)]),s(")。")]),O,n("p",null,[s("如果以上均不能满足你的需求，你需要纯JavaScript计算逻辑运行于单独的线程，那么需要使用Node.js的"),U,s("模块，参见"),n("a",R,[s("Node.js文档"),a(o)]),s("和网上相关资料。worker_thread不像Pro 8中的threads子线程那样可以和主线程共享所有公共、全局变量等，需要额外的通信，这里就不展开了。")]),W,n("p",null,[s("以app模块为例，打开"),a(e,{to:"/v9/modules/app.html"},{default:p(()=>[s("app模块文档")]),_:1}),s("后，会看到一个列表：")]),C,n("p",null,[s("点击"),a(e,{to:"/v9/interfaces/app.IntentOptionsWithRoot.html"},{default:p(()=>[s("IntentOptionsWithRoot")]),_:1}),s("可以看到IntentOptionsWithRoot的文档。先看Properties这一栏，是描述该接口的属性，有"),F,s("这个boolean属性，前面有Optional标签，表示是可选属性；再看前面的继承关系，表示IntentOptionsWithRoot继承于IntentOptions，跳转到"),a(e,{to:"/v9/interfaces/app.IntentOptions.html"},{default:p(()=>[s("IntentOptions")]),_:1}),s("，可以看到它有很多属性，比如string类型的action。其实也可以不跳转过去，勾选右上角的Inherited，可以看到所有继承过来的属性。")]),$,n("p",null,[s("关于V9版本的路线规划，请参考"),n("a",V,[s("https://github.com/hyb1996/Auto.js/issues/526"),a(o)]),s(" 。")])])}const Q=i(r,[["render",E],["__file","index.html.vue"]]);export{Q as default};
