import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as u,d as n,e as s,b as p,f as a}from"./app-ff93bfbc.js";const l={},i=a(`<p>WebSocket是一种网络传输协议，可在单个TCP连接上进行全双工通信。WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输。</p><p>在正常情况中，每个WebSocket都会经历一系列状态（生命周期事件）：</p><ul><li>连接中(connecting)：每个WebSocket的初始状态。此时若发生消息，则消息可能会被排队，直到WebSocket打开之前它们不会被传输。</li><li>打开状态(open)：WebSocket字已被远端接受并且完全可操作。任一方向的消息队列都立即开始传输。</li><li>关闭中(closing)： WebSocket的某一端启动正常关闭，WebSocket将继续传输队列中的消息，但将拒绝新消息进入队列。</li><li>已关闭(closed)： WebSocket已传输其所有消息并已收到来自对端的所有消息。</li></ul><p>在异常情况下，WebSocket可能由于HTTP升级问题、连接问题或任一端异常关闭，此时WebSocket会进入canceled状态：</p><ul><li>已取消(canceled)： WebSocket连接中断。任何一端队列中的消息可能尚未传输到对端。</li></ul><p>请注意，每个端的状态过程都是独立的。到达正常关闭状态表示它已发送其所有传出消息并接收其所有传入消息，但不保证其他对端将成功接收其所有传入消息。</p><p>在Auto.js Pro中，我们通过<code>$web.newWebSocket()</code>来创建WebSocket并监听上述生命周期事件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ws <span class="token operator">=</span> $web<span class="token punctuation">.</span><span class="token function">newWebSocket</span><span class="token punctuation">(</span><span class="token string">&quot;wss://echo.websocket.org&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">eventThread</span><span class="token operator">:</span> <span class="token string">&#39;this&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;open&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> ws</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;WebSocket已打开&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;failure&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res<span class="token punctuation">,</span> ws</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;WebSocket连接失败或中断&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;closing&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> reason<span class="token punctuation">,</span> ws</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;WebSocket关闭中&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;closed&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> reason<span class="token punctuation">,</span> ws</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;WebSocket已关闭: code = %d, reason = %s&quot;</span><span class="token punctuation">,</span> code<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="web-newwebsocket-url-options" tabindex="-1"><a class="header-anchor" href="#web-newwebsocket-url-options" aria-hidden="true">#</a> $web.newWebSocket(url[, options])</h2><ul><li><code>url</code> {string} WebSocket链接</li><li><code>options</code> {object} 可选项，包括： <ul><li><code>eventThread</code> {any} WebSocket事件派发的线程，默认为 <code>io</code><ul><li><code>io</code> 事件将在WebSocket的IO线程触发</li><li><code>this</code> 事件将在创建WebSocket的线程触发，如果该线程被阻塞，则事件也无法被及时派发</li></ul></li></ul></li></ul><p>创建一个WebSocket对象并返回。使用这个对象来监听WebSocket生命周期事件，或发送文本、二进制消息。</p><h1 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket" aria-hidden="true">#</a> WebSocket</h1><p>由<code>$web.newWebSocket</code>返回的对象。</p><p>需要注意的是，<strong>在Pro 9.0.10以前，WebSocket不会在脚本退出时自动关闭或取消</strong>，因此建议在这之前的版本监听<code>exit</code>事件自动取消。参见<code>WebSocket.cancel()</code>。</p><h2 id="websocket-send-text" tabindex="-1"><a class="header-anchor" href="#websocket-send-text" aria-hidden="true">#</a> WebSocket.send(text)</h2><ul><li><code>text</code> {string} 文本消息</li><li>返回 {boolean}</li></ul><p>尝试将<code>text</code>加入消息队列以使用UTF-8编码作为文本数据发送。</p><p>如果消息成功加入队列，则此方法返回<code>true</code>。若消息缓冲区(16MB)已满，则此消息将被拒绝并触发WebSocket的<code>正常关闭</code>（也即关闭时会发送完当前队列中所有消息）。在这种情况下，此方法返回 false。</p><p>若此WebSocket处于已关闭、关闭中、已取消的任何其他情况下，也会返回<code>false</code>。</p><p>此方法不会等待消息最终发送才返回，而是立即返回。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ws <span class="token operator">=</span> $web<span class="token punctuation">.</span><span class="token function">newWebSocket</span><span class="token punctuation">(</span><span class="token string">&quot;wss://echo.websocket.org&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">eventThread</span><span class="token operator">:</span> <span class="token string">&#39;this&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">text<span class="token punctuation">,</span> ws</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;接收到文本消息: &quot;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, Auto.js Pro&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回true</span>

ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;GoodBye&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="websocket-send-bytes" tabindex="-1"><a class="header-anchor" href="#websocket-send-bytes" aria-hidden="true">#</a> WebSocket.send(bytes)</h2><ul><li><code>bytes</code> {ByteString} 二进制消息</li><li>返回 {boolean}</li></ul><p>尝试将<code>bytes</code>加入消息队列以作为二进制数据发送。</p><p>如果消息成功加入队列，则此方法返回<code>true</code>。若消息缓冲区(16MB)已满，则此消息将被拒绝并触发WebSocket的<code>正常关闭</code>（也即关闭时会发送完当前队列中所有消息）。在这种情况下，此方法返回 false。</p><p>若此WebSocket处于已关闭、关闭中、已取消的任何其他情况下，也会返回<code>false</code>。</p><p>此方法不会等待消息最终发送才返回，而是立即返回。</p><p>要创建一个二进制消息，需要使用OkHttp的API，比如:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ByteString <span class="token operator">=</span> Packages<span class="token punctuation">.</span>okio<span class="token punctuation">.</span>ByteString<span class="token punctuation">;</span>

<span class="token keyword">let</span> ws <span class="token operator">=</span> $web<span class="token punctuation">.</span><span class="token function">newWebSocket</span><span class="token punctuation">(</span><span class="token string">&quot;wss://echo.websocket.org&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">eventThread</span><span class="token operator">:</span> <span class="token string">&#39;this&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">text<span class="token punctuation">,</span> ws</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;接收到文本消息: &quot;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;binary&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">bytes<span class="token punctuation">,</span> ws</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;收到二进制消息：大小 &quot;</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;hex: &quot;</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span><span class="token function">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;base64: &quot;</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span><span class="token function">base64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;md5: &quot;</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;bytes: &quot;</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>ByteString<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>$files<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span><span class="token string">&#39;./test.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从byte\\[\\]创建二进制数据并发送</span>
ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>ByteString<span class="token punctuation">.</span><span class="token function">encodeUtf8</span><span class="token punctuation">(</span><span class="token string">&#39;你好&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将字符串按UTF8编码并创建二进制数据并发送</span>
ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>ByteString<span class="token punctuation">.</span><span class="token function">decodeBase64</span><span class="token punctuation">(</span><span class="token string">&#39;QXV0by5qcyBQcm8geXlkcw==&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解码Base64并创建二进制数据并发送</span>
ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>ByteString<span class="token punctuation">.</span><span class="token function">decodeHex</span><span class="token punctuation">(</span><span class="token string">&#39;621172314F60&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解码hex并创建二进制数据并发送</span>

ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),k={href:"https://github.com/duego/android-okhttp/blob/master/okio/src/main/java/okio/ByteString.java",target:"_blank",rel:"noopener noreferrer"},r=a(`<h2 id="websocket-cancel" tabindex="-1"><a class="header-anchor" href="#websocket-cancel" aria-hidden="true">#</a> WebSocket.cancel()</h2><p>立即关闭WebSocket持有的资源，丢弃整个消息队列的消息。若WebSocket已关闭或已取消，则不会执行任何操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ws <span class="token operator">=</span> $web<span class="token punctuation">.</span><span class="token function">newWebSocket</span><span class="token punctuation">(</span><span class="token string">&quot;wss://echo.websocket.org&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">eventThread</span><span class="token operator">:</span> <span class="token string">&#39;this&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 脚本退出时取消WebSocket</span>
events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;exit&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    ws<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="websocket-close-code-reason" tabindex="-1"><a class="header-anchor" href="#websocket-close-code-reason" aria-hidden="true">#</a> WebSocket.close(code, reason)</h2>`,4),d=n("code",null,"code",-1),b={href:"http://tools.ietf.org/html/rfc6455#section-7.4",target:"_blank",rel:"noopener noreferrer"},v=n("ul",null,[n("li",null,"1000 表示正常关闭。"),n("li",null,"1001 表示本端正在“离开”，例如服务器关闭或浏览器关闭所在页面。"),n("li",null,"1002 表示因协议错误而终止连接。"),n("li",null,"1003 表示因收到无法处理的数据类型而终止连接。"),n("li",null,"...")],-1),m=n("li",null,[n("code",null,"reason"),s(" {string} 关闭原因，不超过123字节的UTF-8编码数，也可以为"),n("code",null,"null")],-1),g=n("li",null,"返回 {boolean}",-1),f=a(`<p>尝试<code>正常关闭</code>此WebSocket。调用此函数后，将拒绝所有的<code>send</code>操作并返回<code>false</code>，也即不再接受新的消息；但调用函数是已经在队列中的的消息将继续传输。</p><p>若指定的<code>code</code>不在有效范围或者<code>reason</code>字符串过长，则抛出<code>IllegalArgumentException</code>。</p><p>若WebSocket处于关闭中、已关闭、已取消状态，则返回<code>false</code>；否则返回<code>true</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ws <span class="token operator">=</span> $web<span class="token punctuation">.</span><span class="token function">newWebSocket</span><span class="token punctuation">(</span><span class="token string">&quot;wss://echo.websocket.org&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">eventThread</span><span class="token operator">:</span> <span class="token string">&#39;this&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="未完待续" tabindex="-1"><a class="header-anchor" href="#未完待续" aria-hidden="true">#</a> 未完待续</h2>`,5);function h(w,S){const t=o("ExternalLinkIcon");return c(),u("div",null,[i,n("p",null,[s("更多ByteString的信息参见"),n("a",k,[s("ByteString.java"),p(t)])]),r,n("ul",null,[n("li",null,[d,s(" {number} 关闭的状态码，参见"),n("a",b,[s("RFC 6455 的第 7.4 节"),p(t)]),s("。常见的值包括： "),v]),m,g]),f])}const q=e(l,[["render",h],["__file","webSocket.html.vue"]]);export{q as default};
