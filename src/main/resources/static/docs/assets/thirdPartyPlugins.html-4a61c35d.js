import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as r,d as e,e as n,b as s,f as t}from"./app-ff93bfbc.js";const c={},d=e("h2",{id:"第三方插件",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#第三方插件","aria-hidden":"true"},"#"),n(" 第三方插件")],-1),u=e("p",null,"这里主要提供由第三方开发者开发的Auto.js插件。",-1),p=e("h2",{id:"pytorch插件",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pytorch插件","aria-hidden":"true"},"#"),n(" Pytorch插件")],-1),h=e("blockquote",null,[e("p",null,[n("本插件及文档由第三方开发者"),e("code",null,"浩然"),n("开发和提供，特此感谢。")])],-1),v={href:"https://wwwq.lanzouc.com/iruV21698xra",target:"_blank",rel:"noopener noreferrer"},m=e("p",null,[n("欲使用本模块，请安装Pytorch-AjPlugin扩展插件。并使用"),e("code",null,'let pytorch = $plugins.load("com.hraps.pytorch")'),n("代码加载。")],-1),b=e("p",null,"Pytorch模块提供了已完成的深度学习神经网络模型在安卓设备上执行的功能，可以实现常规程序难以实现的功能，如：图像识别，语言翻译，语言问答等。",-1),g=e("p",null,[n("使用前需确保已有训练完成的神经网络模型，通过Python将模型文件转化为安卓脚本型文件，通过Python函数"),e("code",null,"torch.jit.trace(model, input_tensor)"),n("。")],-1),f=e("code",null,"浩然",-1),y={href:"http://tangshusen.me/Dive-into-DL-PyTorch/#/",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>可通过<code>pytorch.debugOd()</code>测试设备支持性，也可看到本模块在图像检测上的优质识别效果。</p><h3 id="pytorch权重导出指导" tabindex="-1"><a class="header-anchor" href="#pytorch权重导出指导" aria-hidden="true">#</a> Pytorch权重导出指导</h3><p>需要将<code>.pt</code>文件转换为<code>.torchscript.pt</code>文件才可在移动端进行适配，通过张量流追踪，将模型转化至移动端可使用。模型对第三方支持库并不友好，建议使用纯Pytorch编写神经网络模型并训练。</p><p>以下为电脑端Python转换脚本。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>model = make_model(&#39;resnet18&#39;) # 导入模型结构
model.load_state_dict(torch.load(model_pt)) # 加载训练完成的权重参数
model.eval() # 模型设为评估模式,一定要开启该模式
input_tensor = torch.rand(1,3,224,224) # 设定输入数据格式,此处模拟了224*224的rgb3通道图片的格式，生成随机张量。
mobile = torch.jit.trace(model, input_tensor,strict=False) # 模型转化
mobile = optimize_for_mobile(mobile) # 移动端优化(可选)
mobile.save(mobile_pt) # 保存文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基层函数" tabindex="-1"><a class="header-anchor" href="#基层函数" aria-hidden="true">#</a> 基层函数</h3><h4 id="pytorch-load-path-device" tabindex="-1"><a class="header-anchor" href="#pytorch-load-path-device" aria-hidden="true">#</a> pytorch.load(path[,device])</h4><ul><li><code>path</code> {String} 模型所在路径</li><li><code>device</code> {int} 执行设备，0为CPU，1为VULKAN，默认为0。</li><li>返回 {PytorchModule}</li></ul><p>导入网络模型。仅有少部分设备支持VULKAN,可不使用device参数。</p><p>当path的值为&quot;yolov5s&quot;时会导入内置目标检测模型，当path值为&quot;textcnn时会导入内置情感分析模型。&quot;</p><h4 id="pytoch-forward-module-input" tabindex="-1"><a class="header-anchor" href="#pytoch-forward-module-input" aria-hidden="true">#</a> pytoch.forward(module,input)</h4><ul><li><code>module</code> {PytorchModule} 已导入的神经网络模型。</li><li><code>input</code> {Tensor} 模型输入张量。</li><li>返回 {Tensor} 模型的输出张量。</li></ul><p>执行网络模型向前推进，得到计算结果。</p><h4 id="pytoch-forwardtuple-module-input" tabindex="-1"><a class="header-anchor" href="#pytoch-forwardtuple-module-input" aria-hidden="true">#</a> pytoch.forwardTuple(module,input)</h4><ul><li><code>module</code> {PytorchModule} 已导入的神经网络模型。</li><li><code>input</code> {Tensor} 模型输入张量。</li><li>返回 {Tensor} 模型的输出张量。</li></ul><p>执行网络模型向前推进，得到计算结果。</p><p>与pytorch.forward()的区别在于，他返回的是输出中元组的首项，适用于对应的模型，例如目标检测模型。<br> 他的本质实际上是module.forward(IValue.from(inputTensor)).toTuple()[0].toTensor()。</p><h4 id="pytorch-destory-module" tabindex="-1"><a class="header-anchor" href="#pytorch-destory-module" aria-hidden="true">#</a> pytorch.destory(module)</h4><ul><li><code>module</code> {PytorchModule} 要释放的神经网络模型。</li></ul><p>释放神经网络。</p><h3 id="tensor类" tabindex="-1"><a class="header-anchor" href="#tensor类" aria-hidden="true">#</a> Tensor类</h3><p>张量类为神经网络的通用输入输出数据结构，便于网络的高速处理，为一个高维数组。如一张图片，大小100<em>200，有RGB 3通道，那他在传入神经网络前会先转换成100</em>200*3长的浮点数数组。</p><h4 id="pytorch-fromblob-arr-shape" tabindex="-1"><a class="header-anchor" href="#pytorch-fromblob-arr-shape" aria-hidden="true">#</a> pytorch.fromBlob(arr,shape)</h4><ul><li><code>arr</code> {List} js数组</li><li><code>shape</code> {List} 转换后张量的形状</li><li>返回 {Tensor} 生成的张量</li></ul><p>从js数组构造张量。</p><h4 id="tensor-getdataasfloatarray" tabindex="-1"><a class="header-anchor" href="#tensor-getdataasfloatarray" aria-hidden="true">#</a> tensor.getDataAsFloatArray()</h4><ul><li>返回 {List} 返回张量转换成的float浮点数组</li></ul><p>将张量转换成浮点数组。</p><h4 id="tensor-getdataas-byte-double-float-int-long-array" tabindex="-1"><a class="header-anchor" href="#tensor-getdataas-byte-double-float-int-long-array" aria-hidden="true">#</a> tensor.getDataAs[Byte/Double/Float/Int/Long]Array()</h4><ul><li>返回 {List&lt;…&gt;} 返回张量转换后的数组</li></ul><p>将张量转换成各类型数组。</p><h3 id="objectdetection-目标检测-功能函数" tabindex="-1"><a class="header-anchor" href="#objectdetection-目标检测-功能函数" aria-hidden="true">#</a> ObjectDetection 目标检测-功能函数</h3><p>目标检测用于分析图像中各类物品的位置及其类型，如有不懂可使用pytorch.debugOd()查看效果噢。</p><h4 id="pytorch-debugod-modulepath-classpath" tabindex="-1"><a class="header-anchor" href="#pytorch-debugod-modulepath-classpath" aria-hidden="true">#</a> pytorch.debugOd([modulePath,classPath])</h4><ul><li><code>modulePath</code> {String} 模型文件路径 (.pt/.pth文件)</li><li><code>classPath</code> {String} 标签名文件路径 (.txt文件)</li></ul><p>测试目标检测模型文件，启动内置调试页。</p><p>空传入可使用内置目标检测权重，测试设备支持性。即直接pytorch.debugOd()。</p><h4 id="pytorch-liveod-modulepath-classpath" tabindex="-1"><a class="header-anchor" href="#pytorch-liveod-modulepath-classpath" aria-hidden="true">#</a> pytorch.liveOd(modulePath,classPath)</h4><ul><li><code>modulePath</code> {String} 模型文件路径 (.pt/.pth文件)</li><li><code>classPath</code> {String} 标签名文件路径 (.txt文件)</li></ul><p>进入摄像头实时识别页面，查看动态推流结果。</p><h4 id="objectdetection-od-目标检测-常用函数" tabindex="-1"><a class="header-anchor" href="#objectdetection-od-目标检测-常用函数" aria-hidden="true">#</a> ObjectDetection(OD) 目标检测-常用函数</h4><p>用于自行搭建目标检测网络，提供常用的函数。</p><h4 id="pytorch-getiou-a-b" tabindex="-1"><a class="header-anchor" href="#pytorch-getiou-a-b" aria-hidden="true">#</a> pytorch.getIOU(a,b)</h4><ul><li><code>a</code> {Rect} 范围a</li><li><code>b</code> {Rect} 范围b</li><li>返回 {float} IOU值</li></ul><p>计算两矩形的重合率(IOU值)，重叠面积比总占面积。</p><h4 id="pytorch-bitmaptotensor-img-mean-std" tabindex="-1"><a class="header-anchor" href="#pytorch-bitmaptotensor-img-mean-std" aria-hidden="true">#</a> pytorch.bitmapToTensor(img[,mean,std])</h4><ul><li><code>img</code> {Bitmap} 原始图像</li><li><code>mean</code> {List} 归一化平均值，默认值为[0.485, 0.456, 0.406]</li><li><code>std</code> {List} 归一化标准差，默认值为[0.229, 0.224, 0.225]</li><li>返回 {Tensor} 图像转换后的Tensor张量</li></ul><p>将图像转换成Tensor张量类型，便于输入至网络模型。图像需使用bitmap类型，如图像是Autojs中的image类型，可通过image.getBitmap()转换至bitmap。</p><p>mean和std值用于将图片颜色归一化到一定范围之间，请根据模型训练值统一设置。不清楚可设置为[0,0,0] [1,1,1]。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>img = images.read(&quot;/sdcard/a.jpg&quot;);
inputTensor = pytorch.bitmapToTensor(img.getBitmap(),[0,0,0],[1,1,1]);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="pytorch-floatstoresults-floats-row-column-imgscalex-imgscaley-threshold" tabindex="-1"><a class="header-anchor" href="#pytorch-floatstoresults-floats-row-column-imgscalex-imgscaley-threshold" aria-hidden="true">#</a> pytorch.floatsToResults(floats,row,column,imgScaleX,imgScaleY[,threshold])</h4><ul><li><code>floats</code> {List} Yolo模型的输出数组</li><li><code>row</code> {int} 输出结果个数</li><li><code>column</code> {int} 每个结果的数据量</li><li><code>imgScaleX</code> {float} 图像X轴缩放比例</li><li><code>imgScaleY</code> {float} 图像Y轴缩放比例</li><li><code>threshold</code> {float} 保留结果的置信度最低值</li><li>返回 {List} 所有的输出结果</li></ul><p>将Yolo模型的输出结果数组转换成识别结果类。floats为输出总数据，floats.length应等于row*column。</p><p>在输入模型时有将图片压缩成网络的固定输入大小，在这可通过输入imgScale的XY值反向计算结果位置在原图中的坐标。</p><p>Yolo类模型的输出由一个个检测块构成，每个检测块会固定输出结果中心点在其中的预测结果，每个检测结果由置信度，位置，每个类型的概率构成。<br> 如在内置Yolo模型中，每个输出包含这个结果的边框(x,y,w,h)共4个值，这个结果的置信度(即正确率) 1个值，这个结果是每个类型的概率，如输出会有[car:0.2,bus:0.9,boat:0.1]这类数据，内置模型共可识别80种物品。所以最终的column值为4+1+80=85。<br> row块即为检测块的数量，每个检测块有column个输出数量。</p><h4 id="pytorch-usenms-results-limit-threshold" tabindex="-1"><a class="header-anchor" href="#pytorch-usenms-results-limit-threshold" aria-hidden="true">#</a> pytorch.useNMS(results[,limit,threshold])</h4><ul><li><code>results</code> {List} 全部输出结果</li><li><code>limit</code> {int} 最大剩余结果限制</li><li><code>threshold</code> {float} 边框重复率阈值</li><li>返回 {List} NMS处理后的结果</li></ul><p>过滤概率重复的结果。NMS算法即NonMaxSuppression，去除边框中重复率高于threshold的结果。</p><h3 id="odresult类" tabindex="-1"><a class="header-anchor" href="#odresult类" aria-hidden="true">#</a> OdResult类</h3><p>用于表示目标检测单个结果的类，包含rect，score，classId三个参数的复合类。</p><h4 id="odresuult-score" tabindex="-1"><a class="header-anchor" href="#odresuult-score" aria-hidden="true">#</a> odResuult.score</h4><ul><li><code>score</code> {float} 获取该结果的置信度，类似于正确率</li></ul><h4 id="odresult-rect" tabindex="-1"><a class="header-anchor" href="#odresult-rect" aria-hidden="true">#</a> odResult.rect</h4><ul><li><code>rect</code> {Rect} 获取该结果的边框位置，有关rect可见images模块的文档</li></ul><h4 id="odresult-classindex" tabindex="-1"><a class="header-anchor" href="#odresult-classindex" aria-hidden="true">#</a> odResult.classIndex</h4><ul><li><code>classIndex</code> {int} 该目标的类型序号</li></ul><h3 id="naturallanguageprocessing-nlp-自然语言类处理函数" tabindex="-1"><a class="header-anchor" href="#naturallanguageprocessing-nlp-自然语言类处理函数" aria-hidden="true">#</a> NaturalLanguageProcessing(NLP) 自然语言类处理函数</h3><p>提供自然语言处理模型的相关函数</p><h4 id="pytorch-debugtec-modulepath-vocabpath" tabindex="-1"><a class="header-anchor" href="#pytorch-debugtec-modulepath-vocabpath" aria-hidden="true">#</a> pytorch.debugTec([modulePath,vocabPath])</h4><ul><li><code>modulePath</code> {String} 模型文件路径 (.pt/.pth文件)</li><li><code>vocabPath</code> {String} 词汇序号文件路径 (.txt文件)</li></ul><p>测试自然语言情感分析TextCNN模型文件，启动内置调试页。</p><p>空传入可使用内置情感分析权重，测试设备支持性。即直接pytorch.debugTEC()。</p><h4 id="pytorch-simplifysentence-sentence" tabindex="-1"><a class="header-anchor" href="#pytorch-simplifysentence-sentence" aria-hidden="true">#</a> pytorch.simplifySentence(sentence)</h4><ul><li><code>sentence</code> {String} 输入语句。</li><li>返回 {String} 化简后的语句。</li></ul><p>简化英文语句。仅保留字母数字并全降为小写处理。</p><h3 id="vocab类" tabindex="-1"><a class="header-anchor" href="#vocab类" aria-hidden="true">#</a> Vocab类</h3><p>词汇表类，提供较高效的词汇与序号间的转换功能。</p><h4 id="pytorch-vocabpath-path" tabindex="-1"><a class="header-anchor" href="#pytorch-vocabpath-path" aria-hidden="true">#</a> pytorch.vocabPath(path)</h4><ul><li><code>path</code> {String} 词汇表文件路径</li><li>返回 {Vocab} 词汇表实体</li></ul><p>文件应由每行一个单词构成，行号和单词的对应关系应与模型训练时使用的词向量文件一致。</p><h4 id="pytorch-vocab-words" tabindex="-1"><a class="header-anchor" href="#pytorch-vocab-words" aria-hidden="true">#</a> pytorch.vocab(words)</h4><ul><li><code>words</code> {List} 词汇列表</li><li>返回 {Vocab} 词汇表实体</li></ul><h4 id="vocab-size" tabindex="-1"><a class="header-anchor" href="#vocab-size" aria-hidden="true">#</a> vocab.size()</h4><ul><li>返回 {long} 词汇表大小</li></ul><p>获取该词汇表的内含有的词汇量。</p><h4 id="vocab-getword-id" tabindex="-1"><a class="header-anchor" href="#vocab-getword-id" aria-hidden="true">#</a> vocab.getWord(id)</h4><ul><li><code>id</code> {long} 词汇序号</li><li>返回 {String} 词汇文本</li></ul><p>获取词汇表中词汇序号对应的词汇。</p><h4 id="vocab-getid-word" tabindex="-1"><a class="header-anchor" href="#vocab-getid-word" aria-hidden="true">#</a> vocab.getId(word)</h4><ul><li><code>word</code> {String} 词汇文本</li><li>返回 {long} 词汇序号</li></ul><p>获取词汇表中词汇文本对应的序号。</p><h4 id="vocab-getwords-ids-length" tabindex="-1"><a class="header-anchor" href="#vocab-getwords-ids-length" aria-hidden="true">#</a> vocab.getWords(ids[,length])</h4><ul><li><code>ids</code> {List} 词汇序号</li><li><code>length</code> {int} 返回列表的长度</li><li>返回 {List} 词汇文本</li></ul><p>获取词汇表中多个词汇序号的词汇文本列表。</p><h4 id="vocab-getids-words-length" tabindex="-1"><a class="header-anchor" href="#vocab-getids-words-length" aria-hidden="true">#</a> vocab.getIds(words[,length])</h4><ul><li><code>words</code> {List} 词汇文本</li><li><code>length</code> {int} 返回列表的长度，空缺处补0。</li><li>返回 {List} 词汇序号</li></ul><p>获取词汇表中多个词汇问本的词汇序号列表。</p><h3 id="使用例子" tabindex="-1"><a class="header-anchor" href="#使用例子" aria-hidden="true">#</a> 使用例子</h3><h4 id="图像目标检测-yolov5s模型" tabindex="-1"><a class="header-anchor" href="#图像目标检测-yolov5s模型" aria-hidden="true">#</a> 图像目标检测(Yolov5s模型)</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/**
 * Pytorch插件 目标检测算法 Yolov5模型 实现示例
 * 
 * 作者: 浩然（Q:2125764918）
 */



//体验本插件可视化识别效果，可使用此三行代码：
/*
pytorch = $plugins.load(&quot;com.hraps.pytorch&quot;)
pytorch.debugOd()
exit()
*/


//导入插件模块
pytorch = $plugins.load(&quot;com.hraps.pytorch&quot;)

//导入神经网络模型 输入模型文件路径 (此处导入了内置Yolov5s模型)
var model = pytorch.load(&quot;yolov5s&quot;)
//导入识别结果对应类型名 （为类名构成的字符串数组,可自己写死，如[&quot;car&quot;,&quot;plane&quot;,&quot;person&quot;...]）
var classes = pytorch.getCocoClasses()

//定义模型输入图片的边长 输入维度为w*h*3
var inputWidth = 640
var inputHeight = 640
//定义模型输出数量以及每个的大小 输出维度为row*column
//row为yolo模型的分格数，由输入大小有关
var outputRow = 25200
//column为每个分格的维度，由 位置(x,y,w,h)4个值,分数(score)1个值,类型(coco数据集80个类)80个值，共计85个值
var outputColumn = 4 + 1 + 80

//导入需识别的图片
var img = images.read(&quot;/sdcard/DCIM/Camera/b.jpg&quot;)
//缩放至模型输入维度
var inputImg = images.resize(img, [inputWidth, inputHeight])
//图片转换至张量 MEAN和STD值设置为000和111，即不启用特殊归一化
inputTensor = pytorch.bitmapToTensor(inputImg.getBitmap(), [0, 0, 0], [1, 1, 1])
//执行神经网络推进 获得输出张量
output = pytorch.forwardTuple(model, inputTensor)
//张量转浮点数组
f = output.getDataAsFloatArray()
log(&quot;模型输出维度: &quot; + f.length)

//计算图形缩放比例
imgScaleX = img.getWidth() / inputWidth
imgScaleY = img.getHeight() / inputHeight
//还原识别结果的真实位置 转换至目标检测结果类数组
results = pytorch.floatsToResults(f, outputRow, outputColumn, imgScaleX, imgScaleY)
log(&quot;网络初始识别数量: &quot; + results.size())
//NMS算法过滤重复结果
nmsResults = pytorch.useNMS(results)
toastLog(&quot;最终结果数量: &quot; + nmsResults.size())
//遍历输出结果
for (var i = 0; i &lt; nmsResults.size(); i++) {
    result = nmsResults.get(i)
    rect = result.rect
    str = &quot;类型: &quot; + classes.get(result.classIndex) + &quot;  置信度: &quot; + result.score + &quot;   位置: 左&quot; + rect.left + &quot; 上&quot; + rect.top + &quot; 右&quot; + rect.right + &quot; 下&quot; + rect.bottom;
    log(str)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自然语言情感分析-textcnn模型" tabindex="-1"><a class="header-anchor" href="#自然语言情感分析-textcnn模型" aria-hidden="true">#</a> 自然语言情感分析(TextCNN模型)</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/**
 * Pytorch插件 语言情感分析算法 TextCNN模型 实现示例
 * 
 * 作者: 浩然（Q:2125764918）
 */


//体验本插件效果，可使用此行代码：
/*
pytorch = $plugins.load(&quot;com.hraps.pytorch&quot;)
pytorch.debugTec()
exit()
*/


//需识别的语句
var text = &quot;The program is useful!&quot;

//导入插件模块
pytorch = $plugins.load(&quot;com.hraps.pytorch&quot;)
//导入神经网络模型 输入模型文件路径 (此处导入了内置textcnn模型)
var model = pytorch.load(&quot;textcnn&quot;)
//导入词汇表 由一行一单词的txt文件构成 行号和单词应与模型训练时词向量序号对应 (此处导入了内置模型对应词汇表)
var vocab = pytorch.getTextcnnVocab()
log(&quot;词汇表导入成功，共计&quot; + vocab.size() + &quot;个&quot;);

//语句简单化处理 过滤标点 全部小写
var textSimple = pytorch.simplifySentence(text)
log(&quot;简单化语句: &quot; + textSimple);
//定义模型输入词汇量长度
var inputSize = 128
//根据词汇表将语句换成词向量序号 未知单词与长度不足处自动补0
var ids = vocab.getIds(textSimple.split(&quot; &quot;), inputSize)
log(ids)
//将列表构造成Tensor类型，适合网络输入
var inputTensor = pytorch.fromBlob(ids, [1, 128])
//执行模型得到输出结果
var outPutTensor = pytorch.forward(model, inputTensor)
//输出张量转换为浮点数组
var result = outPutTensor.getDataAsFloatArray()
log(&quot;模型输出: &quot; + result[0] + &quot;   &quot; + result[1])
//分析结果
console.info(&quot;语句：&quot; + text)
if (result[0] &lt;= result[1]) {
    console.info(&quot;结果为：正面情感&quot;)
} else {
    console.info(&quot;结果为：负面情感&quot;)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ocr插件" tabindex="-1"><a class="header-anchor" href="#ocr插件" aria-hidden="true">#</a> OCR插件</h2><blockquote><p>本插件及文档由第三方开发者<code>浩然</code>开发和提供，特此感谢。</p></blockquote><p>该模块可实现对图像中的文字进行识别,使用示例可见本章末。采用了最前沿的DbNet+AngleNet+CrnnNet的深度学习思路实现。</p>`,105),x={href:"https://wwwq.lanzouc.com/ig3Qg16991xa",target:"_blank",rel:"noopener noreferrer"},q=t(`<p></p><h3 id="识别函数" tabindex="-1"><a class="header-anchor" href="#识别函数" aria-hidden="true">#</a> 识别函数</h3><h4 id="ocr-detect-img-ratio" tabindex="-1"><a class="header-anchor" href="#ocr-detect-img-ratio" aria-hidden="true">#</a> ocr.detect(img[,ratio])</h4><ul><li><code>img</code> {Bitmap} 需识别的图像，为Bitmap类型，Autojs中的图像可通过图像的.getBitmap()方法进行转换。</li><li><code>ratio</code> {float} 缩放比率，默认为1，在识别较小的图片时可适当调小。</li><li>返回 {List} 识别结果构成的列表，详情见下文OcrResult类。</li></ul><p>OCR识别函数，初次调用会自动进行初始化。使用示例可见本章末。</p><h3 id="结果过滤函数" tabindex="-1"><a class="header-anchor" href="#结果过滤函数" aria-hidden="true">#</a> 结果过滤函数</h3><h4 id="ocr-filterscore-results-dbnetscore-anglescore-crnnscore" tabindex="-1"><a class="header-anchor" href="#ocr-filterscore-results-dbnetscore-anglescore-crnnscore" aria-hidden="true">#</a> ocr.filterScore(results,dbnetScore,angleScore,crnnScore)</h4><ul><li><code>results</code> {List} 需过滤的结果列表</li><li><code>dbnetScore</code> {float} 该区域为文字的置信度的下限</li><li><code>angleScore</code> {float} 文字方向类型的置信度的下限</li><li><code>crnnScore</code> {float} 所有文字识别的平均置信度的下限</li><li>返回 {List} 过滤后的结果列表</li></ul><p>用于过滤一些置信度较低的结果，不需过滤的选项请填0。</p><p></p><h3 id="ocrresult类" tabindex="-1"><a class="header-anchor" href="#ocrresult类" aria-hidden="true">#</a> OcrResult类</h3><p>该类为OCR的识别结果类，一个实类为一个结果项。</p><h4 id="ocrresult-text" tabindex="-1"><a class="header-anchor" href="#ocrresult-text" aria-hidden="true">#</a> ocrResult.text</h4><ul><li>{String} 识别结果的文本</li></ul><h4 id="ocrresult-frame" tabindex="-1"><a class="header-anchor" href="#ocrresult-frame" aria-hidden="true">#</a> ocrResult.frame</h4><ul><li>{List} 识别结果的位置</li></ul><p>识别结果为一个任意四边形，返回的是长度为8的整形列表。<br> 分别为四个顶点的横纵坐标，即[x1,y1,x2,y2,x3,y3,x4,y4]。</p><h4 id="ocrresult-angletype" tabindex="-1"><a class="header-anchor" href="#ocrresult-angletype" aria-hidden="true">#</a> ocrResult.angleType</h4><ul><li>{int} 结果的文本角度类型</li></ul><h4 id="ocrresult-dbnetscore" tabindex="-1"><a class="header-anchor" href="#ocrresult-dbnetscore" aria-hidden="true">#</a> ocrResult.dbnetScore</h4><ul><li>{float} 结果区域为文字的置信度</li></ul><h4 id="ocrresult-anglescore" tabindex="-1"><a class="header-anchor" href="#ocrresult-anglescore" aria-hidden="true">#</a> ocrResult.angleScore</h4><ul><li>{float} 结果文字角度类型的置信度</li></ul><h4 id="ocrresult-crnnscore" tabindex="-1"><a class="header-anchor" href="#ocrresult-crnnscore" aria-hidden="true">#</a> ocrResult.crnnScore</h4><ul><li>{List} 识别结果的每个字的置信度列表</li></ul><h3 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例" aria-hidden="true">#</a> 使用示例</h3><p></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//导入插件</span>
ocr <span class="token operator">=</span> $plugins<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;com.hraps.ocr&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//导入需识别的图片，请自行输入图片路径</span>
img <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;./test.jpg&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//识别图片</span>
results <span class="token operator">=</span> ocr<span class="token punctuation">.</span><span class="token function">detect</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span><span class="token function">getBitmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;过滤前结果数：&quot;</span><span class="token operator">+</span>results<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//识别结果过滤</span>
results <span class="token operator">=</span> ocr<span class="token punctuation">.</span><span class="token function">filterScore</span><span class="token punctuation">(</span>results<span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span>
<span class="token comment">//输出最终结果</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>results<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> re <span class="token operator">=</span> results<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;结果:&quot;</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">&quot;  文字:&quot;</span><span class="token operator">+</span>re<span class="token punctuation">.</span>text<span class="token operator">+</span><span class="token string">&quot;  位置:&quot;</span><span class="token operator">+</span>re<span class="token punctuation">.</span>frame<span class="token operator">+</span><span class="token string">&quot;  角度类型:&quot;</span><span class="token operator">+</span>re<span class="token punctuation">.</span>angleType<span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;区域置信度:&quot;</span><span class="token operator">+</span>re<span class="token punctuation">.</span>dbScore<span class="token operator">+</span><span class="token string">&quot;  角度置信度:&quot;</span><span class="token operator">+</span>re<span class="token punctuation">.</span>angleScore<span class="token operator">+</span><span class="token string">&quot;  文字置信度:&quot;</span><span class="token operator">+</span>re<span class="token punctuation">.</span>crnnScore<span class="token operator">+</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28);function _(S,w){const a=o("ExternalLinkIcon");return l(),r("div",null,[d,u,p,h,e("p",null,[e("a",v,[n("Pytorch插件下载"),s(a)])]),m,b,g,e("p",null,[n("如对Pytorch了解较少，个人(指插件作者"),f,n(")推荐可以去此网站学习了解："),e("a",y,[n("深度学习Pytorch"),s(a)]),n("。")]),k,e("p",null,[n("插件下载："),e("a",x,[n("蓝奏云"),s(a)])]),q])}const L=i(c,[["render",_],["__file","thirdPartyPlugins.html.vue"]]);export{L as default};
