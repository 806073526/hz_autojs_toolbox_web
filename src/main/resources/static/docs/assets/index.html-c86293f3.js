import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as a,c,d as e,e as t,b as n,w as s,f as o}from"./app-ff93bfbc.js";const u={},h=o(`<p>本文档为第一代API文档，也即Auto.js Pro的默认引擎(Rhino犀牛引擎）的文档。如果你从来没有听说过什么第一代API，犀牛引擎，Node.js引擎，那么说明<strong>你来对文档了</strong>。</p><blockquote><p>查看基于Node.js的API(第二代API)的文档请在菜单栏切换第二代API文档。</p></blockquote><h1 id="api稳定性" tabindex="-1"><a class="header-anchor" href="#api稳定性" aria-hidden="true">#</a> API稳定性</h1><p>由于Auto.js Pro处于活跃的更新和开发状态，API可能随时有变动，我们用Stability来标记模块、函数的稳定性。这些标记包括：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>Stability: 0 - Deprecated

弃用的函数、模块或特性，在未来的更新中将很快会被移除或更改。应该在脚本中移除对这些函数的使用，以免后续出现意料之外的问题。
Stability: 1 - Experimental

实验性的函数、模块或特性，在未来的更新中可能会更改或移除。应该谨慎使用这些函数或模块，或者仅用作临时或试验用途。
Stability: 2 - Stable

稳定的函数、模块或特性，在未来的更新中这些模块已有的函数一般不会被更改，会保证后向兼容性。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="如何阅读本文档" tabindex="-1"><a class="header-anchor" href="#如何阅读本文档" aria-hidden="true">#</a> 如何阅读本文档</h1>`,6),p=o('<h2 id="input-i-text" tabindex="-1"><a class="header-anchor" href="#input-i-text" aria-hidden="true">#</a> input([i, ]text)</h2><ul><li><code>i</code> {number} 表示要输入的为第i + 1个输入框</li><li><code>text</code> {string} 要输入的文本</li></ul><p>input表示函数名，括号内的<code>[i, ]text</code>为函数的参数。下面是参数列表，&quot;number&quot;表示参数i的类型为数值，&quot;string&quot;表示参数text的类型为字符串。</p><p>例如input(1, &quot;啦啦啦&quot;)，执行这个语句会在屏幕上的第2个输入框处输入&quot;啦啦啦&quot;。</p><p>方括号[ ]表示参数为可选参数。也就是说，可以省略i直接调用input。例如input(&quot;嘿嘿嘿&quot;)，按照文档，这个语句会在屏幕上所有输入框输入&quot;嘿嘿嘿&quot;。</p><p>调用有可选参数的函数时请不要写上方括号。</p><p>我们再看第二个例子。图片和图色处理中detectsColor函数的部分说明。</p><h2 id="images-detectscolor-image-color-x-y-threshold-16-algorithm-diff" tabindex="-1"><a class="header-anchor" href="#images-detectscolor-image-color-x-y-threshold-16-algorithm-diff" aria-hidden="true">#</a> images.detectsColor(image, color, x, y[, threshold = 16, algorithm = &quot;diff&quot;])</h2>',8),m=o("<li><code>image</code> {Image} 图片</li><li><code>color</code> {number} | {string} 要检测的颜色</li><li><code>x</code> {number} 要检测的位置横坐标</li><li><code>y</code> {number} 要检测的位置纵坐标</li><li><code>threshold</code> {number} 颜色相似度临界值，默认为16。取值范围为0~255。</li>",5),_=e("code",null,"algorithm",-1),b=e("li",null,'"equal": 相等匹配，只有与给定颜色color完全相等时才匹配。',-1),g=e("li",null,'"diff": 差值匹配。与给定颜色的R、G、B差的绝对值之和小于threshold时匹配。',-1),q=e("li",null,'"rgb": rgb欧拉距离相似度。与给定颜色color的rgb欧拉距离小于等于threshold时匹配。',-1),x={href:"https://en.wikipedia.org/wiki/Color_difference",target:"_blank",rel:"noopener noreferrer"},f=e("li",null,'"hs": hs欧拉距离匹配。hs为HSV空间的色调值。',-1),v=o("<p>同样地，<code>[, threshold = 16, algorithm = &quot;rgb&quot;]</code>为可选参数，并且，等于号=后面的值为参数的默认值。也就是如果不指定该参数，则该参数将会为这个值。</p><p>例如 <code>images.detectsColor(captureScreen(), &quot;#112233&quot;, 100, 200)</code> 相当于 <code>images.detectsColor(captureScreen(), &quot;#112233&quot;, 100, 200, 16, &quot;rgb&quot;)</code>， 而<code>images.detectsColor(captureScreen(), &quot;#112233&quot;, 100, 200, 64)</code> 相当于<code>images.detectsColor(captureScreen(), &quot;#112233&quot;, 100, 200, 64, &quot;rgb&quot;)</code>。</p><p>调用有可选参数及默认值的函数时请不要写上方括号和等于号。</p>",3);function k(A,S){const r=i("RouterLink"),l=i("ExternalLinkIcon");return a(),c("div",null,[h,e("p",null,[t("先看一个例子，下面是"),n(r,{to:"/v8/coordinatesBasedAutomation.html"},{default:s(()=>[t("基于控件的操作模拟")]),_:1}),t("的章节中input函数的部分说明。")]),p,e("ul",null,[m,e("li",null,[_,t(" {string} 颜色匹配算法，包括: "),e("ul",null,[b,g,q,e("li",null,[t('"rgb+": 加权rgb欧拉距离匹配('),e("a",x,[t("LAB Delta E"),n(l)]),t(")。")]),f])])]),v])}const P=d(u,[["render",k],["__file","index.html.vue"]]);export{P as default};
